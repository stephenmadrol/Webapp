{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readAlert = exports[\"default\"] = void 0;\n\nvar _LS2Request = _interopRequireDefault(require(\"../LS2Request\"));\n\nvar _platform = require(\"../platform\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/* eslint-disable no-console */\n\n/* global console */\n\n\nvar audioGuidanceEnabled = null;\n\nvar checkAudioGuidance = function checkAudioGuidance() {\n  return new Promise(function (resolve, reject) {\n    if (audioGuidanceEnabled === null) {\n      new _LS2Request[\"default\"]().send({\n        service: 'luna://com.webos.settingsservice',\n        method: 'getSystemSettings',\n        subscribe: true,\n        parameters: {\n          'keys': ['audioGuidance'],\n          'category': 'option'\n        },\n        onSuccess: function onSuccess(res) {\n          if (res && res.settings.audioGuidance === 'on') {\n            audioGuidanceEnabled = true;\n            resolve();\n            return;\n          }\n\n          audioGuidanceEnabled = false;\n          reject();\n        },\n        onFailure: function onFailure(err) {\n          reject('Failed to get system AudioGuidance settings: ' + JSON.stringify(err));\n        }\n      });\n    } else if (audioGuidanceEnabled) {\n      resolve();\n    } else {\n      reject();\n    }\n  });\n};\n\nvar readAlertMessage = function readAlertMessage(string, clear) {\n  return function () {\n    return new Promise(function (resolve, reject) {\n      new _LS2Request[\"default\"]().send({\n        service: 'luna://com.webos.service.tts',\n        method: 'speak',\n        parameters: {\n          'text': string,\n          'clear': clear\n        },\n        onSuccess: resolve,\n        onFailure: function onFailure(err) {\n          reject('Failed to readAlertMessage: ' + JSON.stringify(err));\n        }\n      });\n    });\n  };\n};\n/**\n * Read alert text when accessibility audio guidance is enabled.\n *\n * @function\n * @param {String} string String to voice readout\n * @param {Boolean} [clear=true] Clear option for TTS. If true, it will cut off previous reading.\n * @returns {undefined}\n * @memberof webos/speech\n * @public\n */\n\n\nvar readAlert = function readAlert(string) {\n  var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (_platform.platform.tv) {\n    checkAudioGuidance().then(readAlertMessage(string, clear))[\"catch\"](function (message) {\n      if (message) {\n        console.error(\"Failed to readAlert: \".concat(message));\n      }\n    });\n  } else {\n    console.warn('Platform doesn\\'t support TTS api.');\n  }\n};\n\nexports.readAlert = readAlert;\nvar _default = readAlert;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/webos/speech/readAlert.js"],"names":["Object","defineProperty","exports","value","readAlert","_LS2Request","_interopRequireDefault","require","_platform","obj","__esModule","audioGuidanceEnabled","checkAudioGuidance","Promise","resolve","reject","send","service","method","subscribe","parameters","onSuccess","res","settings","audioGuidance","onFailure","err","JSON","stringify","readAlertMessage","string","clear","arguments","length","undefined","platform","tv","then","message","console","error","concat","warn","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readAlert = exports[\"default\"] = void 0;\n\nvar _LS2Request = _interopRequireDefault(require(\"../LS2Request\"));\n\nvar _platform = require(\"../platform\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/* eslint-disable no-console */\n\n/* global console */\nvar audioGuidanceEnabled = null;\n\nvar checkAudioGuidance = function checkAudioGuidance() {\n  return new Promise(function (resolve, reject) {\n    if (audioGuidanceEnabled === null) {\n      new _LS2Request[\"default\"]().send({\n        service: 'luna://com.webos.settingsservice',\n        method: 'getSystemSettings',\n        subscribe: true,\n        parameters: {\n          'keys': ['audioGuidance'],\n          'category': 'option'\n        },\n        onSuccess: function onSuccess(res) {\n          if (res && res.settings.audioGuidance === 'on') {\n            audioGuidanceEnabled = true;\n            resolve();\n            return;\n          }\n\n          audioGuidanceEnabled = false;\n          reject();\n        },\n        onFailure: function onFailure(err) {\n          reject('Failed to get system AudioGuidance settings: ' + JSON.stringify(err));\n        }\n      });\n    } else if (audioGuidanceEnabled) {\n      resolve();\n    } else {\n      reject();\n    }\n  });\n};\n\nvar readAlertMessage = function readAlertMessage(string, clear) {\n  return function () {\n    return new Promise(function (resolve, reject) {\n      new _LS2Request[\"default\"]().send({\n        service: 'luna://com.webos.service.tts',\n        method: 'speak',\n        parameters: {\n          'text': string,\n          'clear': clear\n        },\n        onSuccess: resolve,\n        onFailure: function onFailure(err) {\n          reject('Failed to readAlertMessage: ' + JSON.stringify(err));\n        }\n      });\n    });\n  };\n};\n/**\n * Read alert text when accessibility audio guidance is enabled.\n *\n * @function\n * @param {String} string String to voice readout\n * @param {Boolean} [clear=true] Clear option for TTS. If true, it will cut off previous reading.\n * @returns {undefined}\n * @memberof webos/speech\n * @public\n */\n\n\nvar readAlert = function readAlert(string) {\n  var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (_platform.platform.tv) {\n    checkAudioGuidance().then(readAlertMessage(string, clear))[\"catch\"](function (message) {\n      if (message) {\n        console.error(\"Failed to readAlert: \".concat(message));\n      }\n    });\n  } else {\n    console.warn('Platform doesn\\'t support TTS api.');\n  }\n};\n\nexports.readAlert = readAlert;\nvar _default = readAlert;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}