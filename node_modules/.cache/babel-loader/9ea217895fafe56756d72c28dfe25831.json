{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWindowReady = isWindowReady;\nexports.onWindowReady = onWindowReady;\nexports.windowReady = windowReady;\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Utilities to facilitate integration with v8 snapshot builds\n *\n * @module core/snapshot\n * @exports isWindowReady\n * @exports onWindowReady\n * @exports windowReady\n * @public\n */\n\n\nvar windowCallbacks = [];\n/**\n * Determines if the `window` is available\n *\n * @function\n *\n * @returns {Boolean} `true` when `window` is ready\n * @memberof core/snapshot\n * @public\n */\n\nfunction isWindowReady() {\n  return typeof window !== 'undefined';\n}\n/**\n * Executes a callback, such as registering event handlers, when a valid `window` is available.\n *\n * During normal operation, the callback will be executed immediately. During a pre-rendering pass,\n * the callback is not be executed at all. When using snapshot, the callback is added to a queue\n * and is executed in order once the window is available.\n *\n * *Important Notes*\n * * The callback should not alter the initial HTML state. If it does, it will invalidate the\n * pre-render state and interfere with React rehydration.\n * * The callback should be limited to module-scoped actions and not component instance actions. If\n * the action is tied to a component, it should be invoked from within the component's lifecycle\n * methods.\n *\n * @function\n * @param   {Function}    callback    Function to run when the window is ready\n *\n * @returns {undefined}\n * @memberof core/snapshot\n * @public\n */\n\n\nfunction onWindowReady(callback) {\n  if (isWindowReady()) {\n    callback();\n  } else {\n    windowCallbacks.push(callback);\n  }\n}\n/**\n * Executes all queued window callbacks.\n *\n * Requires that the window be, in fact, available and will throw an `Error` if not.\n *\n * @function\n *\n * @returns {undefined}\n * @memberof core/snapshot\n * @public\n */\n\n\nfunction windowReady() {\n  !isWindowReady() ? process.env.NODE_ENV !== \"production\" ? (0, _invariant[\"default\"])(false, 'windowReady cannot be run until the window is available') : !false ? process.env.NODE_ENV !== \"production\" ? invariant(false) : invariant(false) : void 0 : void 0;\n  windowCallbacks.forEach(function (f) {\n    return f();\n  });\n}\n\nvar _default = onWindowReady;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\core\\snapshot\\snapshot.js"],"names":["Object","defineProperty","exports","value","isWindowReady","onWindowReady","windowReady","_invariant","_interopRequireDefault","require","obj","__esModule","windowCallbacks","window","callback","push","process","env","NODE_ENV","invariant","forEach","f","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,aAAR,GAAwBA,aAAxB;AACAH,OAAO,CAACI,WAAR,GAAsBA,WAAtB;AACAJ,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIK,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;;;;;;;;;;;AASA,IAAIE,eAAe,GAAG,EAAtB;AACA;;;;;;;;;;AAUA,SAASR,aAAT,GAAyB;AACvB,SAAO,OAAOS,MAAP,KAAkB,WAAzB;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASR,aAAT,CAAuBS,QAAvB,EAAiC;AAC/B,MAAIV,aAAa,EAAjB,EAAqB;AACnBU,IAAAA,QAAQ;AACT,GAFD,MAEO;AACLF,IAAAA,eAAe,CAACG,IAAhB,CAAqBD,QAArB;AACD;AACF;AACD;;;;;;;;;;;;;AAaA,SAASR,WAAT,GAAuB;AACrB,GAACF,aAAa,EAAd,GAAmBY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGX,UAAU,CAAC,SAAD,CAAd,EAA2B,KAA3B,EAAkC,yDAAlC,CAAxC,IAAiJ,KAAjJ,2CAAuIY,SAAvI,UAAuIA,SAAvI,gBAAnB,GAA6K,KAAK,CAAlL;AACAP,EAAAA,eAAe,CAACQ,OAAhB,CAAwB,UAAUC,CAAV,EAAa;AACnC,WAAOA,CAAC,EAAR;AACD,GAFD;AAGD;;AAED,IAAIC,QAAQ,GAAGjB,aAAf;AACAH,OAAO,CAAC,SAAD,CAAP,GAAqBoB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWindowReady = isWindowReady;\nexports.onWindowReady = onWindowReady;\nexports.windowReady = windowReady;\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Utilities to facilitate integration with v8 snapshot builds\n *\n * @module core/snapshot\n * @exports isWindowReady\n * @exports onWindowReady\n * @exports windowReady\n * @public\n */\nvar windowCallbacks = [];\n/**\n * Determines if the `window` is available\n *\n * @function\n *\n * @returns {Boolean} `true` when `window` is ready\n * @memberof core/snapshot\n * @public\n */\n\nfunction isWindowReady() {\n  return typeof window !== 'undefined';\n}\n/**\n * Executes a callback, such as registering event handlers, when a valid `window` is available.\n *\n * During normal operation, the callback will be executed immediately. During a pre-rendering pass,\n * the callback is not be executed at all. When using snapshot, the callback is added to a queue\n * and is executed in order once the window is available.\n *\n * *Important Notes*\n * * The callback should not alter the initial HTML state. If it does, it will invalidate the\n * pre-render state and interfere with React rehydration.\n * * The callback should be limited to module-scoped actions and not component instance actions. If\n * the action is tied to a component, it should be invoked from within the component's lifecycle\n * methods.\n *\n * @function\n * @param   {Function}    callback    Function to run when the window is ready\n *\n * @returns {undefined}\n * @memberof core/snapshot\n * @public\n */\n\n\nfunction onWindowReady(callback) {\n  if (isWindowReady()) {\n    callback();\n  } else {\n    windowCallbacks.push(callback);\n  }\n}\n/**\n * Executes all queued window callbacks.\n *\n * Requires that the window be, in fact, available and will throw an `Error` if not.\n *\n * @function\n *\n * @returns {undefined}\n * @memberof core/snapshot\n * @public\n */\n\n\nfunction windowReady() {\n  !isWindowReady() ? process.env.NODE_ENV !== \"production\" ? (0, _invariant[\"default\"])(false, 'windowReady cannot be run until the window is available') : invariant(false) : void 0;\n  windowCallbacks.forEach(function (f) {\n    return f();\n  });\n}\n\nvar _default = onWindowReady;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}