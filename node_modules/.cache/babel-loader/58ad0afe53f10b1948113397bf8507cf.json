{"ast":null,"code":"\"use strict\";\n/*\n * Path.js - minimal pure js implementation of the nodejs path module\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Path = {\n  /**\n   * Return the parent directory of the given pathname\n   * similar to the dirname shell function.  \n   * @static\n   * @param {string} pathname path to check\n   * @return {string} the parent dir of the given pathname\n   */\n  dirname: function dirname(pathname) {\n    pathname = pathname.replace(/\\\\/g, \"/\");\n    var i = pathname.lastIndexOf(\"/\");\n    return i !== -1 ? pathname.substring(0, i) : pathname;\n  },\n\n  /**\n   * Return the normalized version of the given pathname. This\n   * cleans up things like double directory separators and such.\n   * @static\n   * @param {string} pathname path to check\n   * @return {string} the normalized version of the given pathname\n   */\n  normalize: function normalize(pathname) {\n    if (pathname) {\n      pathname = pathname.replace(/\\\\/g, \"/\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/[^/]*[^\\./]\\/\\.\\./g, \"/.\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/\\.\\//g, \"/\");\n      pathname = pathname.replace(/^\\.\\//, \"\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/\\.$/, \"/\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      if (pathname.length > 1) pathname = pathname.replace(/\\/$/, \"\");\n      if (pathname.length === 0) pathname = '.';\n    }\n\n    return pathname;\n  },\n\n  /**\n   * Return a path that is the concatenation of all the of the arguments\n   * which each name a path segment.\n   * @static\n   * @param {...string} var_args\n   * @return {string} the concatenated pathname\n   */\n  join: function join(var_args) {\n    var arr = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      arr.push(arguments[i] && arguments[i].length > 0 ? arguments[i] : \".\");\n    }\n\n    return Path.normalize(arr.join(\"/\"));\n  }\n};\nmodule.exports = Path;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/Path.js"],"names":["Path","dirname","pathname","replace","i","lastIndexOf","substring","normalize","length","join","var_args","arr","arguments","push","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIA,IAAI,GAAG;AACT;;;;;;;AAOAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClCA,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX;AACA,QAAIC,CAAC,GAAGF,QAAQ,CAACG,WAAT,CAAqB,GAArB,CAAR;AACA,WAAOD,CAAC,KAAK,CAAC,CAAP,GAAWF,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsBF,CAAtB,CAAX,GAAsCF,QAA7C;AACD,GAZQ;;AAcT;;;;;;;AAOAK,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBL,QAAnB,EAA6B;AACtC,QAAIA,QAAJ,EAAc;AACZA,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,sBAAjB,EAAyC,IAAzC,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,SAAjB,EAA4B,GAA5B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAX;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,GAA1B,CAAX;AACA,UAAID,QAAQ,CAACM,MAAT,GAAkB,CAAtB,EAAyBN,QAAQ,GAAGA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAX;AACzB,UAAID,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA2BN,QAAQ,GAAG,GAAX;AAC5B;;AAED,WAAOA,QAAP;AACD,GArCQ;;AAuCT;;;;;;;AAOAO,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,QAAd,EAAwB;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AAEA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,SAAS,CAACJ,MAA9B,EAAsCJ,CAAC,EAAvC,EAA2C;AACzCO,MAAAA,GAAG,CAACE,IAAJ,CAASD,SAAS,CAACR,CAAD,CAAT,IAAgBQ,SAAS,CAACR,CAAD,CAAT,CAAaI,MAAb,GAAsB,CAAtC,GAA0CI,SAAS,CAACR,CAAD,CAAnD,GAAyD,GAAlE;AACD;;AAED,WAAOJ,IAAI,CAACO,SAAL,CAAeI,GAAG,CAACF,IAAJ,CAAS,GAAT,CAAf,CAAP;AACD;AAtDQ,CAAX;AAwDAK,MAAM,CAACC,OAAP,GAAiBf,IAAjB","sourcesContent":["\"use strict\";\n\n/*\n * Path.js - minimal pure js implementation of the nodejs path module\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Path = {\n  /**\n   * Return the parent directory of the given pathname\n   * similar to the dirname shell function.  \n   * @static\n   * @param {string} pathname path to check\n   * @return {string} the parent dir of the given pathname\n   */\n  dirname: function dirname(pathname) {\n    pathname = pathname.replace(/\\\\/g, \"/\");\n    var i = pathname.lastIndexOf(\"/\");\n    return i !== -1 ? pathname.substring(0, i) : pathname;\n  },\n\n  /**\n   * Return the normalized version of the given pathname. This\n   * cleans up things like double directory separators and such.\n   * @static\n   * @param {string} pathname path to check\n   * @return {string} the normalized version of the given pathname\n   */\n  normalize: function normalize(pathname) {\n    if (pathname) {\n      pathname = pathname.replace(/\\\\/g, \"/\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/[^/]*[^\\./]\\/\\.\\./g, \"/.\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/\\.\\//g, \"/\");\n      pathname = pathname.replace(/^\\.\\//, \"\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      pathname = pathname.replace(/\\/\\.$/, \"/\");\n      pathname = pathname.replace(/\\/\\//g, \"/\");\n      if (pathname.length > 1) pathname = pathname.replace(/\\/$/, \"\");\n      if (pathname.length === 0) pathname = '.';\n    }\n\n    return pathname;\n  },\n\n  /**\n   * Return a path that is the concatenation of all the of the arguments\n   * which each name a path segment.\n   * @static\n   * @param {...string} var_args\n   * @return {string} the concatenated pathname\n   */\n  join: function join(var_args) {\n    var arr = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      arr.push(arguments[i] && arguments[i].length > 0 ? arguments[i] : \".\");\n    }\n\n    return Path.normalize(arr.join(\"/\"));\n  }\n};\nmodule.exports = Path;"]},"metadata":{},"sourceType":"module"}