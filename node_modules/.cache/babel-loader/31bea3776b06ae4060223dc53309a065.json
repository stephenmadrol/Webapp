{"ast":null,"code":"\"use strict\";\n/*\n * islamic.js - Represent a Islamic calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nCalendar.js \nMathUtils.js \n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Islamic calendar object. This class encodes information about\n * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Islamic calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Islamic Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar IslamicCal = function IslamicCal(options) {\n  this.type = \"islamic\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number>\n */\n\n\nIslamicCal.monthLengths = [30,\n/* Muharram */\n29,\n/* Saffar */\n30,\n/* Rabi'I */\n29,\n/* Rabi'II */\n30,\n/* Jumada I */\n29,\n/* Jumada II */\n30,\n/* Rajab */\n29,\n/* Sha'ban */\n30,\n/* Ramadan */\n29,\n/* Shawwal */\n30,\n/* Dhu al-Qa'da */\n29\n/* Dhu al-Hijja */\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\nIslamicCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nIslamicCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12) {\n    return IslamicCal.monthLengths[month - 1];\n  } else {\n    return this.isLeapYear(year) ? 30 : 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Islamic calendar.\n * The year parameter may be given as a number, or as a IslamicDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nIslamicCal.prototype.isLeapYear = function (year) {\n  return MathUtils.mod(14 + 11 * year, 30) < 11;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nIslamicCal.prototype.getType = function () {\n  return this.type;\n};\n/*register this calendar for the factory method */\n\n\nCalendar._constructors[\"islamic\"] = IslamicCal;\nmodule.exports = IslamicCal;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/IslamicCal.js"],"names":["ilib","require","MathUtils","Calendar","IslamicCal","options","type","onLoad","monthLengths","prototype","getNumMonths","year","getMonLength","month","isLeapYear","mod","getType","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAKA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;AACA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIG,UAAU,GAAG,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC5C,OAAKC,IAAL,GAAY,SAAZ;;AAEA,MAAID,OAAO,IAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,UAAzC,EAAqD;AACnDF,IAAAA,OAAO,CAACE,MAAR,CAAe,IAAf;AACD;AACF,CAND;AAOA;;;;;;;;AAQAH,UAAU,CAACI,YAAX,GAA0B,CAAC,EAAD;AAC1B;AACA,EAF0B;AAG1B;AACA,EAJ0B;AAK1B;AACA,EAN0B;AAO1B;AACA,EAR0B;AAS1B;AACA,EAV0B;AAW1B;AACA,EAZ0B;AAa1B;AACA,EAd0B;AAe1B;AACA,EAhB0B;AAiB1B;AACA,EAlB0B;AAmB1B;AACA,EApB0B;AAqB1B;AACA;AACA;AAvB0B,CAA1B;AAyBA;;;;;;;;;AASAJ,UAAU,CAACK,SAAX,CAAqBC,YAArB,GAAoC,UAAUC,IAAV,EAAgB;AAClD,SAAO,EAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAP,UAAU,CAACK,SAAX,CAAqBG,YAArB,GAAoC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AACzD,MAAIE,KAAK,KAAK,EAAd,EAAkB;AAChB,WAAOT,UAAU,CAACI,YAAX,CAAwBK,KAAK,GAAG,CAAhC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAKC,UAAL,CAAgBH,IAAhB,IAAwB,EAAxB,GAA6B,EAApC;AACD;AACF,CAND;AAOA;;;;;;;;AAQAP,UAAU,CAACK,SAAX,CAAqBK,UAArB,GAAkC,UAAUH,IAAV,EAAgB;AAChD,SAAOT,SAAS,CAACa,GAAV,CAAc,KAAK,KAAKJ,IAAxB,EAA8B,EAA9B,IAAoC,EAA3C;AACD,CAFD;AAGA;;;;;;;AAOAP,UAAU,CAACK,SAAX,CAAqBO,OAArB,GAA+B,YAAY;AACzC,SAAO,KAAKV,IAAZ;AACD,CAFD;AAGA;;;AAGAH,QAAQ,CAACc,aAAT,CAAuB,SAAvB,IAAoCb,UAApC;AACAc,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["\"use strict\";\n\n/*\n * islamic.js - Represent a Islamic calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nCalendar.js \nMathUtils.js \n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Islamic calendar object. This class encodes information about\n * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Islamic calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Islamic Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar IslamicCal = function IslamicCal(options) {\n  this.type = \"islamic\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number>\n */\n\n\nIslamicCal.monthLengths = [30,\n/* Muharram */\n29,\n/* Saffar */\n30,\n/* Rabi'I */\n29,\n/* Rabi'II */\n30,\n/* Jumada I */\n29,\n/* Jumada II */\n30,\n/* Rajab */\n29,\n/* Sha'ban */\n30,\n/* Ramadan */\n29,\n/* Shawwal */\n30,\n/* Dhu al-Qa'da */\n29\n/* Dhu al-Hijja */\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\nIslamicCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nIslamicCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12) {\n    return IslamicCal.monthLengths[month - 1];\n  } else {\n    return this.isLeapYear(year) ? 30 : 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Islamic calendar.\n * The year parameter may be given as a number, or as a IslamicDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nIslamicCal.prototype.isLeapYear = function (year) {\n  return MathUtils.mod(14 + 11 * year, 30) < 11;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nIslamicCal.prototype.getType = function () {\n  return this.type;\n};\n/*register this calendar for the factory method */\n\n\nCalendar._constructors[\"islamic\"] = IslamicCal;\nmodule.exports = IslamicCal;"]},"metadata":{},"sourceType":"module"}