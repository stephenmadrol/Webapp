{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initCaseMappers = initCaseMappers;\nexports.toUpperCase = exports.toLowerCase = void 0;\n\nvar _CaseMapper = _interopRequireDefault(require(\"../ilib/lib/CaseMapper\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar toLowerCaseMapper, toUpperCaseMapper;\n/**\n * Set CaseMapper object references to ilib's current locale (its most recently set, by default)\n *\n * @returns {undefined}\n */\n\nfunction initCaseMappers() {\n  toLowerCaseMapper = new _CaseMapper[\"default\"]({\n    direction: 'tolower'\n  });\n  toUpperCaseMapper = new _CaseMapper[\"default\"]({\n    direction: 'toupper'\n  });\n}\n/**\n * Locale-safely convert a string to lower case.\n *\n * @function\n * @param {String} inString String to convert to lower case\n * @returns {String} Lower-cased string\n */\n\n\nvar toLowerCase = function toLowerCase(inString) {\n  if (inString != null) {\n    return toLowerCaseMapper.map(inString.toString());\n  }\n\n  return inString;\n};\n/**\n * Locale-safely convert a string to upper case.\n *\n * @function\n * @param {String} inString String to convert to upper case\n * @returns {String} Upper-cased string\n */\n\n\nexports.toLowerCase = toLowerCase;\n\nvar toUpperCase = function toUpperCase(inString) {\n  if (inString != null) {\n    return toUpperCaseMapper.map(inString.toString());\n  }\n\n  return inString;\n};\n\nexports.toUpperCase = toUpperCase;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\i18n\\src\\case.js"],"names":["Object","defineProperty","exports","value","initCaseMappers","toUpperCase","toLowerCase","_CaseMapper","_interopRequireDefault","require","obj","__esModule","toLowerCaseMapper","toUpperCaseMapper","direction","inString","map","toString"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,WAAR,GAAsB,KAAK,CAAjD;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIE,iBAAJ,EAAuBC,iBAAvB;AACA;;;;;;AAMA,SAAST,eAAT,GAA2B;AACzBQ,EAAAA,iBAAiB,GAAG,IAAIL,WAAW,CAAC,SAAD,CAAf,CAA2B;AAC7CO,IAAAA,SAAS,EAAE;AADkC,GAA3B,CAApB;AAGAD,EAAAA,iBAAiB,GAAG,IAAIN,WAAW,CAAC,SAAD,CAAf,CAA2B;AAC7CO,IAAAA,SAAS,EAAE;AADkC,GAA3B,CAApB;AAGD;AACD;;;;;;;;;AASA,IAAIR,WAAW,GAAG,SAASA,WAAT,CAAqBS,QAArB,EAA+B;AAC/C,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAOH,iBAAiB,CAACI,GAAlB,CAAsBD,QAAQ,CAACE,QAAT,EAAtB,CAAP;AACD;;AAED,SAAOF,QAAP;AACD,CAND;AAOA;;;;;;;;;AASAb,OAAO,CAACI,WAAR,GAAsBA,WAAtB;;AAEA,IAAID,WAAW,GAAG,SAASA,WAAT,CAAqBU,QAArB,EAA+B;AAC/C,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAOF,iBAAiB,CAACG,GAAlB,CAAsBD,QAAQ,CAACE,QAAT,EAAtB,CAAP;AACD;;AAED,SAAOF,QAAP;AACD,CAND;;AAQAb,OAAO,CAACG,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initCaseMappers = initCaseMappers;\nexports.toUpperCase = exports.toLowerCase = void 0;\n\nvar _CaseMapper = _interopRequireDefault(require(\"../ilib/lib/CaseMapper\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar toLowerCaseMapper, toUpperCaseMapper;\n/**\n * Set CaseMapper object references to ilib's current locale (its most recently set, by default)\n *\n * @returns {undefined}\n */\n\nfunction initCaseMappers() {\n  toLowerCaseMapper = new _CaseMapper[\"default\"]({\n    direction: 'tolower'\n  });\n  toUpperCaseMapper = new _CaseMapper[\"default\"]({\n    direction: 'toupper'\n  });\n}\n/**\n * Locale-safely convert a string to lower case.\n *\n * @function\n * @param {String} inString String to convert to lower case\n * @returns {String} Lower-cased string\n */\n\n\nvar toLowerCase = function toLowerCase(inString) {\n  if (inString != null) {\n    return toLowerCaseMapper.map(inString.toString());\n  }\n\n  return inString;\n};\n/**\n * Locale-safely convert a string to upper case.\n *\n * @function\n * @param {String} inString String to convert to upper case\n * @returns {String} Upper-cased string\n */\n\n\nexports.toLowerCase = toLowerCase;\n\nvar toUpperCase = function toUpperCase(inString) {\n  if (inString != null) {\n    return toUpperCaseMapper.map(inString.toString());\n  }\n\n  return inString;\n};\n\nexports.toUpperCase = toUpperCase;"]},"metadata":{},"sourceType":"module"}