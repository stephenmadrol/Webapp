{"ast":null,"code":"\"use strict\";\n/*\n * persratadie.js - Represent a rata die date in the Persian calendar\n *\n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nMathUtils.js\nRataDie.js\nAstro.js\nGregorianDate.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Astro = require(\"./Astro.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\n\n\nvar PersRataDie = function PersRataDie(params) {\n  this.rd = NaN;\n  Astro.initAstro(params && typeof params.sync === 'boolean' ? params.sync : true, params && params.loadParams, ilib.bind(this, function (x) {\n    RataDie.call(this, params);\n\n    if (params && typeof params.callback === 'function') {\n      params.callback(this);\n    }\n  }));\n};\n\nPersRataDie.prototype = new RataDie();\nPersRataDie.prototype.parent = RataDie;\nPersRataDie.prototype.constructor = PersRataDie;\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @type number\n */\n\nPersRataDie.prototype.epoch = 1948319.5;\n/**\n * @protected\n */\n\nPersRataDie.prototype._tehranEquinox = function (year) {\n  var equJED, equJD, equAPP, equTehran, dtTehran, eot; //  March equinox in dynamical time\n\n  equJED = Astro._equinox(year, 0); //  Correct for delta T to obtain Universal time\n\n  equJD = equJED - Astro._deltat(year) / (24 * 60 * 60); //  Apply the equation of time to yield the apparent time at Greenwich\n\n  eot = Astro._equationOfTime(equJED) * 360;\n  eot = (eot - 20 * Math.floor(eot / 20)) / 360;\n  equAPP = equJD + eot;\n  /*\n   * Finally, we must correct for the constant difference between\n   * the Greenwich meridian and the time zone standard for Iran\n   * Standard time, 52 degrees 30 minutes to the East.\n   */\n\n  dtTehran = 52.5 / 360;\n  equTehran = equAPP + dtTehran;\n  return equTehran;\n};\n/**\n * Calculate the year based on the given Julian day.\n * @protected\n * @param {number} jd the Julian day to get the year for\n * @return {{year:number,equinox:number}} the year and the last equinox\n */\n\n\nPersRataDie.prototype._getYear = function (jd) {\n  var gd = new GregorianDate({\n    julianday: jd\n  });\n  var guess = gd.getYears() - 2,\n      nexteq,\n      ret = {}; //ret.equinox = Math.floor(this._tehranEquinox(guess));\n\n  ret.equinox = this._tehranEquinox(guess);\n\n  while (ret.equinox > jd) {\n    guess--; // ret.equinox = Math.floor(this._tehranEquinox(guess));\n\n    ret.equinox = this._tehranEquinox(guess);\n  }\n\n  nexteq = ret.equinox - 1; // if the equinox falls after noon, then the day after that is the start of the\n  // next year, so truncate the JD to get the noon of the day before the day with\n  //the equinox on it, then add 0.5 to get the midnight of that day\n\n  while (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {\n    ret.equinox = nexteq;\n    guess++; // nexteq = Math.floor(this._tehranEquinox(guess));\n\n    nexteq = this._tehranEquinox(guess);\n  } // Mean solar tropical year is 365.24219878 days\n\n\n  ret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;\n  return ret;\n};\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\n\nPersRataDie.prototype._setDateComponents = function (date) {\n  var adr, guess, jd; // Mean solar tropical year is 365.24219878 days\n\n  guess = this.epoch + 1 + 365.24219878 * ((date.year || 0) - 2);\n  adr = {\n    year: (date.year || 0) - 1,\n    equinox: 0\n  };\n\n  while (adr.year < date.year) {\n    adr = this._getYear(guess);\n    guess = adr.equinox + (365.24219878 + 2);\n  }\n\n  jd = Math.floor(adr.equinox) + ((date.month || 0) <= 7 ? ((date.month || 1) - 1) * 31 : ((date.month || 1) - 1) * 30 + 6) + ((date.day || 1) - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight\n\n  jd += ((date.hour || 0) * 3600000 + (date.minute || 0) * 60000 + (date.second || 0) * 1000 + (date.millisecond || 0)) / 86400000;\n  this.rd = jd - this.epoch;\n};\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nPersRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersRataDie;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/PersRataDie.js"],"names":["ilib","require","MathUtils","Astro","RataDie","GregorianDate","PersRataDie","params","rd","NaN","initAstro","sync","loadParams","bind","x","call","callback","prototype","parent","constructor","epoch","_tehranEquinox","year","equJED","equJD","equAPP","equTehran","dtTehran","eot","_equinox","_deltat","_equationOfTime","Math","floor","_getYear","jd","gd","julianday","guess","getYears","nexteq","ret","equinox","round","_setDateComponents","date","adr","month","day","hour","minute","second","millisecond","_onOrBefore","dayOfWeek","mod","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * persratadie.js - Represent a rata die date in the Persian calendar\n *\n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nMathUtils.js\nRataDie.js\nAstro.js\nGregorianDate.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Astro = require(\"./Astro.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above are present, then the RD is calculate based on\n * the current date at the time of instantiation. <p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\n\n\nvar PersRataDie = function PersRataDie(params) {\n  this.rd = NaN;\n  Astro.initAstro(params && typeof params.sync === 'boolean' ? params.sync : true, params && params.loadParams, ilib.bind(this, function (x) {\n    RataDie.call(this, params);\n\n    if (params && typeof params.callback === 'function') {\n      params.callback(this);\n    }\n  }));\n};\n\nPersRataDie.prototype = new RataDie();\nPersRataDie.prototype.parent = RataDie;\nPersRataDie.prototype.constructor = PersRataDie;\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @type number\n */\n\nPersRataDie.prototype.epoch = 1948319.5;\n/**\n * @protected\n */\n\nPersRataDie.prototype._tehranEquinox = function (year) {\n  var equJED, equJD, equAPP, equTehran, dtTehran, eot; //  March equinox in dynamical time\n\n  equJED = Astro._equinox(year, 0); //  Correct for delta T to obtain Universal time\n\n  equJD = equJED - Astro._deltat(year) / (24 * 60 * 60); //  Apply the equation of time to yield the apparent time at Greenwich\n\n  eot = Astro._equationOfTime(equJED) * 360;\n  eot = (eot - 20 * Math.floor(eot / 20)) / 360;\n  equAPP = equJD + eot;\n  /*\n   * Finally, we must correct for the constant difference between\n   * the Greenwich meridian and the time zone standard for Iran\n   * Standard time, 52 degrees 30 minutes to the East.\n   */\n\n  dtTehran = 52.5 / 360;\n  equTehran = equAPP + dtTehran;\n  return equTehran;\n};\n/**\n * Calculate the year based on the given Julian day.\n * @protected\n * @param {number} jd the Julian day to get the year for\n * @return {{year:number,equinox:number}} the year and the last equinox\n */\n\n\nPersRataDie.prototype._getYear = function (jd) {\n  var gd = new GregorianDate({\n    julianday: jd\n  });\n  var guess = gd.getYears() - 2,\n      nexteq,\n      ret = {}; //ret.equinox = Math.floor(this._tehranEquinox(guess));\n\n  ret.equinox = this._tehranEquinox(guess);\n\n  while (ret.equinox > jd) {\n    guess--; // ret.equinox = Math.floor(this._tehranEquinox(guess));\n\n    ret.equinox = this._tehranEquinox(guess);\n  }\n\n  nexteq = ret.equinox - 1; // if the equinox falls after noon, then the day after that is the start of the\n  // next year, so truncate the JD to get the noon of the day before the day with\n  //the equinox on it, then add 0.5 to get the midnight of that day\n\n  while (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {\n    ret.equinox = nexteq;\n    guess++; // nexteq = Math.floor(this._tehranEquinox(guess));\n\n    nexteq = this._tehranEquinox(guess);\n  } // Mean solar tropical year is 365.24219878 days\n\n\n  ret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;\n  return ret;\n};\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\n\nPersRataDie.prototype._setDateComponents = function (date) {\n  var adr, guess, jd; // Mean solar tropical year is 365.24219878 days\n\n  guess = this.epoch + 1 + 365.24219878 * ((date.year || 0) - 2);\n  adr = {\n    year: (date.year || 0) - 1,\n    equinox: 0\n  };\n\n  while (adr.year < date.year) {\n    adr = this._getYear(guess);\n    guess = adr.equinox + (365.24219878 + 2);\n  }\n\n  jd = Math.floor(adr.equinox) + ((date.month || 0) <= 7 ? ((date.month || 1) - 1) * 31 : ((date.month || 1) - 1) * 30 + 6) + ((date.day || 1) - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight\n\n  jd += ((date.hour || 0) * 3600000 + (date.minute || 0) * 60000 + (date.second || 0) * 1000 + (date.millisecond || 0)) / 86400000;\n  this.rd = jd - this.epoch;\n};\n/**\n * Return the rd number of the particular day of the week on or before the\n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative\n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nPersRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersRataDie;"]},"metadata":{},"sourceType":"module"}