{"ast":null,"code":"\"use strict\";\n/*\n * Calendar.js - Represent a calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * Superclass for all calendar subclasses that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link CalendarFactory} function to manufacture a new\n * instance of a subclass of Calendar. \n * \n * @private\n * @constructor\n */\n\nvar Calendar = function Calendar() {};\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your calendar after it's defined: \n * Calendar._constructors[\"mytype\"] = Calendar.MyTypeConstructor;\n */\n\n\nCalendar._constructors = {};\nCalendar.prototype = {\n  /**\n   * Return the type of this calendar.\n   * \n   * @return {string} the name of the type of this calendar \n   */\n  getType: function getType() {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return the number of months in the given year. The number of months in a year varies\n   * for some luni-solar calendars because in some years, an extra month is needed to extend the \n   * days in a year to an entire solar year. The month is represented as a 1-based number\n   * where 1=first month, 2=second month, etc.\n   * \n   * @param {number} year a year for which the number of months is sought\n   * @return {number} The number of months in the given year\n   */\n  getNumMonths: function getNumMonths(year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return the number of days in a particular month in a particular year. This function\n   * can return a different number for a month depending on the year because of things\n   * like leap years.\n   * \n   * @param {number} month the month for which the length is sought\n   * @param {number} year the year within which that month can be found\n   * @return {number} the number of days within the given month in the given year\n   */\n  getMonLength: function getMonLength(month, year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return true if the given year is a leap year in this calendar.\n   * The year parameter may be given as a number.\n   * \n   * @param {number} year the year for which the leap year information is being sought\n   * @return {boolean} true if the given year is a leap year\n   */\n  isLeapYear: function isLeapYear(year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  }\n};\nmodule.exports = Calendar;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/Calendar.js"],"names":["Calendar","_constructors","prototype","getType","getNumMonths","year","getMonLength","month","isLeapYear","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;AAUA,IAAIA,QAAQ,GAAG,SAASA,QAAT,GAAoB,CAAE,CAArC;AACA;;;;;;AAMAA,QAAQ,CAACC,aAAT,GAAyB,EAAzB;AACAD,QAAQ,CAACE,SAAT,GAAqB;AACnB;;;;;AAKAC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,UAAM,gDAAN;AACD,GARkB;;AAUnB;;;;;;;;;AASAC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACxC,UAAM,gDAAN;AACD,GArBkB;;AAuBnB;;;;;;;;;AASAC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,KAAtB,EAA6BF,IAA7B,EAAmC;AAC/C,UAAM,gDAAN;AACD,GAlCkB;;AAoCnB;;;;;;;AAOAG,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBH,IAApB,EAA0B;AACpC,UAAM,gDAAN;AACD;AA7CkB,CAArB;AA+CAI,MAAM,CAACC,OAAP,GAAiBV,QAAjB","sourcesContent":["\"use strict\";\n\n/*\n * Calendar.js - Represent a calendar object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * Superclass for all calendar subclasses that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link CalendarFactory} function to manufacture a new\n * instance of a subclass of Calendar. \n * \n * @private\n * @constructor\n */\nvar Calendar = function Calendar() {};\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your calendar after it's defined: \n * Calendar._constructors[\"mytype\"] = Calendar.MyTypeConstructor;\n */\n\n\nCalendar._constructors = {};\nCalendar.prototype = {\n  /**\n   * Return the type of this calendar.\n   * \n   * @return {string} the name of the type of this calendar \n   */\n  getType: function getType() {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return the number of months in the given year. The number of months in a year varies\n   * for some luni-solar calendars because in some years, an extra month is needed to extend the \n   * days in a year to an entire solar year. The month is represented as a 1-based number\n   * where 1=first month, 2=second month, etc.\n   * \n   * @param {number} year a year for which the number of months is sought\n   * @return {number} The number of months in the given year\n   */\n  getNumMonths: function getNumMonths(year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return the number of days in a particular month in a particular year. This function\n   * can return a different number for a month depending on the year because of things\n   * like leap years.\n   * \n   * @param {number} month the month for which the length is sought\n   * @param {number} year the year within which that month can be found\n   * @return {number} the number of days within the given month in the given year\n   */\n  getMonLength: function getMonLength(month, year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  },\n\n  /**\n   * Return true if the given year is a leap year in this calendar.\n   * The year parameter may be given as a number.\n   * \n   * @param {number} year the year for which the leap year information is being sought\n   * @return {boolean} true if the given year is a leap year\n   */\n  isLeapYear: function isLeapYear(year) {\n    throw \"Cannot call methods of abstract class Calendar\";\n  }\n};\nmodule.exports = Calendar;"]},"metadata":{},"sourceType":"module"}