{"ast":null,"code":"\"use strict\";\n/*\n * CopticRataDie.js - Represent an RD date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nCopticCal.js \nJSUtils.js\nEthiopicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar CopticCal = require(\"./CopticCal.js\");\n\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\n/**\n * @class\n * Construct a new Coptic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * \n * <li><i>day</i> - 1 to 30\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Coptic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends EthiopicRataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date\n */\n\n\nvar CopticRataDie = function CopticRataDie(params) {\n  this.cal = params && params.cal || new CopticCal();\n  this.rd = NaN;\n  /**\n   * The difference between the zero Julian day and the first Coptic date\n   * of Friday, August 29, 284 CE Julian at 7:00am UTC. \n   * @private\n   * @type number\n   */\n\n  this.epoch = 1825028.5;\n  var tmp = {};\n\n  if (params) {\n    JSUtils.shallowCopy(params, tmp);\n  }\n\n  tmp.cal = this.cal; // override the cal parameter that may be passed in\n\n  EthiopicRataDie.call(this, tmp);\n};\n\nCopticRataDie.prototype = new EthiopicRataDie();\nCopticRataDie.prototype.parent = EthiopicRataDie;\nCopticRataDie.prototype.constructor = CopticRataDie;\nmodule.exports = CopticRataDie;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/CopticRataDie.js"],"names":["ilib","require","JSUtils","CopticCal","EthiopicRataDie","CopticRataDie","params","cal","rd","NaN","epoch","tmp","shallowCopy","call","prototype","parent","constructor","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIG,eAAe,GAAGH,OAAO,CAAC,sBAAD,CAA7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAII,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACjD,OAAKC,GAAL,GAAWD,MAAM,IAAIA,MAAM,CAACC,GAAjB,IAAwB,IAAIJ,SAAJ,EAAnC;AACA,OAAKK,EAAL,GAAUC,GAAV;AACA;;;;;;;AAOA,OAAKC,KAAL,GAAa,SAAb;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,MAAIL,MAAJ,EAAY;AACVJ,IAAAA,OAAO,CAACU,WAAR,CAAoBN,MAApB,EAA4BK,GAA5B;AACD;;AAEDA,EAAAA,GAAG,CAACJ,GAAJ,GAAU,KAAKA,GAAf,CAjBiD,CAiB7B;;AAEpBH,EAAAA,eAAe,CAACS,IAAhB,CAAqB,IAArB,EAA2BF,GAA3B;AACD,CApBD;;AAsBAN,aAAa,CAACS,SAAd,GAA0B,IAAIV,eAAJ,EAA1B;AACAC,aAAa,CAACS,SAAd,CAAwBC,MAAxB,GAAiCX,eAAjC;AACAC,aAAa,CAACS,SAAd,CAAwBE,WAAxB,GAAsCX,aAAtC;AACAY,MAAM,CAACC,OAAP,GAAiBb,aAAjB","sourcesContent":["\"use strict\";\n\n/*\n * CopticRataDie.js - Represent an RD date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nCopticCal.js \nJSUtils.js\nEthiopicRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar CopticCal = require(\"./CopticCal.js\");\n\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\n/**\n * @class\n * Construct a new Coptic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * \n * <li><i>day</i> - 1 to 30\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Coptic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends EthiopicRataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date\n */\n\n\nvar CopticRataDie = function CopticRataDie(params) {\n  this.cal = params && params.cal || new CopticCal();\n  this.rd = NaN;\n  /**\n   * The difference between the zero Julian day and the first Coptic date\n   * of Friday, August 29, 284 CE Julian at 7:00am UTC. \n   * @private\n   * @type number\n   */\n\n  this.epoch = 1825028.5;\n  var tmp = {};\n\n  if (params) {\n    JSUtils.shallowCopy(params, tmp);\n  }\n\n  tmp.cal = this.cal; // override the cal parameter that may be passed in\n\n  EthiopicRataDie.call(this, tmp);\n};\n\nCopticRataDie.prototype = new EthiopicRataDie();\nCopticRataDie.prototype.parent = EthiopicRataDie;\nCopticRataDie.prototype.constructor = CopticRataDie;\nmodule.exports = CopticRataDie;"]},"metadata":{},"sourceType":"module"}