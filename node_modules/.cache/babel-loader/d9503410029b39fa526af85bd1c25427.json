{"ast":null,"code":"\"use strict\";\n/*\n * PersianDate.js - Represent a date in the Persian astronomical (Hijjri) calendar\n *\n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nLocale.js\nTimeZone.js\nIDate.js\nPersRataDie.js\nPersianCal.js\nSearchUtils.js\nMathUtils.js\nJSUtils.js\nLocaleInfo.js\nAstro.js\n*/\n// !data astro\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar Astro = require(\"./Astro.js\");\n\nvar PersianCal = require(\"./PersianCal.js\");\n\nvar PersRataDie = require(\"./PersRataDie.js\");\n/**\n * @class\n *\n * Construct a new Persian astronomical date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string\n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this persian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\n\n\nvar PersianDate = function PersianDate(params) {\n  this.cal = new PersianCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nPersianDate.prototype = new IDate({\n  noinstance: true\n});\nPersianDate.prototype.parent = IDate;\nPersianDate.prototype.constructor = PersianDate;\n/**\n * @private\n * Initialize this date object\n */\n\nPersianDate.prototype._init = function (params) {\n  Astro.initAstro(typeof params.sync === 'boolean' ? params.sync : true, params.loadParams, ilib.bind(this, function (x) {\n    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n      /**\n       * Year in the Persian calendar.\n       * @type number\n       */\n      this.year = parseInt(params.year, 10) || 0;\n      /**\n       * The month number, ranging from 1 to 12\n       * @type number\n       */\n\n      this.month = parseInt(params.month, 10) || 1;\n      /**\n       * The day of the month. This ranges from 1 to 31.\n       * @type number\n       */\n\n      this.day = parseInt(params.day, 10) || 1;\n      /**\n       * The hour of the day. This can be a number from 0 to 23, as times are\n       * stored unambiguously in the 24-hour clock.\n       * @type number\n       */\n\n      this.hour = parseInt(params.hour, 10) || 0;\n      /**\n       * The minute of the hours. Ranges from 0 to 59.\n       * @type number\n       */\n\n      this.minute = parseInt(params.minute, 10) || 0;\n      /**\n       * The second of the minute. Ranges from 0 to 59.\n       * @type number\n       */\n\n      this.second = parseInt(params.second, 10) || 0;\n      /**\n       * The millisecond of the second. Ranges from 0 to 999.\n       * @type number\n       */\n\n      this.millisecond = parseInt(params.millisecond, 10) || 0;\n      /**\n       * The day of the year. Ranges from 1 to 366.\n       * @type number\n       */\n\n      this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n      if (typeof params.dst === 'boolean') {\n        this.dst = params.dst;\n      }\n\n      this.newRd(JSUtils.merge(params, {\n        callback: ilib.bind(this, function (rd) {\n          this.rd = rd;\n          new TimeZone({\n            id: this.timezone,\n            sync: params.sync,\n            loadParams: params.loadParams,\n            onLoad: ilib.bind(this, function (tz) {\n              this.tz = tz; // add the time zone offset to the rd to convert to UTC\n              // getOffsetMillis requires that this.year, this.rd, and this.dst\n              // are set in order to figure out which time zone rules apply and\n              // what the offset is at that point in the year\n\n              this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n              if (this.offset !== 0) {\n                this.rd = this.newRd({\n                  rd: this.rd.getRataDie() - this.offset\n                });\n              }\n\n              this._init2(params);\n            })\n          });\n        })\n      }));\n    } else {\n      this._init2(params);\n    }\n  }));\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nPersianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.newRd(JSUtils.merge(params, {\n      callback: ilib.bind(this, function (rd) {\n        this.rd = rd;\n\n        this._calcDateComponents();\n\n        if (typeof params.onLoad === \"function\") {\n          params.onLoad(this);\n        }\n      })\n    }));\n  } else {\n    if (typeof params.onLoad === \"function\") {\n      params.onLoad(this);\n    }\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year\n */\n\n\nPersianDate.cumMonthLengths = [0, // Farvardin\n31, // Ordibehesht\n62, // Khordad\n93, // Tir\n124, // Mordad\n155, // Shahrivar\n186, // Mehr\n216, // Aban\n246, // Azar\n276, // Dey\n306, // Bahman\n336, // Esfand\n366];\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nPersianDate.prototype.newRd = function (params) {\n  return new PersRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\n\n\nPersianDate.prototype._calcYear = function (rd) {\n  var julianday = rd + this.rd.epoch;\n  return this.rd._getYear(julianday).year;\n};\n/**\n * @private\n * Calculate date components for the given RD date.\n */\n\n\nPersianDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    // now offset the RD by the time zone, then recalculate in case we were\n    // near the year boundary\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"PersDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"PersDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"PersDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(Math.floor(remainder), PersianDate.cumMonthLengths);\n  remainder -= PersianDate.cumMonthLengths[this.month - 1]; //console.log(\"PersDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"PersDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nPersianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.getRataDie());\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nPersianDate.prototype.getDayOfYear = function () {\n  return PersianDate.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Persian\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno\n * persico or AP).\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar,\n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\n\n\nPersianDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nPersianDate.prototype.getCalendar = function () {\n  return \"persian\";\n}; // register with the factory method\n\n\nIDate._constructors[\"persian\"] = PersianDate;\nmodule.exports = PersianDate;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/PersianDate.js"],"names":["ilib","require","SearchUtils","MathUtils","JSUtils","Locale","LocaleInfo","TimeZone","IDate","Calendar","Astro","PersianCal","PersRataDie","PersianDate","params","cal","timezone","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","prototype","noinstance","parent","constructor","initAstro","x","year","month","day","hour","minute","second","millisecond","parseInt","dayOfYear","dst","newRd","merge","callback","rd","id","tz","offset","_getOffsetMillisWallTime","getRataDie","_init2","_calcDateComponents","cumMonthLengths","_calcYear","julianday","epoch","_getYear","remainder","getOffsetMillis","yearStart","bsearch","Math","floor","round","getDayOfWeek","mod","getDayOfYear","getEra","getCalendar","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAaA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIK,UAAU,GAAGL,OAAO,CAAC,iBAAD,CAAxB;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIO,KAAK,GAAGP,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIS,KAAK,GAAGT,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAIU,UAAU,GAAGV,OAAO,CAAC,iBAAD,CAAxB;;AAEA,IAAIW,WAAW,GAAGX,OAAO,CAAC,kBAAD,CAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,IAAIY,WAAW,GAAG,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AAC7C,OAAKC,GAAL,GAAW,IAAIJ,UAAJ,EAAX;AACAG,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AAEA,MAAIA,MAAM,CAACE,QAAX,EAAqB;AACnB,SAAKA,QAAL,GAAgBF,MAAM,CAACE,QAAvB;AACD;;AAED,MAAIF,MAAM,CAACG,MAAX,EAAmB;AACjB,SAAKA,MAAL,GAAc,OAAOH,MAAM,CAACG,MAAd,KAAyB,QAAzB,GAAoC,IAAIZ,MAAJ,CAAWS,MAAM,CAACG,MAAlB,CAApC,GAAgEH,MAAM,CAACG,MAArF;AACD;;AAED,MAAI,CAAC,KAAKD,QAAV,EAAoB;AAClB,QAAI,KAAKC,MAAT,EAAiB;AACf,UAAIX,UAAJ,CAAe,KAAKW,MAApB,EAA4B;AAC1BC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IADa;AAE1BC,QAAAA,UAAU,EAAEL,MAAM,CAACK,UAFO;AAG1BC,QAAAA,MAAM,EAAEpB,IAAI,CAACqB,IAAL,CAAU,IAAV,EAAgB,UAAUC,EAAV,EAAc;AACpC,eAAKA,EAAL,GAAUA,EAAV;AACA,eAAKN,QAAL,GAAgBM,EAAE,CAACC,WAAH,EAAhB;;AAEA,eAAKC,KAAL,CAAWV,MAAX;AACD,SALO;AAHkB,OAA5B;AAUD,KAXD,MAWO;AACL,WAAKE,QAAL,GAAgB,OAAhB;;AAEA,WAAKQ,KAAL,CAAWV,MAAX;AACD;AACF,GAjBD,MAiBO;AACL,SAAKU,KAAL,CAAWV,MAAX;AACD;AACF,CAhCD;;AAkCAD,WAAW,CAACY,SAAZ,GAAwB,IAAIjB,KAAJ,CAAU;AAChCkB,EAAAA,UAAU,EAAE;AADoB,CAAV,CAAxB;AAGAb,WAAW,CAACY,SAAZ,CAAsBE,MAAtB,GAA+BnB,KAA/B;AACAK,WAAW,CAACY,SAAZ,CAAsBG,WAAtB,GAAoCf,WAApC;AACA;;;;;AAKAA,WAAW,CAACY,SAAZ,CAAsBD,KAAtB,GAA8B,UAAUV,MAAV,EAAkB;AAC9CJ,EAAAA,KAAK,CAACmB,SAAN,CAAgB,OAAOf,MAAM,CAACI,IAAd,KAAuB,SAAvB,GAAmCJ,MAAM,CAACI,IAA1C,GAAiD,IAAjE,EAAuEJ,MAAM,CAACK,UAA9E,EAA0FnB,IAAI,CAACqB,IAAL,CAAU,IAAV,EAAgB,UAAUS,CAAV,EAAa;AACrH,QAAIhB,MAAM,CAACiB,IAAP,IAAejB,MAAM,CAACkB,KAAtB,IAA+BlB,MAAM,CAACmB,GAAtC,IAA6CnB,MAAM,CAACoB,IAApD,IAA4DpB,MAAM,CAACqB,MAAnE,IAA6ErB,MAAM,CAACsB,MAApF,IAA8FtB,MAAM,CAACuB,WAAzG,EAAsH;AACpH;;;;AAIA,WAAKN,IAAL,GAAYO,QAAQ,CAACxB,MAAM,CAACiB,IAAR,EAAc,EAAd,CAAR,IAA6B,CAAzC;AACA;;;;;AAKA,WAAKC,KAAL,GAAaM,QAAQ,CAACxB,MAAM,CAACkB,KAAR,EAAe,EAAf,CAAR,IAA8B,CAA3C;AACA;;;;;AAKA,WAAKC,GAAL,GAAWK,QAAQ,CAACxB,MAAM,CAACmB,GAAR,EAAa,EAAb,CAAR,IAA4B,CAAvC;AACA;;;;;;AAMA,WAAKC,IAAL,GAAYI,QAAQ,CAACxB,MAAM,CAACoB,IAAR,EAAc,EAAd,CAAR,IAA6B,CAAzC;AACA;;;;;AAKA,WAAKC,MAAL,GAAcG,QAAQ,CAACxB,MAAM,CAACqB,MAAR,EAAgB,EAAhB,CAAR,IAA+B,CAA7C;AACA;;;;;AAKA,WAAKC,MAAL,GAAcE,QAAQ,CAACxB,MAAM,CAACsB,MAAR,EAAgB,EAAhB,CAAR,IAA+B,CAA7C;AACA;;;;;AAKA,WAAKC,WAAL,GAAmBC,QAAQ,CAACxB,MAAM,CAACuB,WAAR,EAAqB,EAArB,CAAR,IAAoC,CAAvD;AACA;;;;;AAKA,WAAKE,SAAL,GAAiBD,QAAQ,CAACxB,MAAM,CAACyB,SAAR,EAAmB,EAAnB,CAAzB;;AAEA,UAAI,OAAOzB,MAAM,CAAC0B,GAAd,KAAsB,SAA1B,EAAqC;AACnC,aAAKA,GAAL,GAAW1B,MAAM,CAAC0B,GAAlB;AACD;;AAED,WAAKC,KAAL,CAAWrC,OAAO,CAACsC,KAAR,CAAc5B,MAAd,EAAsB;AAC/B6B,QAAAA,QAAQ,EAAE3C,IAAI,CAACqB,IAAL,CAAU,IAAV,EAAgB,UAAUuB,EAAV,EAAc;AACtC,eAAKA,EAAL,GAAUA,EAAV;AACA,cAAIrC,QAAJ,CAAa;AACXsC,YAAAA,EAAE,EAAE,KAAK7B,QADE;AAEXE,YAAAA,IAAI,EAAEJ,MAAM,CAACI,IAFF;AAGXC,YAAAA,UAAU,EAAEL,MAAM,CAACK,UAHR;AAIXC,YAAAA,MAAM,EAAEpB,IAAI,CAACqB,IAAL,CAAU,IAAV,EAAgB,UAAUyB,EAAV,EAAc;AACpC,mBAAKA,EAAL,GAAUA,EAAV,CADoC,CACtB;AACd;AACA;AACA;;AAEA,mBAAKC,MAAL,GAAc,KAAKD,EAAL,CAAQE,wBAAR,CAAiC,IAAjC,IAAyC,QAAvD;;AAEA,kBAAI,KAAKD,MAAL,KAAgB,CAApB,EAAuB;AACrB,qBAAKH,EAAL,GAAU,KAAKH,KAAL,CAAW;AACnBG,kBAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQK,UAAR,KAAuB,KAAKF;AADb,iBAAX,CAAV;AAGD;;AAED,mBAAKG,MAAL,CAAYpC,MAAZ;AACD,aAfO;AAJG,WAAb;AAqBD,SAvBS;AADqB,OAAtB,CAAX;AA0BD,KAhFD,MAgFO;AACL,WAAKoC,MAAL,CAAYpC,MAAZ;AACD;AACF,GApFyF,CAA1F;AAqFD,CAtFD;AAuFA;;;;;;AAMAD,WAAW,CAACY,SAAZ,CAAsByB,MAAtB,GAA+B,UAAUpC,MAAV,EAAkB;AAC/C,MAAI,CAAC,KAAK8B,EAAV,EAAc;AACZ,SAAKH,KAAL,CAAWrC,OAAO,CAACsC,KAAR,CAAc5B,MAAd,EAAsB;AAC/B6B,MAAAA,QAAQ,EAAE3C,IAAI,CAACqB,IAAL,CAAU,IAAV,EAAgB,UAAUuB,EAAV,EAAc;AACtC,aAAKA,EAAL,GAAUA,EAAV;;AAEA,aAAKO,mBAAL;;AAEA,YAAI,OAAOrC,MAAM,CAACM,MAAd,KAAyB,UAA7B,EAAyC;AACvCN,UAAAA,MAAM,CAACM,MAAP,CAAc,IAAd;AACD;AACF,OARS;AADqB,KAAtB,CAAX;AAWD,GAZD,MAYO;AACL,QAAI,OAAON,MAAM,CAACM,MAAd,KAAyB,UAA7B,EAAyC;AACvCN,MAAAA,MAAM,CAACM,MAAP,CAAc,IAAd;AACD;AACF;AACF,CAlBD;AAmBA;;;;;;;;AAQAP,WAAW,CAACuC,eAAZ,GAA8B,CAAC,CAAD,EAAI;AAClC,EAD8B,EAC1B;AACJ,EAF8B,EAE1B;AACJ,EAH8B,EAG1B;AACJ,GAJ8B,EAIzB;AACL,GAL8B,EAKzB;AACL,GAN8B,EAMzB;AACL,GAP8B,EAOzB;AACL,GAR8B,EAQzB;AACL,GAT8B,EASzB;AACL,GAV8B,EAUzB;AACL,GAX8B,EAWzB;AACL,GAZ8B,CAA9B;AAaA;;;;;;;AAOAvC,WAAW,CAACY,SAAZ,CAAsBgB,KAAtB,GAA8B,UAAU3B,MAAV,EAAkB;AAC9C,SAAO,IAAIF,WAAJ,CAAgBE,MAAhB,CAAP;AACD,CAFD;AAGA;;;;;;;;AAQAD,WAAW,CAACY,SAAZ,CAAsB4B,SAAtB,GAAkC,UAAUT,EAAV,EAAc;AAC9C,MAAIU,SAAS,GAAGV,EAAE,GAAG,KAAKA,EAAL,CAAQW,KAA7B;AACA,SAAO,KAAKX,EAAL,CAAQY,QAAR,CAAiBF,SAAjB,EAA4BvB,IAAnC;AACD,CAHD;AAIA;;;;;;AAMAlB,WAAW,CAACY,SAAZ,CAAsB0B,mBAAtB,GAA4C,YAAY;AACtD,MAAIM,SAAJ;AAAA,MACIb,EAAE,GAAG,KAAKA,EAAL,CAAQK,UAAR,EADT;AAEA,OAAKlB,IAAL,GAAY,KAAKsB,SAAL,CAAeT,EAAf,CAAZ;;AAEA,MAAI,OAAO,KAAKG,MAAZ,KAAuB,WAA3B,EAAwC;AACtC;AACA;AACA,QAAI,CAAC,KAAKD,EAAV,EAAc;AACZ,WAAKA,EAAL,GAAU,IAAIvC,QAAJ,CAAa;AACrBsC,QAAAA,EAAE,EAAE,KAAK7B;AADY,OAAb,CAAV;AAGD;;AAED,SAAK+B,MAAL,GAAc,KAAKD,EAAL,CAAQY,eAAR,CAAwB,IAAxB,IAAgC,QAA9C;AACD;;AAED,MAAI,KAAKX,MAAL,KAAgB,CAApB,EAAuB;AACrBH,IAAAA,EAAE,IAAI,KAAKG,MAAX;AACA,SAAKhB,IAAL,GAAY,KAAKsB,SAAL,CAAeT,EAAf,CAAZ;AACD,GApBqD,CAoBpD;AACF;;;AAGA,MAAIe,SAAS,GAAG,KAAKlB,KAAL,CAAW;AACzBV,IAAAA,IAAI,EAAE,KAAKA,IADc;AAEzBC,IAAAA,KAAK,EAAE,CAFkB;AAGzBC,IAAAA,GAAG,EAAE,CAHoB;AAIzBC,IAAAA,IAAI,EAAE,CAJmB;AAKzBC,IAAAA,MAAM,EAAE,CALiB;AAMzBC,IAAAA,MAAM,EAAE,CANiB;AAOzBC,IAAAA,WAAW,EAAE;AAPY,GAAX,CAAhB;AASAoB,EAAAA,SAAS,GAAGb,EAAE,GAAGe,SAAS,CAACV,UAAV,EAAL,GAA8B,CAA1C;AACA,OAAKV,SAAL,GAAiBkB,SAAjB,CAlCsD,CAkC1B;;AAE5B,OAAKzB,KAAL,GAAa9B,WAAW,CAAC0D,OAAZ,CAAoBC,IAAI,CAACC,KAAL,CAAWL,SAAX,CAApB,EAA2C5C,WAAW,CAACuC,eAAvD,CAAb;AACAK,EAAAA,SAAS,IAAI5C,WAAW,CAACuC,eAAZ,CAA4B,KAAKpB,KAAL,GAAa,CAAzC,CAAb,CArCsD,CAqCI;;AAE1D,OAAKC,GAAL,GAAW4B,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAX;AACAA,EAAAA,SAAS,IAAI,KAAKxB,GAAlB,CAxCsD,CAwC/B;AACvB;;AAEAwB,EAAAA,SAAS,GAAGI,IAAI,CAACE,KAAL,CAAWN,SAAS,GAAG,QAAvB,CAAZ;AACA,OAAKvB,IAAL,GAAY2B,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,OAAvB,CAAZ;AACAA,EAAAA,SAAS,IAAI,KAAKvB,IAAL,GAAY,OAAzB;AACA,OAAKC,MAAL,GAAc0B,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,KAAvB,CAAd;AACAA,EAAAA,SAAS,IAAI,KAAKtB,MAAL,GAAc,KAA3B;AACA,OAAKC,MAAL,GAAcyB,IAAI,CAACC,KAAL,CAAWL,SAAS,GAAG,IAAvB,CAAd;AACAA,EAAAA,SAAS,IAAI,KAAKrB,MAAL,GAAc,IAA3B;AACA,OAAKC,WAAL,GAAmBoB,SAAnB;AACD,CAnDD;AAoDA;;;;;;;;AAQA5C,WAAW,CAACY,SAAZ,CAAsBuC,YAAtB,GAAqC,YAAY;AAC/C,MAAIpB,EAAE,GAAGiB,IAAI,CAACC,KAAL,CAAW,KAAKb,UAAL,EAAX,CAAT;AACA,SAAO9C,SAAS,CAAC8D,GAAV,CAAcrB,EAAE,GAAG,CAAnB,EAAsB,CAAtB,CAAP;AACD,CAHD;AAIA;;;;;;;;AAQA/B,WAAW,CAACY,SAAZ,CAAsByC,YAAtB,GAAqC,YAAY;AAC/C,SAAOrD,WAAW,CAACuC,eAAZ,CAA4B,KAAKpB,KAAL,GAAa,CAAzC,IAA8C,KAAKC,GAA1D;AACD,CAFD;AAGA;;;;;;;;;;;AAWApB,WAAW,CAACY,SAAZ,CAAsB0C,MAAtB,GAA+B,YAAY;AACzC,SAAO,KAAKpC,IAAL,GAAY,CAAZ,GAAgB,CAAC,CAAjB,GAAqB,CAA5B;AACD,CAFD;AAGA;;;;;;;AAOAlB,WAAW,CAACY,SAAZ,CAAsB2C,WAAtB,GAAoC,YAAY;AAC9C,SAAO,SAAP;AACD,CAFD,C,CAEG;;;AAGH5D,KAAK,CAAC6D,aAAN,CAAoB,SAApB,IAAiCxD,WAAjC;AACAyD,MAAM,CAACC,OAAP,GAAiB1D,WAAjB","sourcesContent":["\"use strict\";\n\n/*\n * PersianDate.js - Represent a date in the Persian astronomical (Hijjri) calendar\n *\n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nLocale.js\nTimeZone.js\nIDate.js\nPersRataDie.js\nPersianCal.js\nSearchUtils.js\nMathUtils.js\nJSUtils.js\nLocaleInfo.js\nAstro.js\n*/\n// !data astro\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar Astro = require(\"./Astro.js\");\n\nvar PersianCal = require(\"./PersianCal.js\");\n\nvar PersRataDie = require(\"./PersRataDie.js\");\n/**\n * @class\n *\n * Construct a new Persian astronomical date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string\n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this persian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\n\n\nvar PersianDate = function PersianDate(params) {\n  this.cal = new PersianCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nPersianDate.prototype = new IDate({\n  noinstance: true\n});\nPersianDate.prototype.parent = IDate;\nPersianDate.prototype.constructor = PersianDate;\n/**\n * @private\n * Initialize this date object\n */\n\nPersianDate.prototype._init = function (params) {\n  Astro.initAstro(typeof params.sync === 'boolean' ? params.sync : true, params.loadParams, ilib.bind(this, function (x) {\n    if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n      /**\n       * Year in the Persian calendar.\n       * @type number\n       */\n      this.year = parseInt(params.year, 10) || 0;\n      /**\n       * The month number, ranging from 1 to 12\n       * @type number\n       */\n\n      this.month = parseInt(params.month, 10) || 1;\n      /**\n       * The day of the month. This ranges from 1 to 31.\n       * @type number\n       */\n\n      this.day = parseInt(params.day, 10) || 1;\n      /**\n       * The hour of the day. This can be a number from 0 to 23, as times are\n       * stored unambiguously in the 24-hour clock.\n       * @type number\n       */\n\n      this.hour = parseInt(params.hour, 10) || 0;\n      /**\n       * The minute of the hours. Ranges from 0 to 59.\n       * @type number\n       */\n\n      this.minute = parseInt(params.minute, 10) || 0;\n      /**\n       * The second of the minute. Ranges from 0 to 59.\n       * @type number\n       */\n\n      this.second = parseInt(params.second, 10) || 0;\n      /**\n       * The millisecond of the second. Ranges from 0 to 999.\n       * @type number\n       */\n\n      this.millisecond = parseInt(params.millisecond, 10) || 0;\n      /**\n       * The day of the year. Ranges from 1 to 366.\n       * @type number\n       */\n\n      this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n      if (typeof params.dst === 'boolean') {\n        this.dst = params.dst;\n      }\n\n      this.newRd(JSUtils.merge(params, {\n        callback: ilib.bind(this, function (rd) {\n          this.rd = rd;\n          new TimeZone({\n            id: this.timezone,\n            sync: params.sync,\n            loadParams: params.loadParams,\n            onLoad: ilib.bind(this, function (tz) {\n              this.tz = tz; // add the time zone offset to the rd to convert to UTC\n              // getOffsetMillis requires that this.year, this.rd, and this.dst\n              // are set in order to figure out which time zone rules apply and\n              // what the offset is at that point in the year\n\n              this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n              if (this.offset !== 0) {\n                this.rd = this.newRd({\n                  rd: this.rd.getRataDie() - this.offset\n                });\n              }\n\n              this._init2(params);\n            })\n          });\n        })\n      }));\n    } else {\n      this._init2(params);\n    }\n  }));\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nPersianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.newRd(JSUtils.merge(params, {\n      callback: ilib.bind(this, function (rd) {\n        this.rd = rd;\n\n        this._calcDateComponents();\n\n        if (typeof params.onLoad === \"function\") {\n          params.onLoad(this);\n        }\n      })\n    }));\n  } else {\n    if (typeof params.onLoad === \"function\") {\n      params.onLoad(this);\n    }\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year\n */\n\n\nPersianDate.cumMonthLengths = [0, // Farvardin\n31, // Ordibehesht\n62, // Khordad\n93, // Tir\n124, // Mordad\n155, // Shahrivar\n186, // Mehr\n216, // Aban\n246, // Azar\n276, // Dey\n306, // Bahman\n336, // Esfand\n366];\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nPersianDate.prototype.newRd = function (params) {\n  return new PersRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\n\n\nPersianDate.prototype._calcYear = function (rd) {\n  var julianday = rd + this.rd.epoch;\n  return this.rd._getYear(julianday).year;\n};\n/**\n * @private\n * Calculate date components for the given RD date.\n */\n\n\nPersianDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    // now offset the RD by the time zone, then recalculate in case we were\n    // near the year boundary\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"PersDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"PersDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"PersDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(Math.floor(remainder), PersianDate.cumMonthLengths);\n  remainder -= PersianDate.cumMonthLengths[this.month - 1]; //console.log(\"PersDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"PersDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nPersianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.getRataDie());\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nPersianDate.prototype.getDayOfYear = function () {\n  return PersianDate.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Persian\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno\n * persico or AP).\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar,\n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\n\n\nPersianDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nPersianDate.prototype.getCalendar = function () {\n  return \"persian\";\n}; // register with the factory method\n\n\nIDate._constructors[\"persian\"] = PersianDate;\nmodule.exports = PersianDate;"]},"metadata":{},"sourceType":"module"}