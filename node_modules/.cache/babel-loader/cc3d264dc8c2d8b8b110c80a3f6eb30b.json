{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * CType.js - Character type definitions\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js SearchUtils.js Utils.js IString.js\n// !data ctype\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * Provides a set of static routines that return information about characters.\n * These routines emulate the C-library ctype functions. The characters must be \n * encoded in utf-16, as no other charsets are currently supported. Only the first\n * character of the given string is tested.\n * @namespace\n */\n\n\nvar CType = {};\n/**\n * Actual implementation for withinRange. Searches the given object for ranges.\n * The range names are taken from the Unicode range names in \n * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt\n * \n * <ul>\n * <li>Cn - Unassigned\n * <li>Lu - Uppercase_Letter\n * <li>Ll - Lowercase_Letter\n * <li>Lt - Titlecase_Letter\n * <li>Lm - Modifier_Letter\n * <li>Lo - Other_Letter\n * <li>Mn - Nonspacing_Mark\n * <li>Me - Enclosing_Mark\n * <li>Mc - Spacing_Mark\n * <li>Nd - Decimal_Number\n * <li>Nl - Letter_Number\n * <li>No - Other_Number\n * <li>Zs - Space_Separator\n * <li>Zl - Line_Separator\n * <li>Zp - Paragraph_Separator\n * <li>Cc - Control\n * <li>Cf - Format\n * <li>Co - Private_Use\n * <li>Cs - Surrogate\n * <li>Pd - Dash_Punctuation\n * <li>Ps - Open_Punctuation\n * <li>Pe - Close_Punctuation\n * <li>Pc - Connector_Punctuation\n * <li>Po - Other_Punctuation\n * <li>Sm - Math_Symbol\n * <li>Sc - Currency_Symbol\n * <li>Sk - Modifier_Symbol\n * <li>So - Other_Symbol\n * <li>Pi - Initial_Punctuation\n * <li>Pf - Final_Punctuation\n * </ul>\n * \n * @protected\n * @param {number} num code point of the character to examine\n * @param {string} rangeName the name of the range to check\n * @param {Object} obj object containing the character range data\n * @return {boolean} true if the first character is within the named\n * range\n */\n\nCType._inRange = function (num, rangeName, obj) {\n  var range, i;\n\n  if (num < 0 || !rangeName || !obj) {\n    return false;\n  }\n\n  range = obj[rangeName];\n\n  if (!range) {\n    return false;\n  }\n\n  var compare = function compare(singlerange, target) {\n    if (singlerange.length === 1) {\n      return singlerange[0] - target;\n    } else {\n      return target < singlerange[0] ? singlerange[0] - target : target > singlerange[1] ? singlerange[1] - target : 0;\n    }\n  };\n\n  var result = SearchUtils.bsearch(num, range, compare);\n  return result < range.length && compare(range[result], num) === 0;\n};\n/**\n * Return whether or not the first character is within the named range\n * of Unicode characters. The valid list of range names are taken from \n * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,\n * including those supported in Javascript via UTF-16. Currently, this method \n * supports the following range names:\n * \n * <ul>\n * <li><i>ascii</i> - basic ASCII\n * <li><i>latin</i> - Latin, Latin Extended Additional, Latin-1 supplement, Latin Extended-C, Latin Extended-D, Latin Extended-E\n * <li><i>armenian</i>\n * <li><i>greek</i> - Greek, Greek Extended\n * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B, Cyrillic Extended-C, Cyrillic Supplement\n * <li><i>georgian</i> - Georgian, Georgian Supplement\n * <li><i>glagolitic</i> - Glagolitic, Glagolitic Supplement\n * <li><i>gothic</i>\n * <li><i>ogham</i>\n * <li><i>oldpersian</i>\n * <li><i>runic</i>\n * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement\n * <li><i>phonetic</i>\n * <li><i>modifiertone</i> - Modifier Tone Letters\n * <li><i>spacing</i>\n * <li><i>diacritics</i>\n * <li><i>halfmarks</i> - Combining Half Marks\n * <li><i>small</i> - Small Form Variants\n * <li><i>bamum</i> - Bamum, Bamum Supplement\n * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A\n * <li><i>nko</i>\n * <li><i>osmanya</i>\n * <li><i>tifinagh</i>\n * <li><i>val</i>\n * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, \n * Arabic Presentation Forms-B, Arabic Mathematical Alphabetic Symbols\n * <li><i>carlan</i>\n * <li><i>hebrew</i>\n * <li><i>mandaic</i>\n * <li><i>samaritan</i>\n * <li><i>syriac</i>\n * <li><i>mongolian</i>\n * <li><i>phagspa</i>\n * <li><i>tibetan</i>\n * <li><i>bengali</i>\n * <li><i>devanagari</i> - Devanagari, Devanagari Extended\n * <li><i>gujarati</i>\n * <li><i>gurmukhi</i>\n * <li><i>kannada</i>\n * <li><i>lepcha</i>\n * <li><i>limbu</i>\n * <li><i>malayalam</i>\n * <li><i>meetaimayek</i>\n * <li><i>olchiki</i>\n * <li><i>oriya</i>\n * <li><i>saurashtra</i>\n * <li><i>sinhala</i>\n * <li><i>sylotinagri</i> - Syloti Nagri\n * <li><i>tangut</i>\n * <li><i>tamil</i>\n * <li><i>telugu</i>\n * <li><i>thaana</i>\n * <li><i>vedic</i>\n * <li><i>batak</i>\n * <li><i>balinese</i>\n * <li><i>buginese</i>\n * <li><i>cham</i>\n * <li><i>javanese</i>\n * <li><i>kayahli</i>\n * <li><i>khmer</i>\n * <li><i>lao</i>\n * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A, Myanmar Extended-B\n * <li><i>newtailue</i>\n * <li><i>rejang</i>\n * <li><i>sundanese</i> - Sundanese, Sundanese Supplement\n * <li><i>taile</i>\n * <li><i>taitham</i>\n * <li><i>taiviet</i>\n * <li><i>thai</i>\n * <li><i>buhld</i>\n * <li><i>hanunoo</i>\n * <li><i>tagalog</i>\n * <li><i>tagbanwa</i>\n * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended\n * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs\n *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs \n *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description \n *  Characters (=isIdeo())\n * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility \n * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement\n * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals\n * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, \n * Hangul Jamo Extended-B, Hangul Compatibility Jamo\n * <li><i>cjkpunct</i> - CJK symbols and punctuation\n * <li><i>cjkstrokes</i> - CJK strokes\n * <li><i>hiragana</i>\n * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement\n * <li><i>kanbun</i>\n * <li><i>lisu</i>\n * <li><i>yi</i> - Yi Syllables, Yi Radicals\n * <li><i>cherokee</i>\n * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian \n * Aboriginal Syllabics Extended\n * <li><i>presentation</i> - Alphabetic presentation forms\n * <li><i>vertical</i> - Vertical Forms\n * <li><i>width</i> - Halfwidth and Fullwidth Forms\n * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation\n * <li><i>box</i> - Box Drawing\n * <li><i>block</i> - Block Elements\n * <li><i>letterlike</i> - Letterlike symbols\n * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous \n * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B\n * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement\n * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement\n * <li><i>cjkcompatibility</i> - CJK compatibility\n * <li><i>apl</i> - APL symbols\n * <li><i>controlpictures</i> - Control pictures\n * <li><i>misc</i> - Miscellaneous technical\n * <li><i>ocr</i> - Optical character recognition (OCR)\n * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks \n * for Symbols, Combining Diacritical Marks Supplement, Combining Diacritical Marks Extended\n * <li><i>digits</i> - ASCII digits (=isDigit())\n * <li><i>indicnumber</i> - Common Indic Number Forms\n * <li><i>numbers</i> - Number forms\n * <li><i>supersub</i> - Superscripts and Subscripts\n * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,\n * Supplemental Arrows-B, Supplemental Arrows-C\n * <li><i>operators</i> - Mathematical operators, supplemental \n * mathematical operators \n * <li><i>geometric</i> - Geometric shapes, Geometric shapes extended\n * <li><i>ancient</i> - Ancient symbols\n * <li><i>braille</i> - Braille patterns\n * <li><i>currency</i> - Currency symbols\n * <li><i>dingbats</i>\n * <li><i>gamesymbols</i>\n * <li><i>yijing</i> - Yijing Hexagram Symbols\n * <li><i>specials</i>\n * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement\n * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, \n * Supplementary Private Use Area-B\n * <li><i>supplementarya</i> - Supplementary private use area-A\n * <li><i>supplementaryb</i> - Supplementary private use area-B\n * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates\n * <li><i>lowsurrogates</i>\n * <li><i>reserved</i>\n * <li><i>noncharacters</i>\n * <li><i>copticnumber</i> - coptic epact numbers\n * <li><i>oldpermic</i> - old permic\n * <li><i>albanian</i> - albanian\n * <li><i>lineara</i> - linear a\n * <li><i>meroitic</i> - meroitic cursive\n * <li><i>oldnortharabian</i> - old north arabian\n * <li><i>oldhungarian</i> - Supplementary private use area-A\n * <li><i>sorasompeng</i> - sora sompeng\n * <li><i>warangciti</i> - warang citi\n * <li><i>paucinhau</i> - pau cin hau\n * <li><i>bassavah</i> - bassa vah\n * <li><i>pahawhhmong</i> - pahawh hmong\n * <li><i>shorthandformat</i> - shorthand format controls\n * <li><i>suttonsignwriting</i> - sutton signwriting\n * <li><i>pictographs</i> - miscellaneous symbols and pictographs, supplemental symbols and pictographs\n * <li><i>ornamentaldingbats</i> - ornamental dingbats\n * </ul><p>\n * \n * \n * @protected\n * @param {string|IString|number} ch character or code point to examine\n * @param {string} rangeName the name of the range to check\n * @return {boolean} true if the first character is within the named\n * range\n */\n\n\nCType.withinRange = function (ch, rangeName) {\n  if (!rangeName) {\n    return false;\n  }\n\n  var num;\n\n  switch (_typeof(ch)) {\n    case 'number':\n      num = ch;\n      break;\n\n    case 'string':\n      num = IString.toCodePoint(ch, 0);\n      break;\n\n    case 'undefined':\n      return false;\n\n    default:\n      num = ch._toCodePoint(0);\n      break;\n  }\n\n  return CType._inRange(num, rangeName.toLowerCase(), ilib.data.ctype);\n};\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nCType._init = function (sync, loadParams, onLoad) {\n  CType._load(\"ctype\", sync, loadParams, onLoad);\n};\n/**\n * @protected\n * @param {string} name\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nCType._load = function (name, sync, loadParams, onLoad) {\n  if (!ilib.data[name]) {\n    var loadName = name ? name + \".json\" : \"CType.json\";\n    Utils.loadData({\n      object: \"CType\",\n      name: loadName,\n      locale: \"-\",\n      nonlocale: true,\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (ct) {\n        ilib.data[name] = ct;\n\n        if (onLoad && typeof onLoad === 'function') {\n          onLoad(ilib.data[name]);\n        }\n      })\n    });\n  } else {\n    if (onLoad && typeof onLoad === 'function') {\n      onLoad(ilib.data[name]);\n    }\n  }\n};\n\nmodule.exports = CType;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/ilib/lib/CType.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","SearchUtils","Utils","Locale","IString","CType","_inRange","num","rangeName","range","i","compare","singlerange","target","length","result","bsearch","withinRange","ch","toCodePoint","_toCodePoint","toLowerCase","data","ctype","_init","sync","loadParams","onLoad","_load","name","loadName","loadData","object","locale","nonlocale","callback","bind","ct","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * CType.js - Character type definitions\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js SearchUtils.js Utils.js IString.js\n// !data ctype\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * Provides a set of static routines that return information about characters.\n * These routines emulate the C-library ctype functions. The characters must be \n * encoded in utf-16, as no other charsets are currently supported. Only the first\n * character of the given string is tested.\n * @namespace\n */\n\n\nvar CType = {};\n/**\n * Actual implementation for withinRange. Searches the given object for ranges.\n * The range names are taken from the Unicode range names in \n * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt\n * \n * <ul>\n * <li>Cn - Unassigned\n * <li>Lu - Uppercase_Letter\n * <li>Ll - Lowercase_Letter\n * <li>Lt - Titlecase_Letter\n * <li>Lm - Modifier_Letter\n * <li>Lo - Other_Letter\n * <li>Mn - Nonspacing_Mark\n * <li>Me - Enclosing_Mark\n * <li>Mc - Spacing_Mark\n * <li>Nd - Decimal_Number\n * <li>Nl - Letter_Number\n * <li>No - Other_Number\n * <li>Zs - Space_Separator\n * <li>Zl - Line_Separator\n * <li>Zp - Paragraph_Separator\n * <li>Cc - Control\n * <li>Cf - Format\n * <li>Co - Private_Use\n * <li>Cs - Surrogate\n * <li>Pd - Dash_Punctuation\n * <li>Ps - Open_Punctuation\n * <li>Pe - Close_Punctuation\n * <li>Pc - Connector_Punctuation\n * <li>Po - Other_Punctuation\n * <li>Sm - Math_Symbol\n * <li>Sc - Currency_Symbol\n * <li>Sk - Modifier_Symbol\n * <li>So - Other_Symbol\n * <li>Pi - Initial_Punctuation\n * <li>Pf - Final_Punctuation\n * </ul>\n * \n * @protected\n * @param {number} num code point of the character to examine\n * @param {string} rangeName the name of the range to check\n * @param {Object} obj object containing the character range data\n * @return {boolean} true if the first character is within the named\n * range\n */\n\nCType._inRange = function (num, rangeName, obj) {\n  var range, i;\n\n  if (num < 0 || !rangeName || !obj) {\n    return false;\n  }\n\n  range = obj[rangeName];\n\n  if (!range) {\n    return false;\n  }\n\n  var compare = function compare(singlerange, target) {\n    if (singlerange.length === 1) {\n      return singlerange[0] - target;\n    } else {\n      return target < singlerange[0] ? singlerange[0] - target : target > singlerange[1] ? singlerange[1] - target : 0;\n    }\n  };\n\n  var result = SearchUtils.bsearch(num, range, compare);\n  return result < range.length && compare(range[result], num) === 0;\n};\n/**\n * Return whether or not the first character is within the named range\n * of Unicode characters. The valid list of range names are taken from \n * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,\n * including those supported in Javascript via UTF-16. Currently, this method \n * supports the following range names:\n * \n * <ul>\n * <li><i>ascii</i> - basic ASCII\n * <li><i>latin</i> - Latin, Latin Extended Additional, Latin-1 supplement, Latin Extended-C, Latin Extended-D, Latin Extended-E\n * <li><i>armenian</i>\n * <li><i>greek</i> - Greek, Greek Extended\n * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B, Cyrillic Extended-C, Cyrillic Supplement\n * <li><i>georgian</i> - Georgian, Georgian Supplement\n * <li><i>glagolitic</i> - Glagolitic, Glagolitic Supplement\n * <li><i>gothic</i>\n * <li><i>ogham</i>\n * <li><i>oldpersian</i>\n * <li><i>runic</i>\n * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement\n * <li><i>phonetic</i>\n * <li><i>modifiertone</i> - Modifier Tone Letters\n * <li><i>spacing</i>\n * <li><i>diacritics</i>\n * <li><i>halfmarks</i> - Combining Half Marks\n * <li><i>small</i> - Small Form Variants\n * <li><i>bamum</i> - Bamum, Bamum Supplement\n * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A\n * <li><i>nko</i>\n * <li><i>osmanya</i>\n * <li><i>tifinagh</i>\n * <li><i>val</i>\n * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, \n * Arabic Presentation Forms-B, Arabic Mathematical Alphabetic Symbols\n * <li><i>carlan</i>\n * <li><i>hebrew</i>\n * <li><i>mandaic</i>\n * <li><i>samaritan</i>\n * <li><i>syriac</i>\n * <li><i>mongolian</i>\n * <li><i>phagspa</i>\n * <li><i>tibetan</i>\n * <li><i>bengali</i>\n * <li><i>devanagari</i> - Devanagari, Devanagari Extended\n * <li><i>gujarati</i>\n * <li><i>gurmukhi</i>\n * <li><i>kannada</i>\n * <li><i>lepcha</i>\n * <li><i>limbu</i>\n * <li><i>malayalam</i>\n * <li><i>meetaimayek</i>\n * <li><i>olchiki</i>\n * <li><i>oriya</i>\n * <li><i>saurashtra</i>\n * <li><i>sinhala</i>\n * <li><i>sylotinagri</i> - Syloti Nagri\n * <li><i>tangut</i>\n * <li><i>tamil</i>\n * <li><i>telugu</i>\n * <li><i>thaana</i>\n * <li><i>vedic</i>\n * <li><i>batak</i>\n * <li><i>balinese</i>\n * <li><i>buginese</i>\n * <li><i>cham</i>\n * <li><i>javanese</i>\n * <li><i>kayahli</i>\n * <li><i>khmer</i>\n * <li><i>lao</i>\n * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A, Myanmar Extended-B\n * <li><i>newtailue</i>\n * <li><i>rejang</i>\n * <li><i>sundanese</i> - Sundanese, Sundanese Supplement\n * <li><i>taile</i>\n * <li><i>taitham</i>\n * <li><i>taiviet</i>\n * <li><i>thai</i>\n * <li><i>buhld</i>\n * <li><i>hanunoo</i>\n * <li><i>tagalog</i>\n * <li><i>tagbanwa</i>\n * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended\n * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs\n *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs \n *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description \n *  Characters (=isIdeo())\n * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility \n * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement\n * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals\n * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, \n * Hangul Jamo Extended-B, Hangul Compatibility Jamo\n * <li><i>cjkpunct</i> - CJK symbols and punctuation\n * <li><i>cjkstrokes</i> - CJK strokes\n * <li><i>hiragana</i>\n * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement\n * <li><i>kanbun</i>\n * <li><i>lisu</i>\n * <li><i>yi</i> - Yi Syllables, Yi Radicals\n * <li><i>cherokee</i>\n * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian \n * Aboriginal Syllabics Extended\n * <li><i>presentation</i> - Alphabetic presentation forms\n * <li><i>vertical</i> - Vertical Forms\n * <li><i>width</i> - Halfwidth and Fullwidth Forms\n * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation\n * <li><i>box</i> - Box Drawing\n * <li><i>block</i> - Block Elements\n * <li><i>letterlike</i> - Letterlike symbols\n * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous \n * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B\n * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement\n * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement\n * <li><i>cjkcompatibility</i> - CJK compatibility\n * <li><i>apl</i> - APL symbols\n * <li><i>controlpictures</i> - Control pictures\n * <li><i>misc</i> - Miscellaneous technical\n * <li><i>ocr</i> - Optical character recognition (OCR)\n * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks \n * for Symbols, Combining Diacritical Marks Supplement, Combining Diacritical Marks Extended\n * <li><i>digits</i> - ASCII digits (=isDigit())\n * <li><i>indicnumber</i> - Common Indic Number Forms\n * <li><i>numbers</i> - Number forms\n * <li><i>supersub</i> - Superscripts and Subscripts\n * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,\n * Supplemental Arrows-B, Supplemental Arrows-C\n * <li><i>operators</i> - Mathematical operators, supplemental \n * mathematical operators \n * <li><i>geometric</i> - Geometric shapes, Geometric shapes extended\n * <li><i>ancient</i> - Ancient symbols\n * <li><i>braille</i> - Braille patterns\n * <li><i>currency</i> - Currency symbols\n * <li><i>dingbats</i>\n * <li><i>gamesymbols</i>\n * <li><i>yijing</i> - Yijing Hexagram Symbols\n * <li><i>specials</i>\n * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement\n * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, \n * Supplementary Private Use Area-B\n * <li><i>supplementarya</i> - Supplementary private use area-A\n * <li><i>supplementaryb</i> - Supplementary private use area-B\n * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates\n * <li><i>lowsurrogates</i>\n * <li><i>reserved</i>\n * <li><i>noncharacters</i>\n * <li><i>copticnumber</i> - coptic epact numbers\n * <li><i>oldpermic</i> - old permic\n * <li><i>albanian</i> - albanian\n * <li><i>lineara</i> - linear a\n * <li><i>meroitic</i> - meroitic cursive\n * <li><i>oldnortharabian</i> - old north arabian\n * <li><i>oldhungarian</i> - Supplementary private use area-A\n * <li><i>sorasompeng</i> - sora sompeng\n * <li><i>warangciti</i> - warang citi\n * <li><i>paucinhau</i> - pau cin hau\n * <li><i>bassavah</i> - bassa vah\n * <li><i>pahawhhmong</i> - pahawh hmong\n * <li><i>shorthandformat</i> - shorthand format controls\n * <li><i>suttonsignwriting</i> - sutton signwriting\n * <li><i>pictographs</i> - miscellaneous symbols and pictographs, supplemental symbols and pictographs\n * <li><i>ornamentaldingbats</i> - ornamental dingbats\n * </ul><p>\n * \n * \n * @protected\n * @param {string|IString|number} ch character or code point to examine\n * @param {string} rangeName the name of the range to check\n * @return {boolean} true if the first character is within the named\n * range\n */\n\n\nCType.withinRange = function (ch, rangeName) {\n  if (!rangeName) {\n    return false;\n  }\n\n  var num;\n\n  switch (_typeof(ch)) {\n    case 'number':\n      num = ch;\n      break;\n\n    case 'string':\n      num = IString.toCodePoint(ch, 0);\n      break;\n\n    case 'undefined':\n      return false;\n\n    default:\n      num = ch._toCodePoint(0);\n      break;\n  }\n\n  return CType._inRange(num, rangeName.toLowerCase(), ilib.data.ctype);\n};\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nCType._init = function (sync, loadParams, onLoad) {\n  CType._load(\"ctype\", sync, loadParams, onLoad);\n};\n/**\n * @protected\n * @param {string} name\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nCType._load = function (name, sync, loadParams, onLoad) {\n  if (!ilib.data[name]) {\n    var loadName = name ? name + \".json\" : \"CType.json\";\n    Utils.loadData({\n      object: \"CType\",\n      name: loadName,\n      locale: \"-\",\n      nonlocale: true,\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (ct) {\n        ilib.data[name] = ct;\n\n        if (onLoad && typeof onLoad === 'function') {\n          onLoad(ilib.data[name]);\n        }\n      })\n    });\n  } else {\n    if (onLoad && typeof onLoad === 'function') {\n      onLoad(ilib.data[name]);\n    }\n  }\n};\n\nmodule.exports = CType;"]},"metadata":{},"sourceType":"module"}