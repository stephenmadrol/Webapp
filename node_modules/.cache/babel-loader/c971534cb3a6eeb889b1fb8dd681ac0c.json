{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = exports[\"default\"] = void 0;\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _util = require(\"../util\");\n\nvar _util2 = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Merges external and internal CSS classes and style objects. Internal CSS classes can be\n * optionally mapped to alternate names (e.g. those generated by CSS modules) by including a\n * `css` parameter.\n *\n * Example:\n * ```\n *\tconst stylesConfig = {\n *\t\tcss: {\n *\t\t\tbutton: 'unambiguous-button-class-name',\n *\t\t\tclient: 'unambiguous-button-class-name-client'\n *\t\t},\n *\t\tclassName: 'button global-class',\n *\t\tstyle: {\n *\t\t\tcolor: 'red'\n *\t\t}\n *\t};\n *\n *\tconst props = {\n *\t\tclassName: 'my-button',\n *\t\tstyle: {\n *\t\t\tdisplay: 'none'\n *\t\t}\n *\t};\n *\n *\tconst renderStyles = styles(stylesConfig);\n *\tconst renderStyles(props); // {className: 'unambiguous-button-class-name global-class', styles: {color: 'red', display: 'none'}}\n * ```\n *\n * @method styles\n * @param   {Object}    cfg  Configuration object containing one of `css`, `className`,\n *                           `publicClassNames`, and/or `style`\n *\n * @returns {Function}       Function that accepts a props object and mutates it to merge class\n *                           names and style objects and provide the `styler` utility function and\n *                           `css` merged class name map\n * @private\n */\n\n\nvar styles = function styles(cfg, optProps) {\n  var className = cfg.className,\n      configCss = cfg.css,\n      _cfg$prop = cfg.prop,\n      prop = _cfg$prop === void 0 ? 'className' : _cfg$prop,\n      style = cfg.style;\n  var allowedClassNames = cfg.publicClassNames;\n\n  if (configCss && allowedClassNames === true) {\n    allowedClassNames = Object.keys(configCss);\n  } else if (typeof allowedClassNames === 'string') {\n    allowedClassNames = allowedClassNames.split(/\\s+/);\n  }\n\n  var renderStyles = function renderStyles(props) {\n    var css = configCss;\n\n    if (style) {\n      props.style = Object.assign({}, style, props.style);\n    } // if the props includes a css map, merge them together now\n\n\n    if (css && allowedClassNames && props.css) {\n      css = (0, _util.mergeClassNameMaps)(css, props.css, allowedClassNames);\n    }\n\n    var cn = css ? _bind[\"default\"].bind(css) : _bind[\"default\"];\n    var joinedClassName = props[prop] = (0, _bind[\"default\"])(className ? cn(className.split(' ')) : null, props.className);\n    (0, _util2.addInternalProp)(props, 'css', css);\n    (0, _util2.addInternalProp)(props, 'styler', {\n      join: cn,\n      append: function append() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return cn.apply(void 0, [joinedClassName].concat(args));\n      }\n    });\n    return props;\n  };\n\n  if (optProps) {\n    return renderStyles(optProps);\n  }\n\n  return renderStyles;\n};\n\nexports.styles = styles;\nvar _default = styles;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/core/kind/styles.js"],"names":["Object","defineProperty","exports","value","styles","_bind","_interopRequireDefault","require","_util","_util2","obj","__esModule","cfg","optProps","className","configCss","css","_cfg$prop","prop","style","allowedClassNames","publicClassNames","keys","split","renderStyles","props","assign","mergeClassNameMaps","cn","bind","joinedClassName","addInternalProp","join","append","_len","arguments","length","args","Array","_key","apply","concat","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA3C;;AAEA,IAAIG,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAlC;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAIN,MAAM,GAAG,SAASA,MAAT,CAAgBQ,GAAhB,EAAqBC,QAArB,EAA+B;AAC1C,MAAIC,SAAS,GAAGF,GAAG,CAACE,SAApB;AAAA,MACIC,SAAS,GAAGH,GAAG,CAACI,GADpB;AAAA,MAEIC,SAAS,GAAGL,GAAG,CAACM,IAFpB;AAAA,MAGIA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAnB,GAAuB,WAAvB,GAAqCA,SAHhD;AAAA,MAIIE,KAAK,GAAGP,GAAG,CAACO,KAJhB;AAKA,MAAIC,iBAAiB,GAAGR,GAAG,CAACS,gBAA5B;;AAEA,MAAIN,SAAS,IAAIK,iBAAiB,KAAK,IAAvC,EAA6C;AAC3CA,IAAAA,iBAAiB,GAAGpB,MAAM,CAACsB,IAAP,CAAYP,SAAZ,CAApB;AACD,GAFD,MAEO,IAAI,OAAOK,iBAAP,KAA6B,QAAjC,EAA2C;AAChDA,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACG,KAAlB,CAAwB,KAAxB,CAApB;AACD;;AAED,MAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9C,QAAIT,GAAG,GAAGD,SAAV;;AAEA,QAAII,KAAJ,EAAW;AACTM,MAAAA,KAAK,CAACN,KAAN,GAAcnB,MAAM,CAAC0B,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyBM,KAAK,CAACN,KAA/B,CAAd;AACD,KAL6C,CAK5C;;;AAGF,QAAIH,GAAG,IAAII,iBAAP,IAA4BK,KAAK,CAACT,GAAtC,EAA2C;AACzCA,MAAAA,GAAG,GAAG,CAAC,GAAGR,KAAK,CAACmB,kBAAV,EAA8BX,GAA9B,EAAmCS,KAAK,CAACT,GAAzC,EAA8CI,iBAA9C,CAAN;AACD;;AAED,QAAIQ,EAAE,GAAGZ,GAAG,GAAGX,KAAK,CAAC,SAAD,CAAL,CAAiBwB,IAAjB,CAAsBb,GAAtB,CAAH,GAAgCX,KAAK,CAAC,SAAD,CAAjD;AACA,QAAIyB,eAAe,GAAGL,KAAK,CAACP,IAAD,CAAL,GAAc,CAAC,GAAGb,KAAK,CAAC,SAAD,CAAT,EAAsBS,SAAS,GAAGc,EAAE,CAACd,SAAS,CAACS,KAAV,CAAgB,GAAhB,CAAD,CAAL,GAA8B,IAA7D,EAAmEE,KAAK,CAACX,SAAzE,CAApC;AACA,KAAC,GAAGL,MAAM,CAACsB,eAAX,EAA4BN,KAA5B,EAAmC,KAAnC,EAA0CT,GAA1C;AACA,KAAC,GAAGP,MAAM,CAACsB,eAAX,EAA4BN,KAA5B,EAAmC,QAAnC,EAA6C;AAC3CO,MAAAA,IAAI,EAAEJ,EADqC;AAE3CK,MAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,aAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,UAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,eAAOX,EAAE,CAACY,KAAH,CAAS,KAAK,CAAd,EAAiB,CAACV,eAAD,EAAkBW,MAAlB,CAAyBJ,IAAzB,CAAjB,CAAP;AACD;AAR0C,KAA7C;AAUA,WAAOZ,KAAP;AACD,GA1BD;;AA4BA,MAAIZ,QAAJ,EAAc;AACZ,WAAOW,YAAY,CAACX,QAAD,CAAnB;AACD;;AAED,SAAOW,YAAP;AACD,CA/CD;;AAiDAtB,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACA,IAAIsC,QAAQ,GAAGtC,MAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBwC,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = exports[\"default\"] = void 0;\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _util = require(\"../util\");\n\nvar _util2 = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Merges external and internal CSS classes and style objects. Internal CSS classes can be\n * optionally mapped to alternate names (e.g. those generated by CSS modules) by including a\n * `css` parameter.\n *\n * Example:\n * ```\n *\tconst stylesConfig = {\n *\t\tcss: {\n *\t\t\tbutton: 'unambiguous-button-class-name',\n *\t\t\tclient: 'unambiguous-button-class-name-client'\n *\t\t},\n *\t\tclassName: 'button global-class',\n *\t\tstyle: {\n *\t\t\tcolor: 'red'\n *\t\t}\n *\t};\n *\n *\tconst props = {\n *\t\tclassName: 'my-button',\n *\t\tstyle: {\n *\t\t\tdisplay: 'none'\n *\t\t}\n *\t};\n *\n *\tconst renderStyles = styles(stylesConfig);\n *\tconst renderStyles(props); // {className: 'unambiguous-button-class-name global-class', styles: {color: 'red', display: 'none'}}\n * ```\n *\n * @method styles\n * @param   {Object}    cfg  Configuration object containing one of `css`, `className`,\n *                           `publicClassNames`, and/or `style`\n *\n * @returns {Function}       Function that accepts a props object and mutates it to merge class\n *                           names and style objects and provide the `styler` utility function and\n *                           `css` merged class name map\n * @private\n */\nvar styles = function styles(cfg, optProps) {\n  var className = cfg.className,\n      configCss = cfg.css,\n      _cfg$prop = cfg.prop,\n      prop = _cfg$prop === void 0 ? 'className' : _cfg$prop,\n      style = cfg.style;\n  var allowedClassNames = cfg.publicClassNames;\n\n  if (configCss && allowedClassNames === true) {\n    allowedClassNames = Object.keys(configCss);\n  } else if (typeof allowedClassNames === 'string') {\n    allowedClassNames = allowedClassNames.split(/\\s+/);\n  }\n\n  var renderStyles = function renderStyles(props) {\n    var css = configCss;\n\n    if (style) {\n      props.style = Object.assign({}, style, props.style);\n    } // if the props includes a css map, merge them together now\n\n\n    if (css && allowedClassNames && props.css) {\n      css = (0, _util.mergeClassNameMaps)(css, props.css, allowedClassNames);\n    }\n\n    var cn = css ? _bind[\"default\"].bind(css) : _bind[\"default\"];\n    var joinedClassName = props[prop] = (0, _bind[\"default\"])(className ? cn(className.split(' ')) : null, props.className);\n    (0, _util2.addInternalProp)(props, 'css', css);\n    (0, _util2.addInternalProp)(props, 'styler', {\n      join: cn,\n      append: function append() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return cn.apply(void 0, [joinedClassName].concat(args));\n      }\n    });\n    return props;\n  };\n\n  if (optProps) {\n    return renderStyles(optProps);\n  }\n\n  return renderStyles;\n};\n\nexports.styles = styles;\nvar _default = styles;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}