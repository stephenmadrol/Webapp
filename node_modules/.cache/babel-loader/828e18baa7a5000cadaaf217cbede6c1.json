{"ast":null,"code":"\"use strict\";\n/*\n * ScriptInfo.js - information about scripts\n * \n * Copyright Â© 2012-2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Utils.js\n// !data scripts\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n/**\n * @class\n * Create a new script info instance. This class encodes information about\n * scripts, which are sets of characters used in a writing system.<p>\n * \n * The options object may contain any of the following properties:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the script info object is fully \n * loaded. When the onLoad option is given, the script info object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * \n * @constructor\n * @param {string} script The ISO 15924 4-letter identifier for the script\n * @param {Object=} options parameters to initialize this instance \n */\n\n\nvar ScriptInfo = function ScriptInfo(script, options) {\n  var sync = true,\n      loadParams = undefined;\n  this.script = script;\n\n  if (options) {\n    if (typeof options.sync !== 'undefined') {\n      sync = options.sync == true;\n    }\n\n    if (typeof options.loadParams !== 'undefined') {\n      loadParams = options.loadParams;\n    }\n  }\n\n  if (!ilib.data.scripts) {\n    Utils.loadData({\n      object: \"ScriptInfo\",\n      locale: \"-\",\n      name: \"scripts.json\",\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (info) {\n        if (!info) {\n          info = {\n            \"Latn\": {\n              \"nb\": 215,\n              \"nm\": \"Latin\",\n              \"lid\": \"Latin\",\n              \"rtl\": false,\n              \"ime\": false,\n              \"casing\": true\n            }\n          };\n          var spec = this.locale.getSpec().replace(/-/g, \"_\");\n          ilib.data.cache.ScriptInfo[spec] = info;\n        }\n\n        ilib.data.scripts = info;\n        this.info = script && ilib.data.scripts[script];\n\n        if (options && typeof options.onLoad === 'function') {\n          options.onLoad(this);\n        }\n      })\n    });\n  } else {\n    this.info = ilib.data.scripts[script];\n\n    if (options && typeof options.onLoad === 'function') {\n      options.onLoad(this);\n    }\n  }\n};\n/**\n * @private\n */\n\n\nScriptInfo._getScriptsArray = function () {\n  var ret = [],\n      script = undefined,\n      scripts = ilib.data.scripts;\n\n  for (script in scripts) {\n    if (script && scripts[script]) {\n      ret.push(script);\n    }\n  }\n\n  return ret;\n};\n/**\n * Return an array of all ISO 15924 4-letter identifier script identifiers that\n * this copy of ilib knows about.\n * @static\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\n * @param {Object} loadParams arbitrary object full of properties to pass to the loader\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\n * @return {Array.<string>} an array of all script identifiers that this copy of\n * ilib knows about\n */\n\n\nScriptInfo.getAllScripts = function (sync, loadParams, onLoad) {\n  if (!ilib.data.scripts) {\n    Utils.loadData({\n      object: \"ScriptInfo\",\n      locale: \"-\",\n      name: \"scripts.json\",\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (info) {\n        ilib.data.scripts = info;\n\n        if (typeof onLoad === 'function') {\n          onLoad(ScriptInfo._getScriptsArray());\n        }\n      })\n    });\n  } else {\n    if (typeof onLoad === 'function') {\n      onLoad(ScriptInfo._getScriptsArray());\n    }\n  }\n\n  return ScriptInfo._getScriptsArray();\n};\n\nScriptInfo.prototype = {\n  /**\n   * Return the 4-letter ISO 15924 identifier associated\n   * with this script.\n   * @return {string} the 4-letter ISO code for this script\n   */\n  getCode: function getCode() {\n    return this.info && this.script;\n  },\n\n  /**\n   * Get the ISO 15924 code number associated with this\n   * script.\n   * \n   * @return {number} the ISO 15924 code number\n   */\n  getCodeNumber: function getCodeNumber() {\n    return this.info && this.info.nb || 0;\n  },\n\n  /**\n   * Get the name of this script in English.\n   * \n   * @return {string} the name of this script in English\n   */\n  getName: function getName() {\n    return this.info && this.info.nm;\n  },\n\n  /**\n   * Get the long identifier assciated with this script.\n   * \n   * @return {string} the long identifier of this script\n   */\n  getLongCode: function getLongCode() {\n    return this.info && this.info.lid;\n  },\n\n  /**\n   * Return the usual direction that text in this script is written\n   * in. Possible return values are \"rtl\" for right-to-left,\n   * \"ltr\" for left-to-right, and \"ttb\" for top-to-bottom.\n   * \n   * @return {string} the usual direction that text in this script is\n   * written in\n   */\n  getScriptDirection: function getScriptDirection() {\n    return this.info && typeof this.info.rtl !== 'undefined' && this.info.rtl ? \"rtl\" : \"ltr\";\n  },\n\n  /**\n   * Return true if this script typically requires an input method engine\n   * to enter its characters.\n   * \n   * @return {boolean} true if this script typically requires an IME\n   */\n  getNeedsIME: function getNeedsIME() {\n    return this.info && this.info.ime ? true : false; // converts undefined to false\n  },\n\n  /**\n   * Return true if this script uses lower- and upper-case characters.\n   * \n   * @return {boolean} true if this script uses letter case\n   */\n  getCasing: function getCasing() {\n    return this.info && this.info.casing ? true : false; // converts undefined to false\n  }\n};\nmodule.exports = ScriptInfo;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/ScriptInfo.js"],"names":["ilib","require","Utils","ScriptInfo","script","options","sync","loadParams","undefined","data","scripts","loadData","object","locale","name","callback","bind","info","spec","getSpec","replace","cache","onLoad","_getScriptsArray","ret","push","getAllScripts","prototype","getCode","getCodeNumber","nb","getName","nm","getLongCode","lid","getScriptDirection","rtl","getNeedsIME","ime","getCasing","casing","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * ScriptInfo.js - information about scripts\n * \n * Copyright Â© 2012-2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Utils.js\n// !data scripts\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n/**\n * @class\n * Create a new script info instance. This class encodes information about\n * scripts, which are sets of characters used in a writing system.<p>\n * \n * The options object may contain any of the following properties:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the script info object is fully \n * loaded. When the onLoad option is given, the script info object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * \n * @constructor\n * @param {string} script The ISO 15924 4-letter identifier for the script\n * @param {Object=} options parameters to initialize this instance \n */\n\n\nvar ScriptInfo = function ScriptInfo(script, options) {\n  var sync = true,\n      loadParams = undefined;\n  this.script = script;\n\n  if (options) {\n    if (typeof options.sync !== 'undefined') {\n      sync = options.sync == true;\n    }\n\n    if (typeof options.loadParams !== 'undefined') {\n      loadParams = options.loadParams;\n    }\n  }\n\n  if (!ilib.data.scripts) {\n    Utils.loadData({\n      object: \"ScriptInfo\",\n      locale: \"-\",\n      name: \"scripts.json\",\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (info) {\n        if (!info) {\n          info = {\n            \"Latn\": {\n              \"nb\": 215,\n              \"nm\": \"Latin\",\n              \"lid\": \"Latin\",\n              \"rtl\": false,\n              \"ime\": false,\n              \"casing\": true\n            }\n          };\n          var spec = this.locale.getSpec().replace(/-/g, \"_\");\n          ilib.data.cache.ScriptInfo[spec] = info;\n        }\n\n        ilib.data.scripts = info;\n        this.info = script && ilib.data.scripts[script];\n\n        if (options && typeof options.onLoad === 'function') {\n          options.onLoad(this);\n        }\n      })\n    });\n  } else {\n    this.info = ilib.data.scripts[script];\n\n    if (options && typeof options.onLoad === 'function') {\n      options.onLoad(this);\n    }\n  }\n};\n/**\n * @private\n */\n\n\nScriptInfo._getScriptsArray = function () {\n  var ret = [],\n      script = undefined,\n      scripts = ilib.data.scripts;\n\n  for (script in scripts) {\n    if (script && scripts[script]) {\n      ret.push(script);\n    }\n  }\n\n  return ret;\n};\n/**\n * Return an array of all ISO 15924 4-letter identifier script identifiers that\n * this copy of ilib knows about.\n * @static\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\n * @param {Object} loadParams arbitrary object full of properties to pass to the loader\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\n * @return {Array.<string>} an array of all script identifiers that this copy of\n * ilib knows about\n */\n\n\nScriptInfo.getAllScripts = function (sync, loadParams, onLoad) {\n  if (!ilib.data.scripts) {\n    Utils.loadData({\n      object: \"ScriptInfo\",\n      locale: \"-\",\n      name: \"scripts.json\",\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (info) {\n        ilib.data.scripts = info;\n\n        if (typeof onLoad === 'function') {\n          onLoad(ScriptInfo._getScriptsArray());\n        }\n      })\n    });\n  } else {\n    if (typeof onLoad === 'function') {\n      onLoad(ScriptInfo._getScriptsArray());\n    }\n  }\n\n  return ScriptInfo._getScriptsArray();\n};\n\nScriptInfo.prototype = {\n  /**\n   * Return the 4-letter ISO 15924 identifier associated\n   * with this script.\n   * @return {string} the 4-letter ISO code for this script\n   */\n  getCode: function getCode() {\n    return this.info && this.script;\n  },\n\n  /**\n   * Get the ISO 15924 code number associated with this\n   * script.\n   * \n   * @return {number} the ISO 15924 code number\n   */\n  getCodeNumber: function getCodeNumber() {\n    return this.info && this.info.nb || 0;\n  },\n\n  /**\n   * Get the name of this script in English.\n   * \n   * @return {string} the name of this script in English\n   */\n  getName: function getName() {\n    return this.info && this.info.nm;\n  },\n\n  /**\n   * Get the long identifier assciated with this script.\n   * \n   * @return {string} the long identifier of this script\n   */\n  getLongCode: function getLongCode() {\n    return this.info && this.info.lid;\n  },\n\n  /**\n   * Return the usual direction that text in this script is written\n   * in. Possible return values are \"rtl\" for right-to-left,\n   * \"ltr\" for left-to-right, and \"ttb\" for top-to-bottom.\n   * \n   * @return {string} the usual direction that text in this script is\n   * written in\n   */\n  getScriptDirection: function getScriptDirection() {\n    return this.info && typeof this.info.rtl !== 'undefined' && this.info.rtl ? \"rtl\" : \"ltr\";\n  },\n\n  /**\n   * Return true if this script typically requires an input method engine\n   * to enter its characters.\n   * \n   * @return {boolean} true if this script typically requires an IME\n   */\n  getNeedsIME: function getNeedsIME() {\n    return this.info && this.info.ime ? true : false; // converts undefined to false\n  },\n\n  /**\n   * Return true if this script uses lower- and upper-case characters.\n   * \n   * @return {boolean} true if this script uses letter case\n   */\n  getCasing: function getCasing() {\n    return this.info && this.info.casing ? true : false; // converts undefined to false\n  }\n};\nmodule.exports = ScriptInfo;"]},"metadata":{},"sourceType":"module"}