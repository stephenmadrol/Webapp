{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uppercase = exports[\"default\"] = void 0;\n\nvar _hoc = _interopRequireDefault(require(\"@enact/core/hoc\"));\n\nvar _kind = _interopRequireDefault(require(\"@enact/core/kind\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Provides higher-order component interface for handling locale-aware uppercasing.\n *\n * @module i18n/Uppercase\n * @exports Uppercase\n */\n\n\nvar isString = function isString(content) {\n  return typeof content === 'string';\n};\n\nvar formatContent = function formatContent(casing, content) {\n  switch (casing) {\n    case 'word':\n      return (0, _util.toWordCase)(content);\n\n    case 'sentence':\n      return (0, _util.toCapitalized)(content);\n\n    case 'upper':\n      return (0, _util.toUpperCase)(content);\n  }\n};\n/**\n * A higher-order component that is used to wrap an element to provide locale-aware uppercasing of\n * `children`, provided that `children` is a single string. Other values for `children` are\n * unchanged. It supports a `casing` property which can be used to override the uppercase as-needed.\n *\n * There are no configurable options on this HOC.\n *\n * @class Uppercase\n * @memberof i18n/Uppercase\n * @hoc\n * @public\n */\n\n\nvar Uppercase = (0, _hoc[\"default\"])(function (config, Wrapped) {\n  return (0, _kind[\"default\"])({\n    // eslint-disable-line no-unused-vars\n    name: 'Uppercase',\n    propTypes:\n    /** @lends i18n/Uppercase.Uppercase.prototype */\n    {\n      /**\n       * Configures the mode of uppercasing that should be performed.\n       *\n       * Options are:\n       *   `'upper'` to capitalize all characters.\n       *   `'preserve'` to maintain the original casing.\n       *   `'word'` to capitalize the first letter of each word.\n       *   `'sentence'` to capitalize the first letter of the string.\n       *\n       * @type {String}\n       * @default 'upper'\n       * @public\n       */\n      casing: _propTypes[\"default\"].oneOf(['upper', 'preserve', 'word', 'sentence'])\n    },\n    defaultProps: {\n      casing: 'upper'\n    },\n    computed: {\n      children: function children(_ref) {\n        var casing = _ref.casing,\n            _children = _ref.children;\n\n        if (casing !== 'preserve' && _react[\"default\"].Children.count(_children)) {\n          return isString(_children) ? formatContent(casing, _children) : _react[\"default\"].Children.map(_children, function (child) {\n            return isString(child) ? formatContent(casing, child) : child;\n          });\n        }\n\n        return _children;\n      }\n    },\n    render: function render(props) {\n      delete props.casing;\n      return _react[\"default\"].createElement(Wrapped, props);\n    }\n  });\n});\nexports.Uppercase = Uppercase;\nvar _default = Uppercase;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/Uppercase/Uppercase.js"],"names":["Object","defineProperty","exports","value","Uppercase","_hoc","_interopRequireDefault","require","_kind","_react","_propTypes","_util","obj","__esModule","isString","content","formatContent","casing","toWordCase","toCapitalized","toUpperCase","config","Wrapped","name","propTypes","oneOf","defaultProps","computed","children","_ref","_children","Children","count","map","child","render","props","createElement","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uppercase = exports[\"default\"] = void 0;\n\nvar _hoc = _interopRequireDefault(require(\"@enact/core/hoc\"));\n\nvar _kind = _interopRequireDefault(require(\"@enact/core/kind\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _util = require(\"../util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Provides higher-order component interface for handling locale-aware uppercasing.\n *\n * @module i18n/Uppercase\n * @exports Uppercase\n */\nvar isString = function isString(content) {\n  return typeof content === 'string';\n};\n\nvar formatContent = function formatContent(casing, content) {\n  switch (casing) {\n    case 'word':\n      return (0, _util.toWordCase)(content);\n\n    case 'sentence':\n      return (0, _util.toCapitalized)(content);\n\n    case 'upper':\n      return (0, _util.toUpperCase)(content);\n  }\n};\n/**\n * A higher-order component that is used to wrap an element to provide locale-aware uppercasing of\n * `children`, provided that `children` is a single string. Other values for `children` are\n * unchanged. It supports a `casing` property which can be used to override the uppercase as-needed.\n *\n * There are no configurable options on this HOC.\n *\n * @class Uppercase\n * @memberof i18n/Uppercase\n * @hoc\n * @public\n */\n\n\nvar Uppercase = (0, _hoc[\"default\"])(function (config, Wrapped) {\n  return (0, _kind[\"default\"])({\n    // eslint-disable-line no-unused-vars\n    name: 'Uppercase',\n    propTypes:\n    /** @lends i18n/Uppercase.Uppercase.prototype */\n    {\n      /**\n       * Configures the mode of uppercasing that should be performed.\n       *\n       * Options are:\n       *   `'upper'` to capitalize all characters.\n       *   `'preserve'` to maintain the original casing.\n       *   `'word'` to capitalize the first letter of each word.\n       *   `'sentence'` to capitalize the first letter of the string.\n       *\n       * @type {String}\n       * @default 'upper'\n       * @public\n       */\n      casing: _propTypes[\"default\"].oneOf(['upper', 'preserve', 'word', 'sentence'])\n    },\n    defaultProps: {\n      casing: 'upper'\n    },\n    computed: {\n      children: function children(_ref) {\n        var casing = _ref.casing,\n            _children = _ref.children;\n\n        if (casing !== 'preserve' && _react[\"default\"].Children.count(_children)) {\n          return isString(_children) ? formatContent(casing, _children) : _react[\"default\"].Children.map(_children, function (child) {\n            return isString(child) ? formatContent(casing, child) : child;\n          });\n        }\n\n        return _children;\n      }\n    },\n    render: function render(props) {\n      delete props.casing;\n      return _react[\"default\"].createElement(Wrapped, props);\n    }\n  });\n});\nexports.Uppercase = Uppercase;\nvar _default = Uppercase;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}