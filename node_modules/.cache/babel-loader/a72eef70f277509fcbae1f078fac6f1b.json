{"ast":null,"code":"\"use strict\";\n/*\n * GregorianDate.js - Represent a date in the Gregorian calendar\n *\n * Copyright Â© 2012-2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nGregorianCal.js \nSearchUtils.js\nMathUtils.js\nLocale.js\nLocaleInfo.js \nJulianDay.js\nGregRataDie.js\nTimeZone.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar JulianDay = require(\"./JulianDay.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar GregorianCal = require(\"./GregorianCal.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n/**\n * @class\n * Construct a new Gregorian date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>dst</i> - boolean used to specify whether the given time components are\n * intended to be in daylight time or not. This is only used in the overlap\n * time when transitioning from DST to standard time, and the time components are\n * ambiguous. Otherwise at all other times of the year, this flag is ignored.\n * If you specify the date using unix time (UTC) or a julian day, then the time is\n * already unambiguous and this flag does not need to be specified.\n * <p>\n * For example, in the US, the transition out of daylight savings time\n * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls\n * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as\n * \"Nov 2, 2014 1:30am\", then there are two 1:30am times in that day, and you would\n * have to give the standard flag to indicate which of those two you mean.\n * (dst=true means daylight time, dst=false means standard time).\n *\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string\n * of this gregorian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this gregorian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n *\n * <li><i>onLoad</i> - a callback function to call when this date object is fully\n * loaded. When the onLoad option is given, this date object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date\n */\n\n\nvar GregorianDate = function GregorianDate(params) {\n  this.cal = new GregorianCal();\n  params = params || {};\n\n  if (typeof params.noinstance === 'boolean' && params.noinstance) {\n    // for doing inheritance, so don't need to fill in the data. The\n    // inheriting class only wants the methods.\n    return;\n  }\n\n  if (params.timezone) {\n    this.timezone = params.timezone.toString();\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nGregorianDate.prototype = new IDate({\n  noinstance: true\n});\nGregorianDate.prototype.parent = IDate;\nGregorianDate.prototype.constructor = GregorianDate;\n/**\n * @private\n * Initialize this date object\n */\n\nGregorianDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    this.year = parseInt(params.year, 10) || 0;\n    this.month = parseInt(params.month, 10) || 1;\n    this.day = parseInt(params.day, 10) || 1;\n    this.hour = parseInt(params.hour, 10) || 0;\n    this.minute = parseInt(params.minute, 10) || 0;\n    this.second = parseInt(params.second, 10) || 0;\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(params); // add the time zone offset to the rd to convert to UTC\n\n    this.offset = 0;\n\n    if (this.timezone === \"local\" && typeof params.dst === 'undefined') {\n      // if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean\n      // in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this\n      // case, use the ilib calculations below, which can distinguish between the two properly\n      var d = new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);\n      var hBefore = new Date(this.year, this.month - 1, this.day, this.hour - 1, this.minute, this.second, this.millisecond);\n      this.offset = -d.getTimezoneOffset() / 1440;\n\n      if (d.getTimezoneOffset() < hBefore.getTimezoneOffset()) {\n        var startOffset = -hBefore.getTimezoneOffset() / 1440;\n        this.rd = this.newRd({\n          rd: this.rd.getRataDie() - startOffset\n        });\n      } else {\n        this.rd = this.newRd({\n          rd: this.rd.getRataDie() - this.offset\n        });\n      }\n\n      this._init2(params);\n    } else {\n      new TimeZone({\n        id: this.timezone,\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (tz) {\n          this.tz = tz; // getOffsetMillis requires that this.year, this.rd, and this.dst\n          // are set in order to figure out which time zone rules apply and\n          // what the offset is at that point in the year\n\n          this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n\n          this._init2(params);\n        })\n      });\n    }\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nGregorianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nGregorianDate.prototype.newRd = function (params) {\n  return new GregRataDie(params);\n};\n/**\n * Calculates the Gregorian year for a given rd number.\n * @private\n * @static\n */\n\n\nGregorianDate._calcYear = function (rd) {\n  var days400, days100, days4, years400, years100, years4, years1, year;\n  years400 = Math.floor((rd - 1) / 146097);\n  days400 = MathUtils.mod(rd - 1, 146097);\n  years100 = Math.floor(days400 / 36524);\n  days100 = MathUtils.mod(days400, 36524);\n  years4 = Math.floor(days100 / 1461);\n  days4 = MathUtils.mod(days100, 1461);\n  years1 = Math.floor(days4 / 365);\n  year = 400 * years400 + 100 * years100 + 4 * years4 + years1;\n\n  if (years100 !== 4 && years1 !== 4) {\n    year++;\n  }\n\n  return year;\n};\n/**\n * @private\n */\n\n\nGregorianDate.prototype._calcYear = function (rd) {\n  return GregorianDate._calcYear(rd);\n};\n/**\n * Calculate the date components for the current time zone\n * @private\n */\n\n\nGregorianDate.prototype._calcDateComponents = function () {\n  if (this.timezone === \"local\" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {\n    // console.log(\"using js Date to calculate offset\");\n    // use the intrinsic JS Date object to do the tz conversion for us, which\n    // guarantees that it follows the system tz database settings\n    var d = new Date(this.rd.getTimeExtended());\n    /**\n     * Year in the Gregorian calendar.\n     * @type number\n     */\n\n    this.year = d.getFullYear();\n    /**\n     * The month number, ranging from 1 (January) to 12 (December).\n     * @type number\n     */\n\n    this.month = d.getMonth() + 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = d.getDate();\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = d.getHours();\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = d.getMinutes();\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = d.getSeconds();\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = d.getMilliseconds();\n    this.offset = -d.getTimezoneOffset() / 1440;\n  } else {\n    // console.log(\"using ilib to calculate offset. tz is \" + this.timezone);\n    // console.log(\"GregDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n    if (typeof this.offset === \"undefined\") {\n      // console.log(\"calculating offset\");\n      this.year = this._calcYear(this.rd.getRataDie()); // now offset the RD by the time zone, then recalculate in case we were\n      // near the year boundary\n\n      if (!this.tz) {\n        this.tz = new TimeZone({\n          id: this.timezone\n        });\n      }\n\n      this.offset = this.tz.getOffsetMillis(this) / 86400000; // } else {\n      // console.log(\"offset is already defined somehow. type is \" + typeof(this.offset));\n      // console.trace(\"Stack is this one\");\n    } // console.log(\"offset is \" + this.offset);\n\n\n    var rd = this.rd.getRataDie();\n\n    if (this.offset !== 0) {\n      rd += this.offset;\n    }\n\n    this.year = this._calcYear(rd);\n    var yearStartRd = this.newRd({\n      year: this.year,\n      month: 1,\n      day: 1,\n      cal: this.cal\n    }); // remainder is days into the year\n\n    var remainder = rd - yearStartRd.getRataDie() + 1;\n    var cumulative = GregorianCal.prototype.isLeapYear.call(this.cal, this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;\n    this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n    remainder = remainder - cumulative[this.month - 1];\n    this.day = Math.floor(remainder);\n    remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n    remainder = Math.round(remainder * 86400000);\n    this.hour = Math.floor(remainder / 3600000);\n    remainder -= this.hour * 3600000;\n    this.minute = Math.floor(remainder / 60000);\n    remainder -= this.minute * 60000;\n    this.second = Math.floor(remainder / 1000);\n    remainder -= this.second * 1000;\n    this.millisecond = Math.floor(remainder);\n  }\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nGregorianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nGregorianDate.prototype.getDayOfYear = function () {\n  var cumulativeMap = this.cal.isLeapYear(this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;\n  return cumulativeMap[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Gregorian\n * calendars is -1 for \"before the common era\" (BCE) and 1 for \"the common era\" (CE).\n * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar,\n * there is a year 0, so any years that are negative or zero are BCE. In the Julian\n * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to\n * 1.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\n\n\nGregorianDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nGregorianDate.prototype.getCalendar = function () {\n  return \"gregorian\";\n}; // register with the factory method\n\n\nIDate._constructors[\"gregorian\"] = GregorianDate;\nmodule.exports = GregorianDate;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\GregorianDate.js"],"names":["ilib","require","SearchUtils","MathUtils","Locale","LocaleInfo","JulianDay","IDate","TimeZone","Calendar","GregorianCal","GregRataDie","GregorianDate","params","cal","noinstance","timezone","toString","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","prototype","parent","constructor","year","month","day","hour","minute","second","millisecond","parseInt","dst","rd","newRd","offset","d","Date","hBefore","getTimezoneOffset","startOffset","getRataDie","_init2","id","tz","_getOffsetMillisWallTime","_calcDateComponents","_calcYear","days400","days100","days4","years400","years100","years4","years1","Math","floor","mod","getTimeExtended","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getOffsetMillis","yearStartRd","remainder","cumulative","isLeapYear","call","cumMonthLengthsLeap","cumMonthLengths","bsearch","round","getDayOfWeek","getDayOfYear","cumulativeMap","getEra","getCalendar","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * GregorianDate.js - Represent a date in the Gregorian calendar\n *\n * Copyright Â© 2012-2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nGregorianCal.js \nSearchUtils.js\nMathUtils.js\nLocale.js\nLocaleInfo.js \nJulianDay.js\nGregRataDie.js\nTimeZone.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar JulianDay = require(\"./JulianDay.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar GregorianCal = require(\"./GregorianCal.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n/**\n * @class\n * Construct a new Gregorian date object. The constructor parameters can\n * contain any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n *\n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n *\n * <li><i>year</i> - any integer, including 0\n *\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n *\n * <li><i>day</i> - 1 to 31\n *\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n *\n * <li><i>minute</i> - 0 to 59\n *\n * <li><i>second</i> - 0 to 59\n *\n * <li><i>millisecond</i> - 0 to 999\n *\n * <li><i>dst</i> - boolean used to specify whether the given time components are\n * intended to be in daylight time or not. This is only used in the overlap\n * time when transitioning from DST to standard time, and the time components are\n * ambiguous. Otherwise at all other times of the year, this flag is ignored.\n * If you specify the date using unix time (UTC) or a julian day, then the time is\n * already unambiguous and this flag does not need to be specified.\n * <p>\n * For example, in the US, the transition out of daylight savings time\n * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls\n * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as\n * \"Nov 2, 2014 1:30am\", then there are two 1:30am times in that day, and you would\n * have to give the standard flag to indicate which of those two you mean.\n * (dst=true means daylight time, dst=false means standard time).\n *\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string\n * of this gregorian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n *\n * <li><i>locale</i> - locale for this gregorian date. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n *\n * <li><i>onLoad</i> - a callback function to call when this date object is fully\n * loaded. When the onLoad option is given, this date object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the\n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n *\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the\n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object\n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date\n */\n\n\nvar GregorianDate = function GregorianDate(params) {\n  this.cal = new GregorianCal();\n  params = params || {};\n\n  if (typeof params.noinstance === 'boolean' && params.noinstance) {\n    // for doing inheritance, so don't need to fill in the data. The\n    // inheriting class only wants the methods.\n    return;\n  }\n\n  if (params.timezone) {\n    this.timezone = params.timezone.toString();\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nGregorianDate.prototype = new IDate({\n  noinstance: true\n});\nGregorianDate.prototype.parent = IDate;\nGregorianDate.prototype.constructor = GregorianDate;\n/**\n * @private\n * Initialize this date object\n */\n\nGregorianDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    this.year = parseInt(params.year, 10) || 0;\n    this.month = parseInt(params.month, 10) || 1;\n    this.day = parseInt(params.day, 10) || 1;\n    this.hour = parseInt(params.hour, 10) || 0;\n    this.minute = parseInt(params.minute, 10) || 0;\n    this.second = parseInt(params.second, 10) || 0;\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(params); // add the time zone offset to the rd to convert to UTC\n\n    this.offset = 0;\n\n    if (this.timezone === \"local\" && typeof params.dst === 'undefined') {\n      // if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean\n      // in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this\n      // case, use the ilib calculations below, which can distinguish between the two properly\n      var d = new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);\n      var hBefore = new Date(this.year, this.month - 1, this.day, this.hour - 1, this.minute, this.second, this.millisecond);\n      this.offset = -d.getTimezoneOffset() / 1440;\n\n      if (d.getTimezoneOffset() < hBefore.getTimezoneOffset()) {\n        var startOffset = -hBefore.getTimezoneOffset() / 1440;\n        this.rd = this.newRd({\n          rd: this.rd.getRataDie() - startOffset\n        });\n      } else {\n        this.rd = this.newRd({\n          rd: this.rd.getRataDie() - this.offset\n        });\n      }\n\n      this._init2(params);\n    } else {\n      new TimeZone({\n        id: this.timezone,\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (tz) {\n          this.tz = tz; // getOffsetMillis requires that this.year, this.rd, and this.dst\n          // are set in order to figure out which time zone rules apply and\n          // what the offset is at that point in the year\n\n          this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n\n          this._init2(params);\n        })\n      });\n    }\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nGregorianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @private\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nGregorianDate.prototype.newRd = function (params) {\n  return new GregRataDie(params);\n};\n/**\n * Calculates the Gregorian year for a given rd number.\n * @private\n * @static\n */\n\n\nGregorianDate._calcYear = function (rd) {\n  var days400, days100, days4, years400, years100, years4, years1, year;\n  years400 = Math.floor((rd - 1) / 146097);\n  days400 = MathUtils.mod(rd - 1, 146097);\n  years100 = Math.floor(days400 / 36524);\n  days100 = MathUtils.mod(days400, 36524);\n  years4 = Math.floor(days100 / 1461);\n  days4 = MathUtils.mod(days100, 1461);\n  years1 = Math.floor(days4 / 365);\n  year = 400 * years400 + 100 * years100 + 4 * years4 + years1;\n\n  if (years100 !== 4 && years1 !== 4) {\n    year++;\n  }\n\n  return year;\n};\n/**\n * @private\n */\n\n\nGregorianDate.prototype._calcYear = function (rd) {\n  return GregorianDate._calcYear(rd);\n};\n/**\n * Calculate the date components for the current time zone\n * @private\n */\n\n\nGregorianDate.prototype._calcDateComponents = function () {\n  if (this.timezone === \"local\" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {\n    // console.log(\"using js Date to calculate offset\");\n    // use the intrinsic JS Date object to do the tz conversion for us, which\n    // guarantees that it follows the system tz database settings\n    var d = new Date(this.rd.getTimeExtended());\n    /**\n     * Year in the Gregorian calendar.\n     * @type number\n     */\n\n    this.year = d.getFullYear();\n    /**\n     * The month number, ranging from 1 (January) to 12 (December).\n     * @type number\n     */\n\n    this.month = d.getMonth() + 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = d.getDate();\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = d.getHours();\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = d.getMinutes();\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = d.getSeconds();\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = d.getMilliseconds();\n    this.offset = -d.getTimezoneOffset() / 1440;\n  } else {\n    // console.log(\"using ilib to calculate offset. tz is \" + this.timezone);\n    // console.log(\"GregDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n    if (typeof this.offset === \"undefined\") {\n      // console.log(\"calculating offset\");\n      this.year = this._calcYear(this.rd.getRataDie()); // now offset the RD by the time zone, then recalculate in case we were\n      // near the year boundary\n\n      if (!this.tz) {\n        this.tz = new TimeZone({\n          id: this.timezone\n        });\n      }\n\n      this.offset = this.tz.getOffsetMillis(this) / 86400000; // } else {\n      // console.log(\"offset is already defined somehow. type is \" + typeof(this.offset));\n      // console.trace(\"Stack is this one\");\n    } // console.log(\"offset is \" + this.offset);\n\n\n    var rd = this.rd.getRataDie();\n\n    if (this.offset !== 0) {\n      rd += this.offset;\n    }\n\n    this.year = this._calcYear(rd);\n    var yearStartRd = this.newRd({\n      year: this.year,\n      month: 1,\n      day: 1,\n      cal: this.cal\n    }); // remainder is days into the year\n\n    var remainder = rd - yearStartRd.getRataDie() + 1;\n    var cumulative = GregorianCal.prototype.isLeapYear.call(this.cal, this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;\n    this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n    remainder = remainder - cumulative[this.month - 1];\n    this.day = Math.floor(remainder);\n    remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n    remainder = Math.round(remainder * 86400000);\n    this.hour = Math.floor(remainder / 3600000);\n    remainder -= this.hour * 3600000;\n    this.minute = Math.floor(remainder / 60000);\n    remainder -= this.minute * 60000;\n    this.second = Math.floor(remainder / 1000);\n    remainder -= this.second * 1000;\n    this.millisecond = Math.floor(remainder);\n  }\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nGregorianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to\n * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and\n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nGregorianDate.prototype.getDayOfYear = function () {\n  var cumulativeMap = this.cal.isLeapYear(this.year) ? GregRataDie.cumMonthLengthsLeap : GregRataDie.cumMonthLengths;\n  return cumulativeMap[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Gregorian\n * calendars is -1 for \"before the common era\" (BCE) and 1 for \"the common era\" (CE).\n * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar,\n * there is a year 0, so any years that are negative or zero are BCE. In the Julian\n * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to\n * 1.\n * @return {number} 1 if this date is in the common era, -1 if it is before the\n * common era\n */\n\n\nGregorianDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nGregorianDate.prototype.getCalendar = function () {\n  return \"gregorian\";\n}; // register with the factory method\n\n\nIDate._constructors[\"gregorian\"] = GregorianDate;\nmodule.exports = GregorianDate;"]},"metadata":{},"sourceType":"module"}