{"ast":null,"code":"\"use strict\";\n/*\n * IslamicRataDie.js - Represent an RD date in the Islamic calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nIslamicCal.js\nRataDie.js\n*/\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar IslamicCal = require(\"./IslamicCal.js\");\n/**\n * @class\n * Construct a new Islamic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Islamic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date\n */\n\n\nvar IslamicRataDie = function IslamicRataDie(params) {\n  this.cal = params && params.cal || new IslamicCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nIslamicRataDie.prototype = new RataDie();\nIslamicRataDie.prototype.parent = RataDie;\nIslamicRataDie.prototype.constructor = IslamicRataDie;\n/**\n * The difference between a zero Julian day and the first Islamic date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @type number\n */\n\nIslamicRataDie.prototype.epoch = 1948439.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nIslamicRataDie.prototype._setDateComponents = function (date) {\n  var days = (date.year - 1) * 354 + Math.ceil(29.5 * (date.month - 1)) + date.day + Math.floor((3 + 11 * date.year) / 30) - 1;\n  var time = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000; //console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n  //console.log(\"getRataDie: days is \" +  days);\n  //console.log(\"getRataDie: time is \" +  time);\n  //console.log(\"getRataDie: rd is \" +  (days + time));\n\n  this.rd = days + time;\n};\n\nmodule.exports = IslamicRataDie;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\IslamicRataDie.js"],"names":["RataDie","require","IslamicCal","IslamicRataDie","params","cal","rd","NaN","call","prototype","parent","constructor","epoch","_setDateComponents","date","days","year","Math","ceil","month","day","floor","time","hour","minute","second","millisecond","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;AAIA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,iBAAD,CAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAIE,cAAc,GAAG,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AACnD,OAAKC,GAAL,GAAWD,MAAM,IAAIA,MAAM,CAACC,GAAjB,IAAwB,IAAIH,UAAJ,EAAnC;AACA,OAAKI,EAAL,GAAUC,GAAV;AACAP,EAAAA,OAAO,CAACQ,IAAR,CAAa,IAAb,EAAmBJ,MAAnB;AACD,CAJD;;AAMAD,cAAc,CAACM,SAAf,GAA2B,IAAIT,OAAJ,EAA3B;AACAG,cAAc,CAACM,SAAf,CAAyBC,MAAzB,GAAkCV,OAAlC;AACAG,cAAc,CAACM,SAAf,CAAyBE,WAAzB,GAAuCR,cAAvC;AACA;;;;;;;AAOAA,cAAc,CAACM,SAAf,CAAyBG,KAAzB,GAAiC,SAAjC;AACA;;;;;;;;AAQAT,cAAc,CAACM,SAAf,CAAyBI,kBAAzB,GAA8C,UAAUC,IAAV,EAAgB;AAC5D,MAAIC,IAAI,GAAG,CAACD,IAAI,CAACE,IAAL,GAAY,CAAb,IAAkB,GAAlB,GAAwBC,IAAI,CAACC,IAAL,CAAU,QAAQJ,IAAI,CAACK,KAAL,GAAa,CAArB,CAAV,CAAxB,GAA6DL,IAAI,CAACM,GAAlE,GAAwEH,IAAI,CAACI,KAAL,CAAW,CAAC,IAAI,KAAKP,IAAI,CAACE,IAAf,IAAuB,EAAlC,CAAxE,GAAgH,CAA3H;AACA,MAAIM,IAAI,GAAG,CAACR,IAAI,CAACS,IAAL,GAAY,OAAZ,GAAsBT,IAAI,CAACU,MAAL,GAAc,KAApC,GAA4CV,IAAI,CAACW,MAAL,GAAc,IAA1D,GAAiEX,IAAI,CAACY,WAAvE,IAAsF,QAAjG,CAF4D,CAE+C;AAC3G;AACA;AACA;;AAEA,OAAKpB,EAAL,GAAUS,IAAI,GAAGO,IAAjB;AACD,CARD;;AAUAK,MAAM,CAACC,OAAP,GAAiBzB,cAAjB","sourcesContent":["\"use strict\";\n\n/*\n * IslamicRataDie.js - Represent an RD date in the Islamic calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nIslamicCal.js\nRataDie.js\n*/\nvar RataDie = require(\"./RataDie.js\");\n\nvar IslamicCal = require(\"./IslamicCal.js\");\n/**\n * @class\n * Construct a new Islamic RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Islamic date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date\n */\n\n\nvar IslamicRataDie = function IslamicRataDie(params) {\n  this.cal = params && params.cal || new IslamicCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nIslamicRataDie.prototype = new RataDie();\nIslamicRataDie.prototype.parent = RataDie;\nIslamicRataDie.prototype.constructor = IslamicRataDie;\n/**\n * The difference between a zero Julian day and the first Islamic date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @type number\n */\n\nIslamicRataDie.prototype.epoch = 1948439.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nIslamicRataDie.prototype._setDateComponents = function (date) {\n  var days = (date.year - 1) * 354 + Math.ceil(29.5 * (date.month - 1)) + date.day + Math.floor((3 + 11 * date.year) / 30) - 1;\n  var time = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000; //console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n  //console.log(\"getRataDie: days is \" +  days);\n  //console.log(\"getRataDie: time is \" +  time);\n  //console.log(\"getRataDie: rd is \" +  (days + time));\n\n  this.rd = days + time;\n};\n\nmodule.exports = IslamicRataDie;"]},"metadata":{},"sourceType":"module"}