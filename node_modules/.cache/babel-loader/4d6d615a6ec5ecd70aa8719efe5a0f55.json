{"ast":null,"code":"\"use strict\";\n/*\n * julian.js - Represent a Julian calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Julian calendar object. This class encodes information about\n * a Julian calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar JulianCal = function JulianCal(options) {\n  this.type = \"julian\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/* the lengths of each month */\n\n\nJulianCal.monthLengths = [31,\n/* Jan */\n28,\n/* Feb */\n31,\n/* Mar */\n30,\n/* Apr */\n31,\n/* May */\n30,\n/* Jun */\n31,\n/* Jul */\n31,\n/* Aug */\n30,\n/* Sep */\n31,\n/* Oct */\n30,\n/* Nov */\n31\n/* Dec */\n];\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nJulianCal.cumMonthLengths = [0,\n/* Jan */\n31,\n/* Feb */\n59,\n/* Mar */\n90,\n/* Apr */\n120,\n/* May */\n151,\n/* Jun */\n181,\n/* Jul */\n212,\n/* Aug */\n243,\n/* Sep */\n273,\n/* Oct */\n304,\n/* Nov */\n334,\n/* Dec */\n365];\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nJulianCal.cumMonthLengthsLeap = [0,\n/* Jan */\n31,\n/* Feb */\n60,\n/* Mar */\n91,\n/* Apr */\n121,\n/* May */\n152,\n/* Jun */\n182,\n/* Jul */\n213,\n/* Aug */\n244,\n/* Sep */\n274,\n/* Oct */\n305,\n/* Nov */\n335,\n/* Dec */\n366];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Jaunary, 2=February, etc. until 12=December.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\nJulianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nJulianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 2 || !this.isLeapYear(year)) {\n    return JulianCal.monthLengths[month - 1];\n  } else {\n    return 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Julian calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|JulianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nJulianCal.prototype.isLeapYear = function (year) {\n  var y = typeof year === 'number' ? year : year.year;\n  return MathUtils.mod(y, 4) === (year > 0 ? 0 : 3);\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nJulianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"julian\"] = JulianCal;\nmodule.exports = JulianCal;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\JulianCal.js"],"names":["ilib","require","MathUtils","Calendar","JulianCal","options","type","onLoad","monthLengths","cumMonthLengths","cumMonthLengthsLeap","prototype","getNumMonths","year","getMonLength","month","isLeapYear","y","mod","getType","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;AACA;;;;;;;;;;;AAWA,IAAIG,SAAS,GAAG,SAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC1C,OAAKC,IAAL,GAAY,QAAZ;;AAEA,MAAID,OAAO,IAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,UAAzC,EAAqD;AACnDF,IAAAA,OAAO,CAACE,MAAR,CAAe,IAAf;AACD;AACF,CAND;AAOA;;;AAGAH,SAAS,CAACI,YAAV,GAAyB,CAAC,EAAD;AACzB;AACA,EAFyB;AAGzB;AACA,EAJyB;AAKzB;AACA,EANyB;AAOzB;AACA,EARyB;AASzB;AACA,EAVyB;AAWzB;AACA,EAZyB;AAazB;AACA,EAdyB;AAezB;AACA,EAhByB;AAiBzB;AACA,EAlByB;AAmBzB;AACA,EApByB;AAqBzB;AACA;AACA;AAvByB,CAAzB;AAyBA;;;;;;;AAOAJ,SAAS,CAACK,eAAV,GAA4B,CAAC,CAAD;AAC5B;AACA,EAF4B;AAG5B;AACA,EAJ4B;AAK5B;AACA,EAN4B;AAO5B;AACA,GAR4B;AAS5B;AACA,GAV4B;AAW5B;AACA,GAZ4B;AAa5B;AACA,GAd4B;AAe5B;AACA,GAhB4B;AAiB5B;AACA,GAlB4B;AAmB5B;AACA,GApB4B;AAqB5B;AACA,GAtB4B;AAuB5B;AACA,GAxB4B,CAA5B;AAyBA;;;;;;;AAOAL,SAAS,CAACM,mBAAV,GAAgC,CAAC,CAAD;AAChC;AACA,EAFgC;AAGhC;AACA,EAJgC;AAKhC;AACA,EANgC;AAOhC;AACA,GARgC;AAShC;AACA,GAVgC;AAWhC;AACA,GAZgC;AAahC;AACA,GAdgC;AAehC;AACA,GAhBgC;AAiBhC;AACA,GAlBgC;AAmBhC;AACA,GApBgC;AAqBhC;AACA,GAtBgC;AAuBhC;AACA,GAxBgC,CAAhC;AAyBA;;;;;;;;;AASAN,SAAS,CAACO,SAAV,CAAoBC,YAApB,GAAmC,UAAUC,IAAV,EAAgB;AACjD,SAAO,EAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAT,SAAS,CAACO,SAAV,CAAoBG,YAApB,GAAmC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AACxD,MAAIE,KAAK,KAAK,CAAV,IAAe,CAAC,KAAKC,UAAL,CAAgBH,IAAhB,CAApB,EAA2C;AACzC,WAAOT,SAAS,CAACI,YAAV,CAAuBO,KAAK,GAAG,CAA/B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAND;AAOA;;;;;;;;AAQAX,SAAS,CAACO,SAAV,CAAoBK,UAApB,GAAiC,UAAUH,IAAV,EAAgB;AAC/C,MAAII,CAAC,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACA,IAA/C;AACA,SAAOX,SAAS,CAACgB,GAAV,CAAcD,CAAd,EAAiB,CAAjB,OAAyBJ,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAxC,CAAP;AACD,CAHD;AAIA;;;;;;;AAOAT,SAAS,CAACO,SAAV,CAAoBQ,OAApB,GAA8B,YAAY;AACxC,SAAO,KAAKb,IAAZ;AACD,CAFD;AAGA;;;AAGAH,QAAQ,CAACiB,aAAT,CAAuB,QAAvB,IAAmChB,SAAnC;AACAiB,MAAM,CAACC,OAAP,GAAiBlB,SAAjB","sourcesContent":["\"use strict\";\n\n/*\n * julian.js - Represent a Julian calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Julian calendar object. This class encodes information about\n * a Julian calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar JulianCal = function JulianCal(options) {\n  this.type = \"julian\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/* the lengths of each month */\n\n\nJulianCal.monthLengths = [31,\n/* Jan */\n28,\n/* Feb */\n31,\n/* Mar */\n30,\n/* Apr */\n31,\n/* May */\n30,\n/* Jun */\n31,\n/* Jul */\n31,\n/* Aug */\n30,\n/* Sep */\n31,\n/* Oct */\n30,\n/* Nov */\n31\n/* Dec */\n];\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nJulianCal.cumMonthLengths = [0,\n/* Jan */\n31,\n/* Feb */\n59,\n/* Mar */\n90,\n/* Apr */\n120,\n/* May */\n151,\n/* Jun */\n181,\n/* Jul */\n212,\n/* Aug */\n243,\n/* Sep */\n273,\n/* Oct */\n304,\n/* Nov */\n334,\n/* Dec */\n365];\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nJulianCal.cumMonthLengthsLeap = [0,\n/* Jan */\n31,\n/* Feb */\n60,\n/* Mar */\n91,\n/* Apr */\n121,\n/* May */\n152,\n/* Jun */\n182,\n/* Jul */\n213,\n/* Aug */\n244,\n/* Sep */\n274,\n/* Oct */\n305,\n/* Nov */\n335,\n/* Dec */\n366];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Jaunary, 2=February, etc. until 12=December.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\nJulianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nJulianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 2 || !this.isLeapYear(year)) {\n    return JulianCal.monthLengths[month - 1];\n  } else {\n    return 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Julian calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|JulianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nJulianCal.prototype.isLeapYear = function (year) {\n  var y = typeof year === 'number' ? year : year.year;\n  return MathUtils.mod(y, 4) === (year > 0 ? 0 : 3);\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nJulianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"julian\"] = JulianCal;\nmodule.exports = JulianCal;"]},"metadata":{},"sourceType":"module"}