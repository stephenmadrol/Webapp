{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.perfLog = exports.debug = exports.info = exports.notice = exports.warning = exports.error = exports.critical = exports.alert = exports.emergency = void 0;\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/* eslint-disable no-console */\n\n/* global console */\n\n/**\n * Provides a wrapper around PmLogLib logging API\n *\n * @module webos/pmloglib\n * @exports emergency\n * @exports alert\n * @exports critical\n * @exports error\n * @exports warning\n * @exports notice\n * @exports info\n * @exports debug\n * @exports perfLog\n */\n// Log level constants\n\n\nvar levelEmergency = 0;\nvar levelAlert = 1;\nvar levelCritical = 2;\nvar levelError = 3;\nvar levelWarning = 4;\nvar levelNotice = 5;\nvar levelInfo = 6;\nvar levelDebug = 7;\n\nvar isObject = function isObject(obj) {\n  return !!obj && _typeof(obj) === 'object' && Object.prototype.toString.call(obj) !== '[object Array]';\n}; // Log function stringifies and escapes keyVals, and passes to PmLogString\n\n\nvar log = function log(level, messageId, keyVals, freeText) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (keyVals && !isObject(keyVals)) {\n      level = levelError;\n      keyVals = {\n        msgid: messageId\n      };\n      messageId = 'MISMATCHED_FMT';\n      freeText = null;\n      console.warn('webOSLog called with invalid format: keyVals must be an object');\n    }\n\n    if (!messageId && level !== levelDebug) {\n      console.warn('webOSLog called with invalid format: messageId was empty');\n    }\n\n    if (keyVals) {\n      keyVals = JSON.stringify(keyVals);\n    }\n\n    if (window.PalmSystem.PmLogString) {\n      if (level === levelDebug) {\n        // debug only accepts 2 arguments\n        window.PalmSystem.PmLogString(level, null, null, freeText);\n      } else {\n        window.PalmSystem.PmLogString(level, messageId, keyVals, freeText);\n      }\n    } else {\n      console.error('Unable to send log: PmLogString not found in this version of PalmSystem');\n    }\n  }\n};\n/**\n * Logs with PmLogLib at the \"emergency\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nvar emergency = function emergency(messageId, keyVals, freeText) {\n  log(levelEmergency, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"alert\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.emergency = emergency;\n\nvar alert = function alert(messageId, keyVals, freeText) {\n  log(levelAlert, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"critical\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.alert = alert;\n\nvar critical = function critical(messageId, keyVals, freeText) {\n  log(levelCritical, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"error\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.critical = critical;\n\nvar error = function error(messageId, keyVals, freeText) {\n  log(levelError, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"warning\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.error = error;\n\nvar warning = function warning(messageId, keyVals, freeText) {\n  log(levelWarning, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"notice\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.warning = warning;\n\nvar notice = function notice(messageId, keyVals, freeText) {\n  log(levelNotice, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"info\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.notice = notice;\n\nvar info = function info(messageId, keyVals, freeText) {\n  log(levelInfo, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"debug\" level.\n *\n * @function\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.info = info;\n\nvar debug = function debug(freeText) {\n  log(levelDebug, '', '', freeText);\n};\n/**\n * Places a time-stamped performance log entry into the system log using the `PmLogInfoWithClock()`\n * method.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component.\n * @param {String} perfType A string that identifies the type of perf message\n * @param {String} perfGroup A string that identifies the group of the perf message\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.debug = debug;\n\nvar perfLog = function perfLog(messageId, perfType, perfGroup) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (!messageId) {\n      console.warn('PmLogInfoWithClock called with invalid format: messageId was empty');\n    }\n\n    if (window.PalmSystem.PmLogInfoWithClock) {\n      window.PalmSystem.PmLogInfoWithClock(messageId, perfType ? perfType : '', perfGroup ? perfGroup : '');\n    } else {\n      console.error('Unable to send log: PmLogInfoWithClock not found in this version of PalmSystem');\n    }\n  }\n};\n\nexports.perfLog = perfLog;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/webos/pmloglib/pmloglib.js"],"names":["Object","defineProperty","exports","value","perfLog","debug","info","notice","warning","error","critical","alert","emergency","_typeof","obj","Symbol","iterator","constructor","prototype","levelEmergency","levelAlert","levelCritical","levelError","levelWarning","levelNotice","levelInfo","levelDebug","isObject","toString","call","log","level","messageId","keyVals","freeText","window","PalmSystem","msgid","console","warn","JSON","stringify","PmLogString","perfType","perfGroup","PmLogInfoWithClock"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.perfLog = exports.debug = exports.info = exports.notice = exports.warning = exports.error = exports.critical = exports.alert = exports.emergency = void 0;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-disable no-console */\n\n/* global console */\n\n/**\n * Provides a wrapper around PmLogLib logging API\n *\n * @module webos/pmloglib\n * @exports emergency\n * @exports alert\n * @exports critical\n * @exports error\n * @exports warning\n * @exports notice\n * @exports info\n * @exports debug\n * @exports perfLog\n */\n// Log level constants\nvar levelEmergency = 0;\nvar levelAlert = 1;\nvar levelCritical = 2;\nvar levelError = 3;\nvar levelWarning = 4;\nvar levelNotice = 5;\nvar levelInfo = 6;\nvar levelDebug = 7;\n\nvar isObject = function isObject(obj) {\n  return !!obj && _typeof(obj) === 'object' && Object.prototype.toString.call(obj) !== '[object Array]';\n}; // Log function stringifies and escapes keyVals, and passes to PmLogString\n\n\nvar log = function log(level, messageId, keyVals, freeText) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (keyVals && !isObject(keyVals)) {\n      level = levelError;\n      keyVals = {\n        msgid: messageId\n      };\n      messageId = 'MISMATCHED_FMT';\n      freeText = null;\n      console.warn('webOSLog called with invalid format: keyVals must be an object');\n    }\n\n    if (!messageId && level !== levelDebug) {\n      console.warn('webOSLog called with invalid format: messageId was empty');\n    }\n\n    if (keyVals) {\n      keyVals = JSON.stringify(keyVals);\n    }\n\n    if (window.PalmSystem.PmLogString) {\n      if (level === levelDebug) {\n        // debug only accepts 2 arguments\n        window.PalmSystem.PmLogString(level, null, null, freeText);\n      } else {\n        window.PalmSystem.PmLogString(level, messageId, keyVals, freeText);\n      }\n    } else {\n      console.error('Unable to send log: PmLogString not found in this version of PalmSystem');\n    }\n  }\n};\n/**\n * Logs with PmLogLib at the \"emergency\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nvar emergency = function emergency(messageId, keyVals, freeText) {\n  log(levelEmergency, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"alert\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.emergency = emergency;\n\nvar alert = function alert(messageId, keyVals, freeText) {\n  log(levelAlert, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"critical\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.alert = alert;\n\nvar critical = function critical(messageId, keyVals, freeText) {\n  log(levelCritical, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"error\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.critical = critical;\n\nvar error = function error(messageId, keyVals, freeText) {\n  log(levelError, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"warning\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.error = error;\n\nvar warning = function warning(messageId, keyVals, freeText) {\n  log(levelWarning, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"notice\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.warning = warning;\n\nvar notice = function notice(messageId, keyVals, freeText) {\n  log(levelNotice, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"info\" level.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component\n * @param {Object} keyVals Key-value pairs to log\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.notice = notice;\n\nvar info = function info(messageId, keyVals, freeText) {\n  log(levelInfo, messageId, keyVals, freeText);\n};\n/**\n * Logs with PmLogLib at the \"debug\" level.\n *\n * @function\n * @param {String} freeText Text string to log\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.info = info;\n\nvar debug = function debug(freeText) {\n  log(levelDebug, '', '', freeText);\n};\n/**\n * Places a time-stamped performance log entry into the system log using the `PmLogInfoWithClock()`\n * method.\n *\n * @function\n * @param {String} messageId Short string that uniquely identifies the log message within a component.\n * @param {String} perfType A string that identifies the type of perf message\n * @param {String} perfGroup A string that identifies the group of the perf message\n * @returns {undefined}\n * @memberof webos/pmloglib\n * @public\n */\n\n\nexports.debug = debug;\n\nvar perfLog = function perfLog(messageId, perfType, perfGroup) {\n  if (typeof window !== 'undefined' && window.PalmSystem) {\n    if (!messageId) {\n      console.warn('PmLogInfoWithClock called with invalid format: messageId was empty');\n    }\n\n    if (window.PalmSystem.PmLogInfoWithClock) {\n      window.PalmSystem.PmLogInfoWithClock(messageId, perfType ? perfType : '', perfGroup ? perfGroup : '');\n    } else {\n      console.error('Unable to send log: PmLogInfoWithClock not found in this version of PalmSystem');\n    }\n  }\n};\n\nexports.perfLog = perfLog;"]},"metadata":{},"sourceType":"module"}