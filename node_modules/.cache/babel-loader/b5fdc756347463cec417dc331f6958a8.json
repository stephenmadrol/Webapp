{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActivityArranger = exports.AlwaysViewingArranger = void 0;\n\nvar _arrange = require(\"@enact/ui/ViewManager/arrange\");\n\nvar _quadInOut = _interopRequireDefault(require(\"eases/quad-in-out\"));\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*\n * Panel arrangers have a unique design requirement that varies their transition depending on the\n * direction (reverse) of the transition. This takes the two arrangement functions and returns\n * another function that picks which to call based on the value of `reverseTransition`.\n *\n * @param {Function} f forward function\n * @param {Function} b backward function\n * @returns {Function} Arrangement function\n * @private\n */\n\n\nvar forwardBackward = function forwardBackward(f, b) {\n  return function (config) {\n    var f2 = config.reverseTransition ? b : f;\n    f2(config);\n  };\n};\n/*\n * Utility method to apply the same easing and reset the transform before applying `fn`\n *\n * @param   {Function} fn Arrangement function\n * @returns {Function}    Composed arrangement function\n * @private\n */\n\n\nvar base = function base(fn) {\n  return (0, _arrange.reverse)((0, _arrange.ease)(_quadInOut[\"default\"], (0, _arrange.compose)(_arrange.clearTransform, fn)));\n}; // Creating these here since they're composed below in forwardBackward\n\n\nvar slideInRight = base((0, _arrange.slideIn)('right'));\nvar slideOutLeft = base((0, _arrange.slideOut)('left')); // These are the arrangers for AlwaysViewing but also composed in Activity\n\nvar panelEnter = forwardBackward(slideInRight, (0, _arrange.endBy)(0.75, slideInRight));\nvar panelLeave = forwardBackward(slideOutLeft, (0, _arrange.endBy)(0.75, slideOutLeft)); // Always-Viewing Arranger\n\n/**\n * Arranger that slides panels in from the right and out to the left\n *\n * @type {Arranger}\n * @private\n */\n\nvar AlwaysViewingArranger = {\n  enter: panelEnter,\n  leave: panelLeave\n}; // Actvity Arranger\n\n/*\n * Appends a transform that accounts for a single breadcrumb\n *\n * @param  {Node} node      DOM Node\n *\n * @returns {undefined}\n * @private\n */\n\nexports.AlwaysViewingArranger = AlwaysViewingArranger;\n\nvar offsetForBreadcrumbs = function offsetForBreadcrumbs(_ref) {\n  var node = _ref.node;\n  var isFirst = node && node.dataset && node.dataset.index === '0';\n\n  if (!isFirst) {\n    var x = (0, _resolution.unit)((0, _resolution.scale)(_Breadcrumb.breadcrumbWidth), 'rem');\n    (0, _arrange.appendTransform)(\"translateX(\".concat(x, \")\"), {\n      node: node\n    });\n  }\n}; // Adds the data-clip attribute to allow clipping when transitioning between non-zero panels\n// CSS is enforced by Panels.module.less\n\n\nvar clipForBreadcrumbs = function clipForBreadcrumbs(_ref2) {\n  var from = _ref2.from,\n      node = _ref2.node,\n      percent = _ref2.percent,\n      to = _ref2.to;\n  var viewport = node.parentNode;\n\n  if (to === 0 || from === 0 || percent === 0 || percent === 1) {\n    // remove clip when moving to or from the first panel and when a transition is completing\n    delete viewport.dataset.clip;\n  } else {\n    viewport.dataset.clip = 'true';\n  }\n};\n/**\n * Arranger that slides panels in from the right and out to the left allowing space for the single\n * breadcrumb when `to` index is greater than zero.\n *\n * @type {Arranger}\n * @private\n */\n\n\nvar ActivityArranger = {\n  enter: (0, _arrange.compose)(panelEnter, (0, _arrange.reverse)(offsetForBreadcrumbs), clipForBreadcrumbs),\n  leave: (0, _arrange.compose)(panelLeave, offsetForBreadcrumbs),\n  // Need a stay arrangement in case the initial index for ActivityPanels is > 0 so the panel is\n  // correctly offset for the breadcrumbs.\n  stay: (0, _arrange.compose)(_arrange.clearTransform, offsetForBreadcrumbs)\n};\nexports.ActivityArranger = ActivityArranger;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\moonstone\\Panels\\Arrangers.js"],"names":["Object","defineProperty","exports","value","ActivityArranger","AlwaysViewingArranger","_arrange","require","_quadInOut","_interopRequireDefault","_resolution","_Breadcrumb","obj","__esModule","forwardBackward","f","b","config","f2","reverseTransition","base","fn","reverse","ease","compose","clearTransform","slideInRight","slideIn","slideOutLeft","slideOut","panelEnter","endBy","panelLeave","enter","leave","offsetForBreadcrumbs","_ref","node","isFirst","dataset","index","x","unit","scale","breadcrumbWidth","appendTransform","concat","clipForBreadcrumbs","_ref2","from","percent","to","viewport","parentNode","clip","stay"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActivityArranger = exports.AlwaysViewingArranger = void 0;\n\nvar _arrange = require(\"@enact/ui/ViewManager/arrange\");\n\nvar _quadInOut = _interopRequireDefault(require(\"eases/quad-in-out\"));\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*\n * Panel arrangers have a unique design requirement that varies their transition depending on the\n * direction (reverse) of the transition. This takes the two arrangement functions and returns\n * another function that picks which to call based on the value of `reverseTransition`.\n *\n * @param {Function} f forward function\n * @param {Function} b backward function\n * @returns {Function} Arrangement function\n * @private\n */\nvar forwardBackward = function forwardBackward(f, b) {\n  return function (config) {\n    var f2 = config.reverseTransition ? b : f;\n    f2(config);\n  };\n};\n/*\n * Utility method to apply the same easing and reset the transform before applying `fn`\n *\n * @param   {Function} fn Arrangement function\n * @returns {Function}    Composed arrangement function\n * @private\n */\n\n\nvar base = function base(fn) {\n  return (0, _arrange.reverse)((0, _arrange.ease)(_quadInOut[\"default\"], (0, _arrange.compose)(_arrange.clearTransform, fn)));\n}; // Creating these here since they're composed below in forwardBackward\n\n\nvar slideInRight = base((0, _arrange.slideIn)('right'));\nvar slideOutLeft = base((0, _arrange.slideOut)('left')); // These are the arrangers for AlwaysViewing but also composed in Activity\n\nvar panelEnter = forwardBackward(slideInRight, (0, _arrange.endBy)(0.75, slideInRight));\nvar panelLeave = forwardBackward(slideOutLeft, (0, _arrange.endBy)(0.75, slideOutLeft)); // Always-Viewing Arranger\n\n/**\n * Arranger that slides panels in from the right and out to the left\n *\n * @type {Arranger}\n * @private\n */\n\nvar AlwaysViewingArranger = {\n  enter: panelEnter,\n  leave: panelLeave\n}; // Actvity Arranger\n\n/*\n * Appends a transform that accounts for a single breadcrumb\n *\n * @param  {Node} node      DOM Node\n *\n * @returns {undefined}\n * @private\n */\n\nexports.AlwaysViewingArranger = AlwaysViewingArranger;\n\nvar offsetForBreadcrumbs = function offsetForBreadcrumbs(_ref) {\n  var node = _ref.node;\n  var isFirst = node && node.dataset && node.dataset.index === '0';\n\n  if (!isFirst) {\n    var x = (0, _resolution.unit)((0, _resolution.scale)(_Breadcrumb.breadcrumbWidth), 'rem');\n    (0, _arrange.appendTransform)(\"translateX(\".concat(x, \")\"), {\n      node: node\n    });\n  }\n}; // Adds the data-clip attribute to allow clipping when transitioning between non-zero panels\n// CSS is enforced by Panels.module.less\n\n\nvar clipForBreadcrumbs = function clipForBreadcrumbs(_ref2) {\n  var from = _ref2.from,\n      node = _ref2.node,\n      percent = _ref2.percent,\n      to = _ref2.to;\n  var viewport = node.parentNode;\n\n  if (to === 0 || from === 0 || percent === 0 || percent === 1) {\n    // remove clip when moving to or from the first panel and when a transition is completing\n    delete viewport.dataset.clip;\n  } else {\n    viewport.dataset.clip = 'true';\n  }\n};\n/**\n * Arranger that slides panels in from the right and out to the left allowing space for the single\n * breadcrumb when `to` index is greater than zero.\n *\n * @type {Arranger}\n * @private\n */\n\n\nvar ActivityArranger = {\n  enter: (0, _arrange.compose)(panelEnter, (0, _arrange.reverse)(offsetForBreadcrumbs), clipForBreadcrumbs),\n  leave: (0, _arrange.compose)(panelLeave, offsetForBreadcrumbs),\n  // Need a stay arrangement in case the initial index for ActivityPanels is > 0 so the panel is\n  // correctly offset for the breadcrumbs.\n  stay: (0, _arrange.compose)(_arrange.clearTransform, offsetForBreadcrumbs)\n};\nexports.ActivityArranger = ActivityArranger;"]},"metadata":{},"sourceType":"module"}