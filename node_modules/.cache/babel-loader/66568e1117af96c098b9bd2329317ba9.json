{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * LocaleInfo.js - Encode locale-specific defaults\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js Utils.js\n// !data localeinfo\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n/**\n * @class\n * Create a new locale info instance. Locale info instances give information about\n * the default settings for a particular locale. These settings may be overridden\n * by various parts of the code, and should be used as a fall-back setting of last\n * resort. <p>\n * \n * The optional options object holds extra parameters if they are necessary. The\n * current list of supported options are:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the locale info object is fully \n * loaded. When the onLoad option is given, the localeinfo object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If this copy of ilib is pre-assembled and all the data is already available, \n * or if the data was already previously loaded, then this constructor will call\n * the onLoad callback immediately when the initialization is done. \n * If the onLoad option is not given, this class will only attempt to load any\n * missing locale data synchronously.\n * \n * \n * @constructor\n * @see {ilib.setLoaderCallback} for information about registering a loader callback\n * function\n * @param {Locale|string=} locale the locale for which the info is sought, or undefined for\n * @param {Object=} options the locale for which the info is sought, or undefined for\n * the current locale\n */\n\n\nvar LocaleInfo = function LocaleInfo(locale, options) {\n  var sync = true,\n      loadParams = undefined;\n  /**\n    @private \n    @type {{\n  \tcalendar:string,\n  \tclock:string,\n  \tcurrency:string,\n  \tdelimiter: {quotationStart:string,quotationEnd:string,alternateQuotationStart:string,alternateQuotationEnd:string},\n  \tfirstDayOfWeek:number,\n  \tmeridiems:string,\n  \tnumfmt:{\n  \t\tcurrencyFormats:{common:string,commonNegative:string,iso:string,isoNegative:string},\n  \t\tdecimalChar:string,\n  \t\texponential:string,\n  \t\tgroupChar:string,\n  \t\tnegativenumFmt:string,\n  \t\tnegativepctFmt:string,\n  \t\tpctChar:string,\n  \t\tpctFmt:string,\n  \t\tprigroupSize:number,\n  \t\troundingMode:string,\n  \t\tscript:string,\n  \t\tsecgroupSize:number,\n  \t\tuseNative:boolean\n  \t},\n  \ttimezone:string,\n  \tunits:string,\n  \tweekendEnd:number,\n  \tweekendStart:number,\n  \tpaperSizes:{regular:string}\n    }}\n  */\n\n  this.info = LocaleInfo.defaultInfo;\n\n  switch (_typeof(locale)) {\n    case \"string\":\n      this.locale = new Locale(locale);\n      break;\n\n    default:\n    case \"undefined\":\n      this.locale = new Locale();\n      break;\n\n    case \"object\":\n      this.locale = locale;\n      break;\n  }\n\n  if (options) {\n    if (typeof options.sync !== 'undefined') {\n      sync = options.sync == true;\n    }\n\n    if (typeof options.loadParams !== 'undefined') {\n      loadParams = options.loadParams;\n    }\n  }\n\n  if (!ilib.data.cache.LocaleInfo) {\n    ilib.data.cache.LocaleInfo = {};\n  }\n\n  Utils.loadData({\n    object: \"LocaleInfo\",\n    locale: this.locale,\n    name: \"localeinfo.json\",\n    sync: sync,\n    loadParams: loadParams,\n    callback: ilib.bind(this, function (info) {\n      if (!info) {\n        info = LocaleInfo.defaultInfo;\n        var spec = this.locale.getSpec().replace(/-/g, \"_\");\n        ilib.data.cache.LocaleInfo[spec] = info;\n      }\n\n      this.info = info;\n\n      if (options && typeof options.onLoad === 'function') {\n        options.onLoad(this);\n      }\n    })\n  });\n};\n\nLocaleInfo.defaultInfo = ilib.data.localeinfo;\nLocaleInfo.defaultInfo = LocaleInfo.defaultInfo || {\n  \"calendar\": \"gregorian\",\n  \"clock\": \"24\",\n  \"currency\": \"USD\",\n  \"delimiter\": {\n    \"quotationStart\": \"“\",\n    \"quotationEnd\": \"”\",\n    \"alternateQuotationStart\": \"‘\",\n    \"alternateQuotationEnd\": \"’\"\n  },\n  \"firstDayOfWeek\": 1,\n  \"meridiems\": \"gregorian\",\n  \"numfmt\": {\n    \"script\": \"Latn\",\n    \"decimalChar\": \".\",\n    \"groupChar\": \",\",\n    \"pctChar\": \"%\",\n    \"exponential\": \"E\",\n    \"prigroupSize\": 3,\n    \"currencyFormats\": {\n      \"common\": \"{s} {n}\",\n      \"commonNegative\": \"-{s} {n}\",\n      \"iso\": \"{s} {n}\",\n      \"isoNegative\": \"({s} {n})\"\n    },\n    \"negativenumFmt\": \"-{n}\",\n    \"pctFmt\": \"{n}%\",\n    \"negativepctFmt\": \"-{n}%\",\n    \"roundingMode\": \"halfdown\",\n    \"useNative\": false\n  },\n  \"paperSizes\": {\n    \"regular\": \"A4\"\n  },\n  \"timezone\": \"Etc/UTC\",\n  \"units\": \"metric\",\n  \"weekendEnd\": 0,\n  \"weekendStart\": 6\n};\nLocaleInfo.prototype = {\n  /**\n   * Return the name of the locale's language in English.\n   * @returns {string} the name of the locale's language in English\n   */\n  getLanguageName: function getLanguageName() {\n    return this.info[\"language.name\"];\n  },\n\n  /**\n   * Return the name of the locale's region in English. If the locale\n   * has no region, this returns undefined.\n   * \n   * @returns {string|undefined} the name of the locale's region in English\n   */\n  getRegionName: function getRegionName() {\n    return this.info[\"region.name\"];\n  },\n\n  /**\n  * Return whether this locale commonly uses the 12- or the 24-hour clock.\n  *  \n  * @returns {string} \"12\" if the locale commonly uses a 12-hour clock, or \"24\"\n  * if the locale commonly uses a 24-hour clock. \n  */\n  getClock: function getClock() {\n    return this.info.clock;\n  },\n\n  /**\n   * Return the locale that this info object was created with.\n   * @returns {Locale} The locale spec of the locale used to construct this info instance\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /**\n   * Return the name of the measuring system that is commonly used in the given locale.\n   * Valid values are \"uscustomary\", \"imperial\", and \"metric\".\n   * \n   * @returns {string} The name of the measuring system commonly used in the locale\n   */\n  getUnits: function getUnits() {\n    return this.info.units;\n  },\n\n  /**\n   * Return the name of the calendar that is commonly used in the given locale.\n   * \n   * @returns {string} The name of the calendar commonly used in the locale\n   */\n  getCalendar: function getCalendar() {\n    return this.info.calendar;\n  },\n\n  /**\n   * Return the day of week that starts weeks in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars \n   * should be displayed and weeks calculated with the day of week returned from this \n   * function as the first day of the week.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getFirstDayOfWeek: function getFirstDayOfWeek() {\n    return this.info.firstDayOfWeek;\n  },\n\n  /**\n   * Return the day of week that starts weekend in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getWeekEndStart: function getWeekEndStart() {\n    return this.info.weekendStart;\n  },\n\n  /**\n   * Return the day of week that starts weekend in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getWeekEndEnd: function getWeekEndEnd() {\n    return this.info.weekendEnd;\n  },\n\n  /**\n   * Return the default time zone for this locale. Many locales span across multiple\n   * time zones. In this case, the time zone with the largest population is chosen\n   * to represent the locale. This is obviously not that accurate, but then again,\n   * this method's return value should only be used as a default anyways.\n   * @returns {string} the default time zone for this locale.\n   */\n  getTimeZone: function getTimeZone() {\n    return this.info.timezone;\n  },\n\n  /**\n   * Return the decimal separator for formatted numbers in this locale.\n   * @returns {string} the decimal separator char\n   */\n  getDecimalSeparator: function getDecimalSeparator() {\n    return this.info.numfmt.decimalChar;\n  },\n\n  /**\n   * Return the decimal separator for formatted numbers in this locale for native script.\n   * @returns {string} the decimal separator char\n   */\n  getNativeDecimalSeparator: function getNativeDecimalSeparator() {\n    return this.info.native_numfmt && this.info.native_numfmt.decimalChar || this.info.numfmt.decimalChar;\n  },\n\n  /**\n   * Return the separator character used to separate groups of digits on the \n   * integer side of the decimal character.\n   * @returns {string} the grouping separator char\n   */\n  getGroupingSeparator: function getGroupingSeparator() {\n    return this.info.numfmt.groupChar;\n  },\n\n  /**\n   * Return the separator character used to separate groups of digits on the \n   * integer side of the decimal character for the native script if present other than the default script.\n   * @returns {string} the grouping separator char\n   */\n  getNativeGroupingSeparator: function getNativeGroupingSeparator() {\n    return this.info.native_numfmt && this.info.native_numfmt.groupChar || this.info.numfmt.groupChar;\n  },\n\n  /**\n   * Return the minimum number of digits grouped together on the integer side \n   * for the first (primary) group. \n   * In western European cultures, groupings are in 1000s, so the number of digits\n   * is 3. \n   * @returns {number} the number of digits in a primary grouping, or 0 for no grouping\n   */\n  getPrimaryGroupingDigits: function getPrimaryGroupingDigits() {\n    return typeof this.info.numfmt.prigroupSize !== 'undefined' && this.info.numfmt.prigroupSize || 0;\n  },\n\n  /**\n   * Return the minimum number of digits grouped together on the integer side\n   * for the second or more (secondary) group.<p>\n   *   \n   * In western European cultures, all groupings are by 1000s, so the secondary\n   * size should be 0 because there is no secondary size. In general, if this \n   * method returns 0, then all groupings are of the primary size.<p> \n   * \n   * For some other cultures, the first grouping (primary)\n   * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be\n   * written as: \"1,00,000\".\n   * \n   * @returns {number} the number of digits in a secondary grouping, or 0 for no \n   * secondary grouping. \n   */\n  getSecondaryGroupingDigits: function getSecondaryGroupingDigits() {\n    return this.info.numfmt.secgroupSize || 0;\n  },\n\n  /**\n   * Return the format template used to format percentages in this locale.\n   * @returns {string} the format template for formatting percentages\n   */\n  getPercentageFormat: function getPercentageFormat() {\n    return this.info.numfmt.pctFmt;\n  },\n\n  /**\n   * Return the format template used to format percentages in this locale\n   * with negative amounts.\n   * @returns {string} the format template for formatting percentages\n   */\n  getNegativePercentageFormat: function getNegativePercentageFormat() {\n    return this.info.numfmt.negativepctFmt;\n  },\n\n  /**\n   * Return the symbol used for percentages in this locale.\n   * @returns {string} the symbol used for percentages in this locale\n   */\n  getPercentageSymbol: function getPercentageSymbol() {\n    return this.info.numfmt.pctChar || \"%\";\n  },\n\n  /**\n   * Return the symbol used for exponential in this locale.\n   * @returns {string} the symbol used for exponential in this locale\n   */\n  getExponential: function getExponential() {\n    return this.info.numfmt.exponential;\n  },\n\n  /**\n   * Return the symbol used for exponential in this locale for native script.\n   * @returns {string} the symbol used for exponential in this locale for native script\n   */\n  getNativeExponential: function getNativeExponential() {\n    return this.info.native_numfmt && this.info.native_numfmt.exponential || this.info.numfmt.exponential;\n  },\n\n  /**\n   * Return the symbol used for percentages in this locale for native script.\n   * @returns {string} the symbol used for percentages in this locale for native script\n   */\n  getNativePercentageSymbol: function getNativePercentageSymbol() {\n    return this.info.native_numfmt && this.info.native_numfmt.pctChar || this.info.numfmt.pctChar || \"%\";\n  },\n\n  /**\n   * Return the format template used to format negative numbers in this locale.\n   * @returns {string} the format template for formatting negative numbers\n   */\n  getNegativeNumberFormat: function getNegativeNumberFormat() {\n    return this.info.numfmt.negativenumFmt;\n  },\n\n  /**\n   * Return an object containing the format templates for formatting currencies\n   * in this locale. The object has a number of properties in it that each are\n   * a particular style of format. Normally, this contains a \"common\" and an \"iso\"\n   * style, but may contain others in the future.\n   * @returns {Object} an object containing the format templates for currencies\n   */\n  getCurrencyFormats: function getCurrencyFormats() {\n    return this.info.numfmt.currencyFormats;\n  },\n\n  /**\n   * Return the currency that is legal in the locale, or which is most commonly \n   * used in regular commerce.\n   * @returns {string} the ISO 4217 code for the currency of this locale\n   */\n  getCurrency: function getCurrency() {\n    return this.info.currency;\n  },\n\n  /**\n   * Return a string that describes the style of digits used by this locale.\n   * Possible return values are:\n   * <ul>\n   * <li><i>western</i> - uses the regular western 10-based digits 0 through 9\n   * <li><i>optional</i> - native 10-based digits exist, but in modern usage,\n   * this locale most often uses western digits\n   * <li><i>native</i> - native 10-based native digits exist and are used\n   * regularly by this locale\n   * <li><i>custom</i> - uses native digits by default that are not 10-based\n   * </ul>\n   * @returns {string} string that describes the style of digits used in this locale\n   */\n  getDigitsStyle: function getDigitsStyle() {\n    if (this.info.numfmt && this.info.numfmt.useNative) {\n      return \"native\";\n    }\n\n    if (typeof this.info.native_numfmt !== 'undefined') {\n      return \"optional\";\n    }\n\n    return \"western\";\n  },\n\n  /**\n   * Return the digits of the default script if they are defined.\n   * If not defined, the default should be the regular \"Arabic numerals\"\n   * used in the Latin script. (0-9)\n   * @returns {string|undefined} the digits used in the default script \n   */\n  getDigits: function getDigits() {\n    return this.info.numfmt.digits;\n  },\n\n  /**\n   * Return the digits of the native script if they are defined. \n   * @returns {string|undefined} the digits used in the default script \n   */\n  getNativeDigits: function getNativeDigits() {\n    return this.info.numfmt.useNative && this.info.numfmt.digits || this.info.native_numfmt && this.info.native_numfmt.digits;\n  },\n\n  /**\n   * If this locale typically uses a different type of rounding for numeric\n   * formatting other than halfdown, especially for currency, then it can be \n   * specified in the localeinfo. If the locale uses the default, then this \n   * method returns undefined. The locale's rounding method overrides the \n   * rounding method for the currency itself, which can sometimes shared \n   * between various locales so it is less specific.\n   * @returns {string} the name of the rounding mode typically used in this\n   * locale, or \"halfdown\" if the locale does not override the default\n   */\n  getRoundingMode: function getRoundingMode() {\n    return this.info.numfmt.roundingMode;\n  },\n\n  /**\n   * Return the default script used to write text in the language of this \n   * locale. Text for most languages is written in only one script, but there\n   * are some languages where the text can be written in a number of scripts,\n   * depending on a variety of things such as the region, ethnicity, religion, \n   * etc. of the author. This method returns the default script for the\n   * locale, in which the language is most commonly written.<p> \n   * \n   * The script is returned as an ISO 15924 4-letter code.\n   * \n   * @returns {string} the ISO 15924 code for the default script used to write\n   * text in this locale \n   */\n  getDefaultScript: function getDefaultScript() {\n    return this.info.scripts ? this.info.scripts[0] : \"Latn\";\n  },\n\n  /**\n   * Return the script used for the current locale. If the current locale\n   * explicitly defines a script, then this script is returned. If not, then \n   * the default script for the locale is returned.\n   * \n   * @see LocaleInfo.getDefaultScript\n   * @returns {string} the ISO 15924 code for the script used to write\n   * text in this locale\n   */\n  getScript: function getScript() {\n    return this.locale.getScript() || this.getDefaultScript();\n  },\n\n  /**\n   * Return an array of script codes which are used to write text in the current\n   * language. Text for most languages is written in only one script, but there\n   * are some languages where the text can be written in a number of scripts,\n   * depending on a variety of things such as the region, ethnicity, religion, \n   * etc. of the author. This method returns an array of script codes in which \n   * the language is commonly written.\n   * \n   * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used \n   * to write text in this language\n   */\n  getAllScripts: function getAllScripts() {\n    return this.info.scripts || [\"Latn\"];\n  },\n\n  /**\n   * Return the default style of meridiems used in this locale. Meridiems are \n   * times of day like AM/PM. In a few locales with some calendars, for example\n   * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be\n   * split into different segments than simple AM/PM as in the Gregorian \n   * calendar. Only a few locales are like that. For most locales, formatting \n   * a Gregorian date will use the regular Gregorian AM/PM meridiems.\n   *  \n   * @returns {string} the default meridiems style used in this locale. Possible\n   * values are \"gregorian\", \"chinese\", and \"ethiopic\"\n   */\n  getMeridiemsStyle: function getMeridiemsStyle() {\n    return this.info.meridiems || \"gregorian\";\n  },\n\n  /**\n   * Return the default PaperSize information in this locale.\n   * @returns {string} default PaperSize in this locale\n   */\n  getPaperSize: function getPaperSize() {\n    return this.info.paperSizes.regular;\n  },\n\n  /**\n   * Return the default Delimiter QuotationStart information in this locale.\n   * @returns {string} default QuotationStart in this locale\n   */\n  getDelimiterQuotationStart: function getDelimiterQuotationStart() {\n    return this.info.delimiter.quotationStart;\n  },\n\n  /**\n   * Return the default Delimiter QuotationEnd information in this locale.\n   * @returns {string} default QuotationEnd in this locale\n   */\n  getDelimiterQuotationEnd: function getDelimiterQuotationEnd() {\n    return this.info.delimiter.quotationEnd;\n  }\n};\nmodule.exports = LocaleInfo;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/LocaleInfo.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","Utils","Locale","LocaleInfo","locale","options","sync","loadParams","undefined","info","defaultInfo","data","cache","loadData","object","name","callback","bind","spec","getSpec","replace","onLoad","localeinfo","getLanguageName","getRegionName","getClock","clock","getLocale","getUnits","units","getCalendar","calendar","getFirstDayOfWeek","firstDayOfWeek","getWeekEndStart","weekendStart","getWeekEndEnd","weekendEnd","getTimeZone","timezone","getDecimalSeparator","numfmt","decimalChar","getNativeDecimalSeparator","native_numfmt","getGroupingSeparator","groupChar","getNativeGroupingSeparator","getPrimaryGroupingDigits","prigroupSize","getSecondaryGroupingDigits","secgroupSize","getPercentageFormat","pctFmt","getNegativePercentageFormat","negativepctFmt","getPercentageSymbol","pctChar","getExponential","exponential","getNativeExponential","getNativePercentageSymbol","getNegativeNumberFormat","negativenumFmt","getCurrencyFormats","currencyFormats","getCurrency","currency","getDigitsStyle","useNative","getDigits","digits","getNativeDigits","getRoundingMode","roundingMode","getDefaultScript","scripts","getScript","getAllScripts","getMeridiemsStyle","meridiems","getPaperSize","paperSizes","regular","getDelimiterQuotationStart","delimiter","quotationStart","getDelimiterQuotationEnd","quotationEnd","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * LocaleInfo.js - Encode locale-specific defaults\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js Utils.js\n// !data localeinfo\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n/**\n * @class\n * Create a new locale info instance. Locale info instances give information about\n * the default settings for a particular locale. These settings may be overridden\n * by various parts of the code, and should be used as a fall-back setting of last\n * resort. <p>\n * \n * The optional options object holds extra parameters if they are necessary. The\n * current list of supported options are:\n * \n * <ul>\n * <li><i>onLoad</i> - a callback function to call when the locale info object is fully \n * loaded. When the onLoad option is given, the localeinfo object will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while. \n *\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If this copy of ilib is pre-assembled and all the data is already available, \n * or if the data was already previously loaded, then this constructor will call\n * the onLoad callback immediately when the initialization is done. \n * If the onLoad option is not given, this class will only attempt to load any\n * missing locale data synchronously.\n * \n * \n * @constructor\n * @see {ilib.setLoaderCallback} for information about registering a loader callback\n * function\n * @param {Locale|string=} locale the locale for which the info is sought, or undefined for\n * @param {Object=} options the locale for which the info is sought, or undefined for\n * the current locale\n */\n\n\nvar LocaleInfo = function LocaleInfo(locale, options) {\n  var sync = true,\n      loadParams = undefined;\n  /**\n    @private \n    @type {{\n  \tcalendar:string,\n  \tclock:string,\n  \tcurrency:string,\n  \tdelimiter: {quotationStart:string,quotationEnd:string,alternateQuotationStart:string,alternateQuotationEnd:string},\n  \tfirstDayOfWeek:number,\n  \tmeridiems:string,\n  \tnumfmt:{\n  \t\tcurrencyFormats:{common:string,commonNegative:string,iso:string,isoNegative:string},\n  \t\tdecimalChar:string,\n  \t\texponential:string,\n  \t\tgroupChar:string,\n  \t\tnegativenumFmt:string,\n  \t\tnegativepctFmt:string,\n  \t\tpctChar:string,\n  \t\tpctFmt:string,\n  \t\tprigroupSize:number,\n  \t\troundingMode:string,\n  \t\tscript:string,\n  \t\tsecgroupSize:number,\n  \t\tuseNative:boolean\n  \t},\n  \ttimezone:string,\n  \tunits:string,\n  \tweekendEnd:number,\n  \tweekendStart:number,\n  \tpaperSizes:{regular:string}\n    }}\n  */\n\n  this.info = LocaleInfo.defaultInfo;\n\n  switch (_typeof(locale)) {\n    case \"string\":\n      this.locale = new Locale(locale);\n      break;\n\n    default:\n    case \"undefined\":\n      this.locale = new Locale();\n      break;\n\n    case \"object\":\n      this.locale = locale;\n      break;\n  }\n\n  if (options) {\n    if (typeof options.sync !== 'undefined') {\n      sync = options.sync == true;\n    }\n\n    if (typeof options.loadParams !== 'undefined') {\n      loadParams = options.loadParams;\n    }\n  }\n\n  if (!ilib.data.cache.LocaleInfo) {\n    ilib.data.cache.LocaleInfo = {};\n  }\n\n  Utils.loadData({\n    object: \"LocaleInfo\",\n    locale: this.locale,\n    name: \"localeinfo.json\",\n    sync: sync,\n    loadParams: loadParams,\n    callback: ilib.bind(this, function (info) {\n      if (!info) {\n        info = LocaleInfo.defaultInfo;\n        var spec = this.locale.getSpec().replace(/-/g, \"_\");\n        ilib.data.cache.LocaleInfo[spec] = info;\n      }\n\n      this.info = info;\n\n      if (options && typeof options.onLoad === 'function') {\n        options.onLoad(this);\n      }\n    })\n  });\n};\n\nLocaleInfo.defaultInfo = ilib.data.localeinfo;\nLocaleInfo.defaultInfo = LocaleInfo.defaultInfo || {\n  \"calendar\": \"gregorian\",\n  \"clock\": \"24\",\n  \"currency\": \"USD\",\n  \"delimiter\": {\n    \"quotationStart\": \"“\",\n    \"quotationEnd\": \"”\",\n    \"alternateQuotationStart\": \"‘\",\n    \"alternateQuotationEnd\": \"’\"\n  },\n  \"firstDayOfWeek\": 1,\n  \"meridiems\": \"gregorian\",\n  \"numfmt\": {\n    \"script\": \"Latn\",\n    \"decimalChar\": \".\",\n    \"groupChar\": \",\",\n    \"pctChar\": \"%\",\n    \"exponential\": \"E\",\n    \"prigroupSize\": 3,\n    \"currencyFormats\": {\n      \"common\": \"{s} {n}\",\n      \"commonNegative\": \"-{s} {n}\",\n      \"iso\": \"{s} {n}\",\n      \"isoNegative\": \"({s} {n})\"\n    },\n    \"negativenumFmt\": \"-{n}\",\n    \"pctFmt\": \"{n}%\",\n    \"negativepctFmt\": \"-{n}%\",\n    \"roundingMode\": \"halfdown\",\n    \"useNative\": false\n  },\n  \"paperSizes\": {\n    \"regular\": \"A4\"\n  },\n  \"timezone\": \"Etc/UTC\",\n  \"units\": \"metric\",\n  \"weekendEnd\": 0,\n  \"weekendStart\": 6\n};\nLocaleInfo.prototype = {\n  /**\n   * Return the name of the locale's language in English.\n   * @returns {string} the name of the locale's language in English\n   */\n  getLanguageName: function getLanguageName() {\n    return this.info[\"language.name\"];\n  },\n\n  /**\n   * Return the name of the locale's region in English. If the locale\n   * has no region, this returns undefined.\n   * \n   * @returns {string|undefined} the name of the locale's region in English\n   */\n  getRegionName: function getRegionName() {\n    return this.info[\"region.name\"];\n  },\n\n  /**\n  * Return whether this locale commonly uses the 12- or the 24-hour clock.\n  *  \n  * @returns {string} \"12\" if the locale commonly uses a 12-hour clock, or \"24\"\n  * if the locale commonly uses a 24-hour clock. \n  */\n  getClock: function getClock() {\n    return this.info.clock;\n  },\n\n  /**\n   * Return the locale that this info object was created with.\n   * @returns {Locale} The locale spec of the locale used to construct this info instance\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /**\n   * Return the name of the measuring system that is commonly used in the given locale.\n   * Valid values are \"uscustomary\", \"imperial\", and \"metric\".\n   * \n   * @returns {string} The name of the measuring system commonly used in the locale\n   */\n  getUnits: function getUnits() {\n    return this.info.units;\n  },\n\n  /**\n   * Return the name of the calendar that is commonly used in the given locale.\n   * \n   * @returns {string} The name of the calendar commonly used in the locale\n   */\n  getCalendar: function getCalendar() {\n    return this.info.calendar;\n  },\n\n  /**\n   * Return the day of week that starts weeks in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars \n   * should be displayed and weeks calculated with the day of week returned from this \n   * function as the first day of the week.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getFirstDayOfWeek: function getFirstDayOfWeek() {\n    return this.info.firstDayOfWeek;\n  },\n\n  /**\n   * Return the day of week that starts weekend in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getWeekEndStart: function getWeekEndStart() {\n    return this.info.weekendStart;\n  },\n\n  /**\n   * Return the day of week that starts weekend in the current locale. Days are still\n   * numbered the standard way with 0 for Sunday through 6 for Saturday.\n   * \n   * @returns {number} the day of the week that starts weeks in the current locale.\n   */\n  getWeekEndEnd: function getWeekEndEnd() {\n    return this.info.weekendEnd;\n  },\n\n  /**\n   * Return the default time zone for this locale. Many locales span across multiple\n   * time zones. In this case, the time zone with the largest population is chosen\n   * to represent the locale. This is obviously not that accurate, but then again,\n   * this method's return value should only be used as a default anyways.\n   * @returns {string} the default time zone for this locale.\n   */\n  getTimeZone: function getTimeZone() {\n    return this.info.timezone;\n  },\n\n  /**\n   * Return the decimal separator for formatted numbers in this locale.\n   * @returns {string} the decimal separator char\n   */\n  getDecimalSeparator: function getDecimalSeparator() {\n    return this.info.numfmt.decimalChar;\n  },\n\n  /**\n   * Return the decimal separator for formatted numbers in this locale for native script.\n   * @returns {string} the decimal separator char\n   */\n  getNativeDecimalSeparator: function getNativeDecimalSeparator() {\n    return this.info.native_numfmt && this.info.native_numfmt.decimalChar || this.info.numfmt.decimalChar;\n  },\n\n  /**\n   * Return the separator character used to separate groups of digits on the \n   * integer side of the decimal character.\n   * @returns {string} the grouping separator char\n   */\n  getGroupingSeparator: function getGroupingSeparator() {\n    return this.info.numfmt.groupChar;\n  },\n\n  /**\n   * Return the separator character used to separate groups of digits on the \n   * integer side of the decimal character for the native script if present other than the default script.\n   * @returns {string} the grouping separator char\n   */\n  getNativeGroupingSeparator: function getNativeGroupingSeparator() {\n    return this.info.native_numfmt && this.info.native_numfmt.groupChar || this.info.numfmt.groupChar;\n  },\n\n  /**\n   * Return the minimum number of digits grouped together on the integer side \n   * for the first (primary) group. \n   * In western European cultures, groupings are in 1000s, so the number of digits\n   * is 3. \n   * @returns {number} the number of digits in a primary grouping, or 0 for no grouping\n   */\n  getPrimaryGroupingDigits: function getPrimaryGroupingDigits() {\n    return typeof this.info.numfmt.prigroupSize !== 'undefined' && this.info.numfmt.prigroupSize || 0;\n  },\n\n  /**\n   * Return the minimum number of digits grouped together on the integer side\n   * for the second or more (secondary) group.<p>\n   *   \n   * In western European cultures, all groupings are by 1000s, so the secondary\n   * size should be 0 because there is no secondary size. In general, if this \n   * method returns 0, then all groupings are of the primary size.<p> \n   * \n   * For some other cultures, the first grouping (primary)\n   * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be\n   * written as: \"1,00,000\".\n   * \n   * @returns {number} the number of digits in a secondary grouping, or 0 for no \n   * secondary grouping. \n   */\n  getSecondaryGroupingDigits: function getSecondaryGroupingDigits() {\n    return this.info.numfmt.secgroupSize || 0;\n  },\n\n  /**\n   * Return the format template used to format percentages in this locale.\n   * @returns {string} the format template for formatting percentages\n   */\n  getPercentageFormat: function getPercentageFormat() {\n    return this.info.numfmt.pctFmt;\n  },\n\n  /**\n   * Return the format template used to format percentages in this locale\n   * with negative amounts.\n   * @returns {string} the format template for formatting percentages\n   */\n  getNegativePercentageFormat: function getNegativePercentageFormat() {\n    return this.info.numfmt.negativepctFmt;\n  },\n\n  /**\n   * Return the symbol used for percentages in this locale.\n   * @returns {string} the symbol used for percentages in this locale\n   */\n  getPercentageSymbol: function getPercentageSymbol() {\n    return this.info.numfmt.pctChar || \"%\";\n  },\n\n  /**\n   * Return the symbol used for exponential in this locale.\n   * @returns {string} the symbol used for exponential in this locale\n   */\n  getExponential: function getExponential() {\n    return this.info.numfmt.exponential;\n  },\n\n  /**\n   * Return the symbol used for exponential in this locale for native script.\n   * @returns {string} the symbol used for exponential in this locale for native script\n   */\n  getNativeExponential: function getNativeExponential() {\n    return this.info.native_numfmt && this.info.native_numfmt.exponential || this.info.numfmt.exponential;\n  },\n\n  /**\n   * Return the symbol used for percentages in this locale for native script.\n   * @returns {string} the symbol used for percentages in this locale for native script\n   */\n  getNativePercentageSymbol: function getNativePercentageSymbol() {\n    return this.info.native_numfmt && this.info.native_numfmt.pctChar || this.info.numfmt.pctChar || \"%\";\n  },\n\n  /**\n   * Return the format template used to format negative numbers in this locale.\n   * @returns {string} the format template for formatting negative numbers\n   */\n  getNegativeNumberFormat: function getNegativeNumberFormat() {\n    return this.info.numfmt.negativenumFmt;\n  },\n\n  /**\n   * Return an object containing the format templates for formatting currencies\n   * in this locale. The object has a number of properties in it that each are\n   * a particular style of format. Normally, this contains a \"common\" and an \"iso\"\n   * style, but may contain others in the future.\n   * @returns {Object} an object containing the format templates for currencies\n   */\n  getCurrencyFormats: function getCurrencyFormats() {\n    return this.info.numfmt.currencyFormats;\n  },\n\n  /**\n   * Return the currency that is legal in the locale, or which is most commonly \n   * used in regular commerce.\n   * @returns {string} the ISO 4217 code for the currency of this locale\n   */\n  getCurrency: function getCurrency() {\n    return this.info.currency;\n  },\n\n  /**\n   * Return a string that describes the style of digits used by this locale.\n   * Possible return values are:\n   * <ul>\n   * <li><i>western</i> - uses the regular western 10-based digits 0 through 9\n   * <li><i>optional</i> - native 10-based digits exist, but in modern usage,\n   * this locale most often uses western digits\n   * <li><i>native</i> - native 10-based native digits exist and are used\n   * regularly by this locale\n   * <li><i>custom</i> - uses native digits by default that are not 10-based\n   * </ul>\n   * @returns {string} string that describes the style of digits used in this locale\n   */\n  getDigitsStyle: function getDigitsStyle() {\n    if (this.info.numfmt && this.info.numfmt.useNative) {\n      return \"native\";\n    }\n\n    if (typeof this.info.native_numfmt !== 'undefined') {\n      return \"optional\";\n    }\n\n    return \"western\";\n  },\n\n  /**\n   * Return the digits of the default script if they are defined.\n   * If not defined, the default should be the regular \"Arabic numerals\"\n   * used in the Latin script. (0-9)\n   * @returns {string|undefined} the digits used in the default script \n   */\n  getDigits: function getDigits() {\n    return this.info.numfmt.digits;\n  },\n\n  /**\n   * Return the digits of the native script if they are defined. \n   * @returns {string|undefined} the digits used in the default script \n   */\n  getNativeDigits: function getNativeDigits() {\n    return this.info.numfmt.useNative && this.info.numfmt.digits || this.info.native_numfmt && this.info.native_numfmt.digits;\n  },\n\n  /**\n   * If this locale typically uses a different type of rounding for numeric\n   * formatting other than halfdown, especially for currency, then it can be \n   * specified in the localeinfo. If the locale uses the default, then this \n   * method returns undefined. The locale's rounding method overrides the \n   * rounding method for the currency itself, which can sometimes shared \n   * between various locales so it is less specific.\n   * @returns {string} the name of the rounding mode typically used in this\n   * locale, or \"halfdown\" if the locale does not override the default\n   */\n  getRoundingMode: function getRoundingMode() {\n    return this.info.numfmt.roundingMode;\n  },\n\n  /**\n   * Return the default script used to write text in the language of this \n   * locale. Text for most languages is written in only one script, but there\n   * are some languages where the text can be written in a number of scripts,\n   * depending on a variety of things such as the region, ethnicity, religion, \n   * etc. of the author. This method returns the default script for the\n   * locale, in which the language is most commonly written.<p> \n   * \n   * The script is returned as an ISO 15924 4-letter code.\n   * \n   * @returns {string} the ISO 15924 code for the default script used to write\n   * text in this locale \n   */\n  getDefaultScript: function getDefaultScript() {\n    return this.info.scripts ? this.info.scripts[0] : \"Latn\";\n  },\n\n  /**\n   * Return the script used for the current locale. If the current locale\n   * explicitly defines a script, then this script is returned. If not, then \n   * the default script for the locale is returned.\n   * \n   * @see LocaleInfo.getDefaultScript\n   * @returns {string} the ISO 15924 code for the script used to write\n   * text in this locale\n   */\n  getScript: function getScript() {\n    return this.locale.getScript() || this.getDefaultScript();\n  },\n\n  /**\n   * Return an array of script codes which are used to write text in the current\n   * language. Text for most languages is written in only one script, but there\n   * are some languages where the text can be written in a number of scripts,\n   * depending on a variety of things such as the region, ethnicity, religion, \n   * etc. of the author. This method returns an array of script codes in which \n   * the language is commonly written.\n   * \n   * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used \n   * to write text in this language\n   */\n  getAllScripts: function getAllScripts() {\n    return this.info.scripts || [\"Latn\"];\n  },\n\n  /**\n   * Return the default style of meridiems used in this locale. Meridiems are \n   * times of day like AM/PM. In a few locales with some calendars, for example\n   * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be\n   * split into different segments than simple AM/PM as in the Gregorian \n   * calendar. Only a few locales are like that. For most locales, formatting \n   * a Gregorian date will use the regular Gregorian AM/PM meridiems.\n   *  \n   * @returns {string} the default meridiems style used in this locale. Possible\n   * values are \"gregorian\", \"chinese\", and \"ethiopic\"\n   */\n  getMeridiemsStyle: function getMeridiemsStyle() {\n    return this.info.meridiems || \"gregorian\";\n  },\n\n  /**\n   * Return the default PaperSize information in this locale.\n   * @returns {string} default PaperSize in this locale\n   */\n  getPaperSize: function getPaperSize() {\n    return this.info.paperSizes.regular;\n  },\n\n  /**\n   * Return the default Delimiter QuotationStart information in this locale.\n   * @returns {string} default QuotationStart in this locale\n   */\n  getDelimiterQuotationStart: function getDelimiterQuotationStart() {\n    return this.info.delimiter.quotationStart;\n  },\n\n  /**\n   * Return the default Delimiter QuotationEnd information in this locale.\n   * @returns {string} default QuotationEnd in this locale\n   */\n  getDelimiterQuotationEnd: function getDelimiterQuotationEnd() {\n    return this.info.delimiter.quotationEnd;\n  }\n};\nmodule.exports = LocaleInfo;"]},"metadata":{},"sourceType":"module"}