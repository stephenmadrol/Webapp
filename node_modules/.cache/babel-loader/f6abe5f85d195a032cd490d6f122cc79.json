{"ast":null,"code":"\"use strict\";\n/*\n * islamicDate.js - Represent a date in the Islamic calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nMathUtils.js\nSearchUtils.js\nCalendar.js\nIslamicCal.js\nIslamicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar IslamicRataDie = require(\"./IslamicRataDie.js\");\n\nvar IslamicCal = require(\"./IslamicCal.js\");\n/**\n * @class\n * Construct a new civil Islamic date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n * \n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * If called with another Islamic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date\n */\n\n\nvar IslamicDate = function IslamicDate(params) {\n  this.cal = new IslamicCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nIslamicDate.prototype = new IDate({\n  noinstance: true\n});\nIslamicDate.prototype.parent = IDate;\nIslamicDate.prototype.constructor = IslamicDate;\n/**\n * Initialize the date\n * @private\n */\n\nIslamicDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Islamic calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 to 12 (December).\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 30.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 355.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nIslamicDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\n\nIslamicDate.cumMonthLengths = [0,\n/* Muharram */\n30,\n/* Saffar */\n59,\n/* Rabi'I */\n89,\n/* Rabi'II */\n118,\n/* Jumada I */\n148,\n/* Jumada II */\n177,\n/* Rajab */\n207,\n/* Sha'ban */\n236,\n/* Ramadan */\n266,\n/* Shawwal */\n295,\n/* Dhu al-Qa'da */\n325,\n/* Dhu al-Hijja */\n354];\n/**\n * Number of days difference between RD 0 of the Gregorian calendar and\n * RD 0 of the Islamic calendar. \n * @private\n * @const\n * @type number\n */\n\nIslamicDate.GregorianDiff = 227015;\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nIslamicDate.prototype.newRd = function (params) {\n  return new IslamicRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nIslamicDate.prototype._calcYear = function (rd) {\n  return Math.floor((30 * rd + 10646) / 10631);\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nIslamicDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"IslamicDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"IslamicDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"IslamicDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(remainder, IslamicDate.cumMonthLengths);\n  remainder -= IslamicDate.cumMonthLengths[this.month - 1]; //console.log(\"IslamicDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"IslamicDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nIslamicDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 2, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and \n * Dhu al-Hijja 29 is 354.\n * @return {number} the ordinal day of the year\n */\n\n\nIslamicDate.prototype.getDayOfYear = function () {\n  return IslamicDate.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Islamic \n * calendars is -1 for \"before the Islamic era\" and 1 for \"the Islamic era\". \n * Islamic era dates are any date after Muharran 1, 1, which is the same as\n * July 16, 622 CE in the Gregorian calendar. \n * \n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\n\n\nIslamicDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nIslamicDate.prototype.getCalendar = function () {\n  return \"islamic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"islamic\"] = IslamicDate;\nmodule.exports = IslamicDate;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\IslamicDate.js"],"names":["ilib","require","SearchUtils","MathUtils","Locale","LocaleInfo","TimeZone","IDate","Calendar","IslamicRataDie","IslamicCal","IslamicDate","params","cal","timezone","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","prototype","noinstance","parent","constructor","year","month","day","hour","minute","second","millisecond","parseInt","dayOfYear","dst","rd","newRd","id","tz","offset","_getOffsetMillisWallTime","getRataDie","_init2","_calcDateComponents","cumMonthLengths","GregorianDiff","_calcYear","Math","floor","remainder","getOffsetMillis","yearStart","bsearch","round","getDayOfWeek","mod","getDayOfYear","getEra","getCalendar","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * islamicDate.js - Represent a date in the Islamic calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nMathUtils.js\nSearchUtils.js\nCalendar.js\nIslamicCal.js\nIslamicRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar IslamicRataDie = require(\"./IslamicRataDie.js\");\n\nvar IslamicCal = require(\"./IslamicCal.js\");\n/**\n * @class\n * Construct a new civil Islamic date object. The constructor can be called\n * with a params object that can contain the following properties:<p>\n * \n * <ul>\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\n * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond</i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * If called with another Islamic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date\n */\n\n\nvar IslamicDate = function IslamicDate(params) {\n  this.cal = new IslamicCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nIslamicDate.prototype = new IDate({\n  noinstance: true\n});\nIslamicDate.prototype.parent = IDate;\nIslamicDate.prototype.constructor = IslamicDate;\n/**\n * Initialize the date\n * @private\n */\n\nIslamicDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Islamic calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 to 12 (December).\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 30.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 355.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nIslamicDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\n\nIslamicDate.cumMonthLengths = [0,\n/* Muharram */\n30,\n/* Saffar */\n59,\n/* Rabi'I */\n89,\n/* Rabi'II */\n118,\n/* Jumada I */\n148,\n/* Jumada II */\n177,\n/* Rajab */\n207,\n/* Sha'ban */\n236,\n/* Ramadan */\n266,\n/* Shawwal */\n295,\n/* Dhu al-Qa'da */\n325,\n/* Dhu al-Hijja */\n354];\n/**\n * Number of days difference between RD 0 of the Gregorian calendar and\n * RD 0 of the Islamic calendar. \n * @private\n * @const\n * @type number\n */\n\nIslamicDate.GregorianDiff = 227015;\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nIslamicDate.prototype.newRd = function (params) {\n  return new IslamicRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nIslamicDate.prototype._calcYear = function (rd) {\n  return Math.floor((30 * rd + 10646) / 10631);\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nIslamicDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"IslamicDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"IslamicDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"IslamicDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(remainder, IslamicDate.cumMonthLengths);\n  remainder -= IslamicDate.cumMonthLengths[this.month - 1]; //console.log(\"IslamicDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"IslamicDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nIslamicDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 2, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and \n * Dhu al-Hijja 29 is 354.\n * @return {number} the ordinal day of the year\n */\n\n\nIslamicDate.prototype.getDayOfYear = function () {\n  return IslamicDate.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Islamic \n * calendars is -1 for \"before the Islamic era\" and 1 for \"the Islamic era\". \n * Islamic era dates are any date after Muharran 1, 1, which is the same as\n * July 16, 622 CE in the Gregorian calendar. \n * \n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\n\n\nIslamicDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nIslamicDate.prototype.getCalendar = function () {\n  return \"islamic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"islamic\"] = IslamicDate;\nmodule.exports = IslamicDate;"]},"metadata":{},"sourceType":"module"}