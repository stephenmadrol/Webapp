{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * isDigit.js - Character type is digit\n *\n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends CType.js IString.js ilib.js\n// !data ctype ctype_n\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar CType = require(\"./CType.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * Return whether or not the first character is a digit character in the\n * Latin script.<p>\n *\n * @static\n * @param {string|IString|number} ch character or code point to examine\n * @return {boolean} true if the first character is a digit character in the\n * Latin script.\n */\n\n\nvar isDigit = function isDigit(ch) {\n  var num;\n\n  switch (_typeof(ch)) {\n    case 'number':\n      num = ch;\n      break;\n\n    case 'string':\n      num = IString.toCodePoint(ch, 0);\n      break;\n\n    case 'undefined':\n      return false;\n\n    default:\n      num = ch._toCodePoint(0);\n      break;\n  }\n\n  return ilib.data.ctype ? CType._inRange(num, 'Nd', ilib.data.ctype_n) : num >= 0x30 && num <= 0x39;\n};\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nisDigit._init = function (sync, loadParams, onLoad) {\n  CType._load(\"ctype_n\", sync, loadParams, onLoad);\n};\n\nmodule.exports = isDigit;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/ilib/lib/isDigit.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","CType","IString","isDigit","ch","num","toCodePoint","_toCodePoint","data","ctype","_inRange","ctype_n","_init","sync","loadParams","onLoad","_load","module","exports"],"mappings":"AAAA;;;;AAEA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,SAAOA,MAAM,CAACC,QAAd,MAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,sBAAcA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,YAAkHJ,GAAlH,CAAP;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE/V;;;;;;;;;;;;;;;;;;AAkBA;AACA;;;AACA,IAAIK,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,cAAD,CAArB;AACA;;;;;;;;;;;AAWA,IAAIG,OAAO,GAAG,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;AACjC,MAAIC,GAAJ;;AAEA,UAAQZ,OAAO,CAACW,EAAD,CAAf;AACE,SAAK,QAAL;AACEC,MAAAA,GAAG,GAAGD,EAAN;AACA;;AAEF,SAAK,QAAL;AACEC,MAAAA,GAAG,GAAGH,OAAO,CAACI,WAAR,CAAoBF,EAApB,EAAwB,CAAxB,CAAN;AACA;;AAEF,SAAK,WAAL;AACE,aAAO,KAAP;;AAEF;AACEC,MAAAA,GAAG,GAAGD,EAAE,CAACG,YAAH,CAAgB,CAAhB,CAAN;AACA;AAdJ;;AAiBA,SAAOR,IAAI,CAACS,IAAL,CAAUC,KAAV,GAAkBR,KAAK,CAACS,QAAN,CAAeL,GAAf,EAAoB,IAApB,EAA0BN,IAAI,CAACS,IAAL,CAAUG,OAApC,CAAlB,GAAiEN,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAI,IAA9F;AACD,CArBD;AAsBA;;;;;;;;AAQAF,OAAO,CAACS,KAAR,GAAgB,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,MAA5B,EAAoC;AAClDd,EAAAA,KAAK,CAACe,KAAN,CAAY,SAAZ,EAAuBH,IAAvB,EAA6BC,UAA7B,EAAyCC,MAAzC;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * isDigit.js - Character type is digit\n *\n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends CType.js IString.js ilib.js\n// !data ctype ctype_n\nvar ilib = require(\"./ilib.js\");\n\nvar CType = require(\"./CType.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * Return whether or not the first character is a digit character in the\n * Latin script.<p>\n *\n * @static\n * @param {string|IString|number} ch character or code point to examine\n * @return {boolean} true if the first character is a digit character in the\n * Latin script.\n */\n\n\nvar isDigit = function isDigit(ch) {\n  var num;\n\n  switch (_typeof(ch)) {\n    case 'number':\n      num = ch;\n      break;\n\n    case 'string':\n      num = IString.toCodePoint(ch, 0);\n      break;\n\n    case 'undefined':\n      return false;\n\n    default:\n      num = ch._toCodePoint(0);\n      break;\n  }\n\n  return ilib.data.ctype ? CType._inRange(num, 'Nd', ilib.data.ctype_n) : num >= 0x30 && num <= 0x39;\n};\n/**\n * @protected\n * @param {boolean} sync\n * @param {Object|undefined} loadParams\n * @param {function(*)|undefined} onLoad\n */\n\n\nisDigit._init = function (sync, loadParams, onLoad) {\n  CType._load(\"ctype_n\", sync, loadParams, onLoad);\n};\n\nmodule.exports = isDigit;"]},"metadata":{},"sourceType":"module"}