{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * IDate.js - Represent a date in any calendar. This class is subclassed for each \n * calendar and includes some shared functionality.\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends LocaleInfo.js */\n\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n/**\n * @class\n * Superclass for all the calendar date classes that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link DateFactory} function to manufacture a new\n * instance of a subclass of IDate. This class is called IDate for \"ilib\n * date\" so that it does not conflict with the built-in Javascript Date\n * class.\n * \n * @private\n * @constructor\n * @param {Object=} options The date components to initialize this date with\n */\n\n\nvar IDate = function IDate(options) {};\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your date after it's defined: \n * IDate._constructors[\"mytype\"] = IDate.MyTypeConstructor;\n */\n\n\nIDate._constructors = {};\nIDate.prototype = {\n  getType: function getType() {\n    return \"date\";\n  },\n\n  /**\n   * Return the unix time equivalent to this date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This \n   * method only returns a valid number for dates between midnight, \n   * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when \n   * the unix time runs out. If this instance encodes a date outside of that range, \n   * this method will return -1. For date types that are not Gregorian, the point \n   * in time represented by this date object will only give a return value if it\n   * is in the correct range in the Gregorian calendar as given previously.\n   * \n   * @return {number} a number giving the unix time, or -1 if the date is outside the\n   * valid unix time range\n   */\n  getTime: function getTime() {\n    return this.rd.getTime();\n  },\n\n  /**\n   * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n   * (or the type \"time_t\" in C/C++) is only encoded with an unsigned 32 bit integer, and thus \n   * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n   * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n   * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before\n   * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n   * range. If this instance encodes a date outside of that range, this method will return\n   * NaN.\n   * \n   * @return {number} a number giving the extended unix time, or Nan if the date is outside \n   * the valid extended unix time range\n   */\n  getTimeExtended: function getTimeExtended() {\n    return this.rd.getTimeExtended();\n  },\n\n  /**\n   * Set the time of this instance according to the given unix time. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970.\n   * \n   * @param {number} millis the unix time to set this date to in milliseconds \n   */\n  setTime: function setTime(millis) {\n    this.rd = this.newRd({\n      unixtime: millis,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n  getDays: function getDays() {\n    return this.day;\n  },\n  getMonths: function getMonths() {\n    return this.month;\n  },\n  getYears: function getYears() {\n    return this.year;\n  },\n  getHours: function getHours() {\n    return this.hour;\n  },\n  getMinutes: function getMinutes() {\n    return this.minute;\n  },\n  getSeconds: function getSeconds() {\n    return this.second;\n  },\n  getMilliseconds: function getMilliseconds() {\n    return this.millisecond;\n  },\n  getEra: function getEra() {\n    return this.year < 1 ? -1 : 1;\n  },\n  setDays: function setDays(day) {\n    this.day = parseInt(day, 10) || 1;\n\n    this.rd._setDateComponents(this);\n  },\n  setMonths: function setMonths(month) {\n    this.month = parseInt(month, 10) || 1;\n\n    this.rd._setDateComponents(this);\n  },\n  setYears: function setYears(year) {\n    this.year = parseInt(year, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setHours: function setHours(hour) {\n    this.hour = parseInt(hour, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setMinutes: function setMinutes(minute) {\n    this.minute = parseInt(minute, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setSeconds: function setSeconds(second) {\n    this.second = parseInt(second, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setMilliseconds: function setMilliseconds(milli) {\n    this.millisecond = parseInt(milli, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n\n  /**\n   * Return a new date instance in the current calendar that represents the first instance \n   * of the given day of the week before the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week before the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  before: function before(dow) {\n    return new this.constructor({\n      rd: this.rd.before(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new date instance in the current calendar that represents the first instance \n   * of the given day of the week after the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week after the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  after: function after(dow) {\n    return new this.constructor({\n      rd: this.rd.after(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new Gregorian date instance that represents the first instance of the \n   * given day of the week on or before the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week on or before the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  onOrBefore: function onOrBefore(dow) {\n    return new this.constructor({\n      rd: this.rd.onOrBefore(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new Gregorian date instance that represents the first instance of the \n   * given day of the week on or after the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week on or after the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  onOrAfter: function onOrAfter(dow) {\n    return new this.constructor({\n      rd: this.rd.onOrAfter(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a Javascript Date object that is equivalent to this date\n   * object.\n   * \n   * @return {Date|undefined} a javascript Date object\n   */\n  getJSDate: function getJSDate() {\n    var unix = this.rd.getTimeExtended();\n    return isNaN(unix) ? undefined : new Date(unix);\n  },\n\n  /**\n   * Return the Rata Die (fixed day) number of this date.\n   * \n   * @protected\n   * @return {number} the rd date as a number\n   */\n  getRataDie: function getRataDie() {\n    return this.rd.getRataDie();\n  },\n\n  /**\n   * Set the date components of this instance based on the given rd.\n   * @protected\n   * @param {number} rd the rata die date to set\n   */\n  setRd: function setRd(rd) {\n    this.rd = this.newRd({\n      rd: rd,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n\n  /**\n   * Return the Julian Day equivalent to this calendar date as a number.\n   * \n   * @return {number} the julian date equivalent of this date\n   */\n  getJulianDay: function getJulianDay() {\n    return this.rd.getJulianDay();\n  },\n\n  /**\n   * Set the date of this instance using a Julian Day.\n   * @param {number|JulianDay} date the Julian Day to use to set this date\n   */\n  setJulianDay: function setJulianDay(date) {\n    this.rd = this.newRd({\n      julianday: _typeof(date) === 'object' ? date.getDate() : date,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n\n  /**\n   * Return the time zone associated with this date, or \n   * undefined if none was specified in the constructor.\n   * \n   * @return {string|undefined} the name of the time zone for this date instance\n   */\n  getTimeZone: function getTimeZone() {\n    return this.timezone || \"local\";\n  },\n\n  /**\n   * Set the time zone associated with this date.\n   * @param {string=} tzName the name of the time zone to set into this date instance,\n   * or \"undefined\" to unset the time zone \n   */\n  setTimeZone: function setTimeZone(tzName) {\n    if (!tzName || tzName === \"\") {\n      // same as undefining it\n      this.timezone = undefined;\n      this.tz = undefined;\n    } else if (typeof tzName === 'string') {\n      this.timezone = tzName;\n      this.tz = undefined; // assuming the same UTC time, but a new time zone, now we have to \n      // recalculate what the date components are\n\n      this._calcDateComponents();\n    }\n  },\n\n  /**\n   * Return the rd number of the first Sunday of the given ISO year.\n   * @protected\n   * @param {number} year the year for which the first Sunday is being sought\n   * @return {number} the rd of the first Sunday of the ISO year\n   */\n  firstSunday: function firstSunday(year) {\n    var firstDay = this.newRd({\n      year: year,\n      month: 1,\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0,\n      cal: this.cal\n    });\n    var firstThu = this.newRd({\n      rd: firstDay.onOrAfter(4),\n      cal: this.cal\n    });\n    return firstThu.before(0);\n  },\n\n  /**\n   * Return the ISO 8601 week number in the current year for the current date. The week\n   * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some\n   * calendars.\n   * \n   * @return {number} the week number for the current date\n   */\n  getWeekOfYear: function getWeekOfYear() {\n    var rd = Math.floor(this.rd.getRataDie());\n\n    var year = this._calcYear(rd + this.offset);\n\n    var yearStart = this.firstSunday(year);\n    var nextYear; // if we have a January date, it may be in this ISO year or the previous year\n\n    if (rd < yearStart) {\n      yearStart = this.firstSunday(year - 1);\n    } else {\n      // if we have a late December date, it may be in this ISO year, or the next year\n      nextYear = this.firstSunday(year + 1);\n\n      if (rd >= nextYear) {\n        yearStart = nextYear;\n      }\n    }\n\n    return Math.floor((rd - yearStart) / 7) + 1;\n  },\n\n  /**\n   * Return the ordinal number of the week within the month. The first week of a month is\n   * the first one that contains 4 or more days in that month. If any days precede this\n   * first week, they are marked as being in week 0. This function returns values from 0\n   * through 6.<p>\n   * \n   * The locale is a required parameter because different locales that use the same \n   * Gregorian calendar consider different days of the week to be the beginning of\n   * the week. This can affect the week of the month in which some days are located.\n   * \n   * @param {Locale|string} locale the locale or locale spec to use when figuring out \n   * the first day of the week\n   * @return {number} the ordinal number of the week within the current month\n   */\n  getWeekOfMonth: function getWeekOfMonth(locale) {\n    var li = new LocaleInfo(locale);\n    var first = this.newRd({\n      year: this._calcYear(this.rd.getRataDie() + this.offset),\n      month: this.getMonths(),\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0,\n      cal: this.cal\n    });\n    var weekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\n    if (weekStart - first.getRataDie() > 3) {\n      // if the first week has 4 or more days in it of the current month, then consider\n      // that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n      // one week earlier.\n      weekStart -= 7;\n    }\n\n    return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;\n  }\n};\nmodule.exports = IDate;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/IDate.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","LocaleInfo","require","IDate","options","_constructors","getType","getTime","rd","getTimeExtended","setTime","millis","newRd","unixtime","cal","_calcDateComponents","getDays","day","getMonths","month","getYears","year","getHours","hour","getMinutes","minute","getSeconds","second","getMilliseconds","millisecond","getEra","setDays","parseInt","_setDateComponents","setMonths","setYears","setHours","setMinutes","setSeconds","setMilliseconds","milli","before","dow","offset","timezone","after","onOrBefore","onOrAfter","getJSDate","unix","isNaN","undefined","Date","getRataDie","setRd","getJulianDay","setJulianDay","date","julianday","getDate","getTimeZone","setTimeZone","tzName","tz","firstSunday","firstDay","firstThu","getWeekOfYear","Math","floor","_calcYear","yearStart","nextYear","getWeekOfMonth","locale","li","first","weekStart","getFirstDayOfWeek","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * IDate.js - Represent a date in any calendar. This class is subclassed for each \n * calendar and includes some shared functionality.\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends LocaleInfo.js */\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n/**\n * @class\n * Superclass for all the calendar date classes that contains shared \n * functionality. This class is never instantiated on its own. Instead,\n * you should use the {@link DateFactory} function to manufacture a new\n * instance of a subclass of IDate. This class is called IDate for \"ilib\n * date\" so that it does not conflict with the built-in Javascript Date\n * class.\n * \n * @private\n * @constructor\n * @param {Object=} options The date components to initialize this date with\n */\n\n\nvar IDate = function IDate(options) {};\n/* place for the subclasses to put their constructors so that the factory method\n * can find them. Do this to add your date after it's defined: \n * IDate._constructors[\"mytype\"] = IDate.MyTypeConstructor;\n */\n\n\nIDate._constructors = {};\nIDate.prototype = {\n  getType: function getType() {\n    return \"date\";\n  },\n\n  /**\n   * Return the unix time equivalent to this date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This \n   * method only returns a valid number for dates between midnight, \n   * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when \n   * the unix time runs out. If this instance encodes a date outside of that range, \n   * this method will return -1. For date types that are not Gregorian, the point \n   * in time represented by this date object will only give a return value if it\n   * is in the correct range in the Gregorian calendar as given previously.\n   * \n   * @return {number} a number giving the unix time, or -1 if the date is outside the\n   * valid unix time range\n   */\n  getTime: function getTime() {\n    return this.rd.getTime();\n  },\n\n  /**\n   * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n   * (or the type \"time_t\" in C/C++) is only encoded with an unsigned 32 bit integer, and thus \n   * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n   * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n   * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before\n   * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n   * range. If this instance encodes a date outside of that range, this method will return\n   * NaN.\n   * \n   * @return {number} a number giving the extended unix time, or Nan if the date is outside \n   * the valid extended unix time range\n   */\n  getTimeExtended: function getTimeExtended() {\n    return this.rd.getTimeExtended();\n  },\n\n  /**\n   * Set the time of this instance according to the given unix time. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970.\n   * \n   * @param {number} millis the unix time to set this date to in milliseconds \n   */\n  setTime: function setTime(millis) {\n    this.rd = this.newRd({\n      unixtime: millis,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n  getDays: function getDays() {\n    return this.day;\n  },\n  getMonths: function getMonths() {\n    return this.month;\n  },\n  getYears: function getYears() {\n    return this.year;\n  },\n  getHours: function getHours() {\n    return this.hour;\n  },\n  getMinutes: function getMinutes() {\n    return this.minute;\n  },\n  getSeconds: function getSeconds() {\n    return this.second;\n  },\n  getMilliseconds: function getMilliseconds() {\n    return this.millisecond;\n  },\n  getEra: function getEra() {\n    return this.year < 1 ? -1 : 1;\n  },\n  setDays: function setDays(day) {\n    this.day = parseInt(day, 10) || 1;\n\n    this.rd._setDateComponents(this);\n  },\n  setMonths: function setMonths(month) {\n    this.month = parseInt(month, 10) || 1;\n\n    this.rd._setDateComponents(this);\n  },\n  setYears: function setYears(year) {\n    this.year = parseInt(year, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setHours: function setHours(hour) {\n    this.hour = parseInt(hour, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setMinutes: function setMinutes(minute) {\n    this.minute = parseInt(minute, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setSeconds: function setSeconds(second) {\n    this.second = parseInt(second, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n  setMilliseconds: function setMilliseconds(milli) {\n    this.millisecond = parseInt(milli, 10) || 0;\n\n    this.rd._setDateComponents(this);\n  },\n\n  /**\n   * Return a new date instance in the current calendar that represents the first instance \n   * of the given day of the week before the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week before the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  before: function before(dow) {\n    return new this.constructor({\n      rd: this.rd.before(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new date instance in the current calendar that represents the first instance \n   * of the given day of the week after the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week after the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  after: function after(dow) {\n    return new this.constructor({\n      rd: this.rd.after(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new Gregorian date instance that represents the first instance of the \n   * given day of the week on or before the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week on or before the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  onOrBefore: function onOrBefore(dow) {\n    return new this.constructor({\n      rd: this.rd.onOrBefore(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a new Gregorian date instance that represents the first instance of the \n   * given day of the week on or after the current date. The day of the week is encoded\n   * as a number where 0 = Sunday, 1 = Monday, etc.\n   * \n   * @param {number} dow the day of the week on or after the current date that is being sought\n   * @return {IDate} the date being sought\n   */\n  onOrAfter: function onOrAfter(dow) {\n    return new this.constructor({\n      rd: this.rd.onOrAfter(dow, this.offset),\n      timezone: this.timezone\n    });\n  },\n\n  /**\n   * Return a Javascript Date object that is equivalent to this date\n   * object.\n   * \n   * @return {Date|undefined} a javascript Date object\n   */\n  getJSDate: function getJSDate() {\n    var unix = this.rd.getTimeExtended();\n    return isNaN(unix) ? undefined : new Date(unix);\n  },\n\n  /**\n   * Return the Rata Die (fixed day) number of this date.\n   * \n   * @protected\n   * @return {number} the rd date as a number\n   */\n  getRataDie: function getRataDie() {\n    return this.rd.getRataDie();\n  },\n\n  /**\n   * Set the date components of this instance based on the given rd.\n   * @protected\n   * @param {number} rd the rata die date to set\n   */\n  setRd: function setRd(rd) {\n    this.rd = this.newRd({\n      rd: rd,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n\n  /**\n   * Return the Julian Day equivalent to this calendar date as a number.\n   * \n   * @return {number} the julian date equivalent of this date\n   */\n  getJulianDay: function getJulianDay() {\n    return this.rd.getJulianDay();\n  },\n\n  /**\n   * Set the date of this instance using a Julian Day.\n   * @param {number|JulianDay} date the Julian Day to use to set this date\n   */\n  setJulianDay: function setJulianDay(date) {\n    this.rd = this.newRd({\n      julianday: _typeof(date) === 'object' ? date.getDate() : date,\n      cal: this.cal\n    });\n\n    this._calcDateComponents();\n  },\n\n  /**\n   * Return the time zone associated with this date, or \n   * undefined if none was specified in the constructor.\n   * \n   * @return {string|undefined} the name of the time zone for this date instance\n   */\n  getTimeZone: function getTimeZone() {\n    return this.timezone || \"local\";\n  },\n\n  /**\n   * Set the time zone associated with this date.\n   * @param {string=} tzName the name of the time zone to set into this date instance,\n   * or \"undefined\" to unset the time zone \n   */\n  setTimeZone: function setTimeZone(tzName) {\n    if (!tzName || tzName === \"\") {\n      // same as undefining it\n      this.timezone = undefined;\n      this.tz = undefined;\n    } else if (typeof tzName === 'string') {\n      this.timezone = tzName;\n      this.tz = undefined; // assuming the same UTC time, but a new time zone, now we have to \n      // recalculate what the date components are\n\n      this._calcDateComponents();\n    }\n  },\n\n  /**\n   * Return the rd number of the first Sunday of the given ISO year.\n   * @protected\n   * @param {number} year the year for which the first Sunday is being sought\n   * @return {number} the rd of the first Sunday of the ISO year\n   */\n  firstSunday: function firstSunday(year) {\n    var firstDay = this.newRd({\n      year: year,\n      month: 1,\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0,\n      cal: this.cal\n    });\n    var firstThu = this.newRd({\n      rd: firstDay.onOrAfter(4),\n      cal: this.cal\n    });\n    return firstThu.before(0);\n  },\n\n  /**\n   * Return the ISO 8601 week number in the current year for the current date. The week\n   * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some\n   * calendars.\n   * \n   * @return {number} the week number for the current date\n   */\n  getWeekOfYear: function getWeekOfYear() {\n    var rd = Math.floor(this.rd.getRataDie());\n\n    var year = this._calcYear(rd + this.offset);\n\n    var yearStart = this.firstSunday(year);\n    var nextYear; // if we have a January date, it may be in this ISO year or the previous year\n\n    if (rd < yearStart) {\n      yearStart = this.firstSunday(year - 1);\n    } else {\n      // if we have a late December date, it may be in this ISO year, or the next year\n      nextYear = this.firstSunday(year + 1);\n\n      if (rd >= nextYear) {\n        yearStart = nextYear;\n      }\n    }\n\n    return Math.floor((rd - yearStart) / 7) + 1;\n  },\n\n  /**\n   * Return the ordinal number of the week within the month. The first week of a month is\n   * the first one that contains 4 or more days in that month. If any days precede this\n   * first week, they are marked as being in week 0. This function returns values from 0\n   * through 6.<p>\n   * \n   * The locale is a required parameter because different locales that use the same \n   * Gregorian calendar consider different days of the week to be the beginning of\n   * the week. This can affect the week of the month in which some days are located.\n   * \n   * @param {Locale|string} locale the locale or locale spec to use when figuring out \n   * the first day of the week\n   * @return {number} the ordinal number of the week within the current month\n   */\n  getWeekOfMonth: function getWeekOfMonth(locale) {\n    var li = new LocaleInfo(locale);\n    var first = this.newRd({\n      year: this._calcYear(this.rd.getRataDie() + this.offset),\n      month: this.getMonths(),\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0,\n      cal: this.cal\n    });\n    var weekStart = first.onOrAfter(li.getFirstDayOfWeek());\n\n    if (weekStart - first.getRataDie() > 3) {\n      // if the first week has 4 or more days in it of the current month, then consider\n      // that week 1. Otherwise, it is week 0. To make it week 1, move the week start\n      // one week earlier.\n      weekStart -= 7;\n    }\n\n    return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;\n  }\n};\nmodule.exports = IDate;"]},"metadata":{},"sourceType":"module"}