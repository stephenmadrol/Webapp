{"ast":null,"code":"\"use strict\";\n/*\n * CopticDate.js - Represent a date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nCopticCal.js \nMathUtils.js\nJSUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicDate.js\nCopticRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar EthiopicDate = require(\"./EthiopicDate.js\");\n\nvar CopticCal = require(\"./CopticCal.js\");\n\nvar CopticRataDie = require(\"./CopticRataDie.js\");\n/**\n * @class\n * Construct a new date object for the Coptic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this coptic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *  \n * If called with another Coptic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends EthiopicDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date\n */\n\n\nvar CopticDate = function CopticDate(params) {\n  this.rd = NaN; // clear these out so that the EthiopicDate constructor can set it\n\n  var newparams = ilib.extend({}, params);\n\n  newparams.onLoad = function (ed) {\n    ed.cal = new CopticCal();\n\n    if (typeof params.onLoad === \"function\") {\n      params.onLoad(ed);\n    }\n  };\n\n  EthiopicDate.call(this, params);\n};\n\nCopticDate.prototype = new EthiopicDate({\n  noinstance: true\n});\nCopticDate.prototype.parent = EthiopicDate.prototype;\nCopticDate.prototype.constructor = CopticDate;\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nCopticDate.prototype.newRd = function (params) {\n  return new CopticRataDie(params);\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nCopticDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nCopticDate.prototype.getCalendar = function () {\n  return \"coptic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"coptic\"] = CopticDate;\nmodule.exports = CopticDate;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/CopticDate.js"],"names":["ilib","require","MathUtils","JSUtils","Locale","LocaleInfo","IDate","TimeZone","Calendar","EthiopicDate","CopticCal","CopticRataDie","CopticDate","params","rd","NaN","newparams","extend","onLoad","ed","cal","call","prototype","noinstance","parent","constructor","newRd","getDayOfWeek","Math","floor","getRataDie","offset","mod","getCalendar","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAYA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAII,UAAU,GAAGJ,OAAO,CAAC,iBAAD,CAAxB;;AAEA,IAAIK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIQ,YAAY,GAAGR,OAAO,CAAC,mBAAD,CAA1B;;AAEA,IAAIS,SAAS,GAAGT,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIU,aAAa,GAAGV,OAAO,CAAC,oBAAD,CAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAIW,UAAU,GAAG,SAASA,UAAT,CAAoBC,MAApB,EAA4B;AAC3C,OAAKC,EAAL,GAAUC,GAAV,CAD2C,CAC5B;;AAEf,MAAIC,SAAS,GAAGhB,IAAI,CAACiB,MAAL,CAAY,EAAZ,EAAgBJ,MAAhB,CAAhB;;AAEAG,EAAAA,SAAS,CAACE,MAAV,GAAmB,UAAUC,EAAV,EAAc;AAC/BA,IAAAA,EAAE,CAACC,GAAH,GAAS,IAAIV,SAAJ,EAAT;;AAEA,QAAI,OAAOG,MAAM,CAACK,MAAd,KAAyB,UAA7B,EAAyC;AACvCL,MAAAA,MAAM,CAACK,MAAP,CAAcC,EAAd;AACD;AACF,GAND;;AAQAV,EAAAA,YAAY,CAACY,IAAb,CAAkB,IAAlB,EAAwBR,MAAxB;AACD,CAdD;;AAgBAD,UAAU,CAACU,SAAX,GAAuB,IAAIb,YAAJ,CAAiB;AACtCc,EAAAA,UAAU,EAAE;AAD0B,CAAjB,CAAvB;AAGAX,UAAU,CAACU,SAAX,CAAqBE,MAArB,GAA8Bf,YAAY,CAACa,SAA3C;AACAV,UAAU,CAACU,SAAX,CAAqBG,WAArB,GAAmCb,UAAnC;AACA;;;;;;;AAOAA,UAAU,CAACU,SAAX,CAAqBI,KAArB,GAA6B,UAAUb,MAAV,EAAkB;AAC7C,SAAO,IAAIF,aAAJ,CAAkBE,MAAlB,CAAP;AACD,CAFD;AAGA;;;;;;;;AAQAD,UAAU,CAACU,SAAX,CAAqBK,YAArB,GAAoC,YAAY;AAC9C,MAAIb,EAAE,GAAGc,IAAI,CAACC,KAAL,CAAW,KAAKf,EAAL,CAAQgB,UAAR,MAAwB,KAAKC,MAAL,IAAe,CAAvC,CAAX,CAAT;AACA,SAAO7B,SAAS,CAAC8B,GAAV,CAAclB,EAAE,GAAG,CAAnB,EAAsB,CAAtB,CAAP;AACD,CAHD;AAIA;;;;;;;AAOAF,UAAU,CAACU,SAAX,CAAqBW,WAArB,GAAmC,YAAY;AAC7C,SAAO,QAAP;AACD,CAFD,C,CAEG;;;AAGH3B,KAAK,CAAC4B,aAAN,CAAoB,QAApB,IAAgCtB,UAAhC;AACAuB,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["\"use strict\";\n\n/*\n * CopticDate.js - Represent a date in the Coptic calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nCopticCal.js \nMathUtils.js\nJSUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicDate.js\nCopticRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar EthiopicDate = require(\"./EthiopicDate.js\");\n\nvar CopticCal = require(\"./CopticCal.js\");\n\nvar CopticRataDie = require(\"./CopticRataDie.js\");\n/**\n * @class\n * Construct a new date object for the Coptic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this coptic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *  \n * If called with another Coptic date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends EthiopicDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date\n */\n\n\nvar CopticDate = function CopticDate(params) {\n  this.rd = NaN; // clear these out so that the EthiopicDate constructor can set it\n\n  var newparams = ilib.extend({}, params);\n\n  newparams.onLoad = function (ed) {\n    ed.cal = new CopticCal();\n\n    if (typeof params.onLoad === \"function\") {\n      params.onLoad(ed);\n    }\n  };\n\n  EthiopicDate.call(this, params);\n};\n\nCopticDate.prototype = new EthiopicDate({\n  noinstance: true\n});\nCopticDate.prototype.parent = EthiopicDate.prototype;\nCopticDate.prototype.constructor = CopticDate;\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\nCopticDate.prototype.newRd = function (params) {\n  return new CopticRataDie(params);\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nCopticDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nCopticDate.prototype.getCalendar = function () {\n  return \"coptic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"coptic\"] = CopticDate;\nmodule.exports = CopticDate;"]},"metadata":{},"sourceType":"module"}