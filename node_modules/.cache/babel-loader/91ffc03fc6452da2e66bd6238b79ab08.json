{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreadcrumbArranger = exports[\"default\"] = void 0;\n\nvar _cubicOut = _interopRequireDefault(require(\"eases/cubic-out\"));\n\nvar _arrange = require(\"@enact/ui/ViewManager/arrange\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Panel arrangers have a unique design requirement that varies their transition depending on the\n * direction (reverse) of the transition. This takes the two arrangement functions and returns\n * another function that picks which to call based on the value of `reverseTransition`.\n *\n * @param {Function} f forward function\n * @param {Function} b backward function\n * @returns {Function} Arrangement function\n * @method\n * @private\n */\n\n\nvar forwardBackward = function forwardBackward(f, b) {\n  return function (config) {\n    var f2 = config.reverseTransition ? b : f;\n    f2(config);\n  };\n};\n/**\n * Positions a breadcrumb based on its `data-index` and the current index, `to`\n *\n * @param  {Object} config  Arrangement configuration object\n * @returns {undefined}\n * @method\n * @private\n */\n\n\nvar positionBreadcrumb = (0, _arrange.ease)(_cubicOut[\"default\"], function (config) {\n  var _config$from = config.from,\n      from = _config$from === void 0 ? 0 : _config$from,\n      node = config.node,\n      percent = config.percent,\n      to = config.to;\n  var crumbIndex = node.dataset.index;\n  var dx = (to - from) * percent;\n  var x = from - crumbIndex;\n  var percentX = (x + dx) * -100;\n  (0, _arrange.replaceTransform)(\"translateX(\".concat(percentX, \"%)\"), config);\n});\n/**\n * Arrangement function for breadcrumbs\n *\n * @param  {Object} config  Arrangement configuration object\n * @returns {undefined}\n * @method\n * @private\n */\n\nvar enter = forwardBackward((0, _arrange.startAfter)(0.75, positionBreadcrumb), (0, _arrange.startAfter)(0.5, positionBreadcrumb));\n/**\n * Arranger for panel breadcrumbs\n *\n * @type {Arranger}\n * @private\n */\n\nvar BreadcrumbArranger = {\n  enter: enter,\n  stay: enter,\n  leave: enter\n};\nexports.BreadcrumbArranger = BreadcrumbArranger;\nvar _default = BreadcrumbArranger;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\moonstone\\Panels\\BreadcrumbArranger.js"],"names":["Object","defineProperty","exports","value","BreadcrumbArranger","_cubicOut","_interopRequireDefault","require","_arrange","obj","__esModule","forwardBackward","f","b","config","f2","reverseTransition","positionBreadcrumb","ease","_config$from","from","node","percent","to","crumbIndex","dataset","index","dx","x","percentX","replaceTransform","concat","enter","startAfter","stay","leave","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAvD;;AAEA,IAAIG,SAAS,GAAGC,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAtC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,+BAAD,CAAtB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;;;;;;;;;;;;;AAWA,IAAIE,eAAe,GAAG,SAASA,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AACnD,SAAO,UAAUC,MAAV,EAAkB;AACvB,QAAIC,EAAE,GAAGD,MAAM,CAACE,iBAAP,GAA2BH,CAA3B,GAA+BD,CAAxC;AACAG,IAAAA,EAAE,CAACD,MAAD,CAAF;AACD,GAHD;AAID,CALD;AAMA;;;;;;;;;;AAUA,IAAIG,kBAAkB,GAAG,CAAC,GAAGT,QAAQ,CAACU,IAAb,EAAmBb,SAAS,CAAC,SAAD,CAA5B,EAAyC,UAAUS,MAAV,EAAkB;AAClF,MAAIK,YAAY,GAAGL,MAAM,CAACM,IAA1B;AAAA,MACIA,IAAI,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,CAA1B,GAA8BA,YADzC;AAAA,MAEIE,IAAI,GAAGP,MAAM,CAACO,IAFlB;AAAA,MAGIC,OAAO,GAAGR,MAAM,CAACQ,OAHrB;AAAA,MAIIC,EAAE,GAAGT,MAAM,CAACS,EAJhB;AAKA,MAAIC,UAAU,GAAGH,IAAI,CAACI,OAAL,CAAaC,KAA9B;AACA,MAAIC,EAAE,GAAG,CAACJ,EAAE,GAAGH,IAAN,IAAcE,OAAvB;AACA,MAAIM,CAAC,GAAGR,IAAI,GAAGI,UAAf;AACA,MAAIK,QAAQ,GAAG,CAACD,CAAC,GAAGD,EAAL,IAAW,CAAC,GAA3B;AACA,GAAC,GAAGnB,QAAQ,CAACsB,gBAAb,EAA+B,cAAcC,MAAd,CAAqBF,QAArB,EAA+B,IAA/B,CAA/B,EAAqEf,MAArE;AACD,CAXwB,CAAzB;AAYA;;;;;;;;;AASA,IAAIkB,KAAK,GAAGrB,eAAe,CAAC,CAAC,GAAGH,QAAQ,CAACyB,UAAb,EAAyB,IAAzB,EAA+BhB,kBAA/B,CAAD,EAAqD,CAAC,GAAGT,QAAQ,CAACyB,UAAb,EAAyB,GAAzB,EAA8BhB,kBAA9B,CAArD,CAA3B;AACA;;;;;;;AAOA,IAAIb,kBAAkB,GAAG;AACvB4B,EAAAA,KAAK,EAAEA,KADgB;AAEvBE,EAAAA,IAAI,EAAEF,KAFiB;AAGvBG,EAAAA,KAAK,EAAEH;AAHgB,CAAzB;AAKA9B,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;AACA,IAAIgC,QAAQ,GAAGhC,kBAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBkC,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BreadcrumbArranger = exports[\"default\"] = void 0;\n\nvar _cubicOut = _interopRequireDefault(require(\"eases/cubic-out\"));\n\nvar _arrange = require(\"@enact/ui/ViewManager/arrange\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Panel arrangers have a unique design requirement that varies their transition depending on the\n * direction (reverse) of the transition. This takes the two arrangement functions and returns\n * another function that picks which to call based on the value of `reverseTransition`.\n *\n * @param {Function} f forward function\n * @param {Function} b backward function\n * @returns {Function} Arrangement function\n * @method\n * @private\n */\nvar forwardBackward = function forwardBackward(f, b) {\n  return function (config) {\n    var f2 = config.reverseTransition ? b : f;\n    f2(config);\n  };\n};\n/**\n * Positions a breadcrumb based on its `data-index` and the current index, `to`\n *\n * @param  {Object} config  Arrangement configuration object\n * @returns {undefined}\n * @method\n * @private\n */\n\n\nvar positionBreadcrumb = (0, _arrange.ease)(_cubicOut[\"default\"], function (config) {\n  var _config$from = config.from,\n      from = _config$from === void 0 ? 0 : _config$from,\n      node = config.node,\n      percent = config.percent,\n      to = config.to;\n  var crumbIndex = node.dataset.index;\n  var dx = (to - from) * percent;\n  var x = from - crumbIndex;\n  var percentX = (x + dx) * -100;\n  (0, _arrange.replaceTransform)(\"translateX(\".concat(percentX, \"%)\"), config);\n});\n/**\n * Arrangement function for breadcrumbs\n *\n * @param  {Object} config  Arrangement configuration object\n * @returns {undefined}\n * @method\n * @private\n */\n\nvar enter = forwardBackward((0, _arrange.startAfter)(0.75, positionBreadcrumb), (0, _arrange.startAfter)(0.5, positionBreadcrumb));\n/**\n * Arranger for panel breadcrumbs\n *\n * @type {Arranger}\n * @private\n */\n\nvar BreadcrumbArranger = {\n  enter: enter,\n  stay: enter,\n  leave: enter\n};\nexports.BreadcrumbArranger = BreadcrumbArranger;\nvar _default = BreadcrumbArranger;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}