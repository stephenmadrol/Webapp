{"ast":null,"code":"\"use strict\";\n/*\n * JulianDate.js - Represent a date in the Julian calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nIDate.js \nTimeZone.js\nCalendar.js \nJulianCal.js \nSearchUtils.js \nMathUtils.js\nLocaleInfo.js \nJulianRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar JulianRataDie = require(\"./JulianRataDie.js\");\n\nvar JulianCal = require(\"./JulianCal.js\");\n/**\n * @class\n * Construct a new date object for the Julian Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero \n * year which doesn't exist in the Julian calendar\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * <li><i>day</i> - 1 to 31\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * NB. The <a href=\"http://en.wikipedia.org/wiki/Julian_date\">Julian Day</a> \n * (JulianDay) object is a <i>different</i> object than a \n * <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">date in\n * the Julian calendar</a> and the two are not to be confused. The Julian Day \n * object represents time as a number of whole and fractional days since the \n * beginning of the epoch, whereas a date in the Julian \n * calendar is a regular date that signifies year, month, day, etc. using the rules\n * of the Julian calendar. The naming of Julian Days and the Julian calendar are\n * unfortunately close, and come from history.<p>\n *  \n * If called with another Julian date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian date\n */\n\n\nvar JulianDate = function JulianDate(params) {\n  this.cal = new JulianCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nJulianDate.prototype = new IDate({\n  noinstance: true\n});\nJulianDate.prototype.parent = IDate;\nJulianDate.prototype.constructor = JulianDate;\n/**\n * @private\n * Initialize the date\n */\n\nJulianDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Julian calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 (January) to 12 (December).\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 383.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing the date\n */\n\n\nJulianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nJulianDate.prototype.newRd = function (params) {\n  return new JulianRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nJulianDate.prototype._calcYear = function (rd) {\n  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1464) / 1461);\n  return year <= 0 ? year - 1 : year;\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nJulianDate.prototype._calcDateComponents = function () {\n  var remainder,\n      cumulative,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  }\n\n  var jan1 = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd + 1 - jan1.getRataDie();\n  cumulative = this.cal.isLeapYear(this.year) ? JulianCal.cumMonthLengthsLeap : JulianCal.cumMonthLengths;\n  this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n  remainder = remainder - cumulative[this.month - 1];\n  this.day = Math.floor(remainder);\n  remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nJulianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 2, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nJulianDate.prototype.getCalendar = function () {\n  return \"julian\";\n}; //register with the factory method\n\n\nIDate._constructors[\"julian\"] = JulianDate;\nmodule.exports = JulianDate;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\i18n\\ilib\\lib\\JulianDate.js"],"names":["ilib","require","SearchUtils","MathUtils","Locale","LocaleInfo","TimeZone","IDate","Calendar","JulianRataDie","JulianCal","JulianDate","params","cal","timezone","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","prototype","noinstance","parent","constructor","year","month","day","hour","minute","second","millisecond","parseInt","dayOfYear","dst","rd","newRd","id","tz","offset","_getOffsetMillisWallTime","getRataDie","_init2","_calcDateComponents","_calcYear","Math","floor","remainder","cumulative","getOffsetMillis","jan1","isLeapYear","cumMonthLengthsLeap","cumMonthLengths","bsearch","round","getDayOfWeek","mod","getCalendar","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * JulianDate.js - Represent a date in the Julian calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nIDate.js \nTimeZone.js\nCalendar.js \nJulianCal.js \nSearchUtils.js \nMathUtils.js\nLocaleInfo.js \nJulianRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar JulianRataDie = require(\"./JulianRataDie.js\");\n\nvar JulianCal = require(\"./JulianCal.js\");\n/**\n * @class\n * Construct a new date object for the Julian Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero \n * year which doesn't exist in the Julian calendar\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * <li><i>day</i> - 1 to 31\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \n * of this julian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n * \n * NB. The <a href=\"http://en.wikipedia.org/wiki/Julian_date\">Julian Day</a> \n * (JulianDay) object is a <i>different</i> object than a \n * <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">date in\n * the Julian calendar</a> and the two are not to be confused. The Julian Day \n * object represents time as a number of whole and fractional days since the \n * beginning of the epoch, whereas a date in the Julian \n * calendar is a regular date that signifies year, month, day, etc. using the rules\n * of the Julian calendar. The naming of Julian Days and the Julian calendar are\n * unfortunately close, and come from history.<p>\n *  \n * If called with another Julian date argument, the date components of the given\n * date are copied into the current one.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian date\n */\n\n\nvar JulianDate = function JulianDate(params) {\n  this.cal = new JulianCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nJulianDate.prototype = new IDate({\n  noinstance: true\n});\nJulianDate.prototype.parent = IDate;\nJulianDate.prototype.constructor = JulianDate;\n/**\n * @private\n * Initialize the date\n */\n\nJulianDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Julian calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 (January) to 12 (December).\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 383.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing the date\n */\n\n\nJulianDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nJulianDate.prototype.newRd = function (params) {\n  return new JulianRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nJulianDate.prototype._calcYear = function (rd) {\n  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1464) / 1461);\n  return year <= 0 ? year - 1 : year;\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nJulianDate.prototype._calcDateComponents = function () {\n  var remainder,\n      cumulative,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  }\n\n  var jan1 = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd + 1 - jan1.getRataDie();\n  cumulative = this.cal.isLeapYear(this.year) ? JulianCal.cumMonthLengthsLeap : JulianCal.cumMonthLengths;\n  this.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\n  remainder = remainder - cumulative[this.month - 1];\n  this.day = Math.floor(remainder);\n  remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nJulianDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 2, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nJulianDate.prototype.getCalendar = function () {\n  return \"julian\";\n}; //register with the factory method\n\n\nIDate._constructors[\"julian\"] = JulianDate;\nmodule.exports = JulianDate;"]},"metadata":{},"sourceType":"module"}