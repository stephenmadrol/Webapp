{"ast":null,"code":"\"use strict\";\n/*\n * Loader.js - shared loader implementation\n * \n * Copyright Â© 2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Path.js */\n\nvar Path = require(\"./Path.js\");\n\nvar ilib = require(\"./ilib.js\");\n/** \n * @class\n * Superclass of the loader classes that contains shared functionality.\n * \n * @private\n * @constructor\n */\n\n\nvar Loader = function Loader() {\n  // console.log(\"new Loader instance\");\n  this.protocol = \"file://\";\n  this.includePath = [];\n};\n\nLoader.prototype = new ilib.Loader();\nLoader.prototype.parent = ilib.Loader;\nLoader.prototype.constructor = Loader;\n\nLoader.prototype._loadFile = function (pathname, sync, cb) {};\n\nLoader.prototype._exists = function (dir, file) {\n  var fullpath = Path.normalize(Path.join(dir, file));\n\n  if (this.protocol !== \"http://\") {\n    var text = this._loadFile(fullpath, true);\n\n    if (text) {\n      this.includePath.push(dir);\n    }\n  } else {\n    // put the dir on the list now assuming it exists, and check for its availability \n    // later so we can avoid the 404 errors eventually\n    this.includePath.push(dir);\n\n    this._loadFile(fullpath, false, ilib.bind(this, function (text) {\n      if (!text) {\n        //console.log(\"Loader._exists: removing \" + dir + \" from the include path because it doesn't exist.\");\n        this.includePath = this.includePath.slice(-1);\n      }\n    }));\n  }\n};\n\nLoader.prototype._loadFileAlongIncludePath = function (includePath, pathname) {\n  for (var i = 0; i < includePath.length; i++) {\n    var manifest = this.manifest[includePath[i]];\n\n    if (!manifest || Loader.indexOf(manifest, pathname) > -1) {\n      var filepath = Path.join(includePath[i], pathname); //console.log(\"Loader._loadFileAlongIncludePath: attempting sync load \" + filepath);\n\n      var text = this._loadFile(filepath, true);\n\n      if (text) {\n        //console.log(\"Loader._loadFileAlongIncludePath: succeeded\");\n        return text;\n      } //else {\n      //console.log(\"Loader._loadFileAlongIncludePath: failed\");\n      //} \n\n    } //else {\n    //console.log(\"Loader._loadFileAlongIncludePath: \" + pathname + \" not in manifest for \" + this.includePath[i]);\n    //}\n\n  } //console.log(\"Loader._loadFileAlongIncludePath: file not found anywhere along the path.\");\n\n\n  return undefined;\n};\n\nLoader.prototype.loadFiles = function (paths, sync, params, callback) {\n  var includePath = params && params.base ? [params.base].concat(this.includePath) : this.includePath; //console.log(\"Loader loadFiles called\");\n  // make sure we know what we can load\n\n  if (!paths) {\n    // nothing to load\n    //console.log(\"nothing to load\");\n    return;\n  }\n\n  if (params && params.returnOne) {\n    // Only return the most locale-specific data. Do this by searching backwards\n    // in the list of paths.\n    var pathname;\n    var tmp = [];\n\n    while ((pathname = paths.pop()) !== undefined) {\n      tmp.push(pathname);\n    }\n\n    paths = tmp;\n  } //console.log(\"generic loader: attempting to load these files: \" + JSON.stringify(paths) + \"\\n\");\n\n\n  if (sync) {\n    var ret = []; // synchronous\n\n    this._loadManifests(true);\n\n    for (var i = 0; i < paths.length; i++) {\n      var text = this._loadFileAlongIncludePath(includePath, Path.normalize(paths[i]));\n\n      ret.push(typeof text === \"string\" ? JSON.parse(text) : text);\n\n      if (params && params.returnOne && text) {\n        break;\n      }\n    }\n\n    ; // only call the callback at the end of the chain of files\n\n    if (typeof callback === 'function') {\n      callback(ret);\n    }\n\n    return ret;\n  } // asynchronous\n\n\n  this._loadManifests(false, ilib.bind(this, function () {\n    //console.log(\"Loader.loadFiles: now loading files asynchronously\");\n    var results = [];\n\n    this._loadFilesAsync(includePath, paths, results, callback);\n  }));\n};\n\nLoader.prototype._loadFilesAsyncAlongIncludePath = function (includes, filename, cb) {\n  var text = undefined;\n\n  if (includes.length > 0) {\n    var root = includes[0];\n    includes = includes.slice(1);\n    var manifest = this.manifest[root];\n\n    if (!manifest || Loader.indexOf(manifest, filename) > -1) {\n      var filepath = Path.join(root, filename);\n\n      this._loadFile(filepath, false, ilib.bind(this, function (t) {\n        //console.log(\"Loader._loadFilesAsyncAlongIncludePath: loading \" + (t ? \" success\" : \" failed\"));\n        if (t) {\n          cb(t);\n        } else {\n          this._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n        }\n      }));\n    } else {\n      //console.log(\"Loader._loadFilesAsyncAlongIncludePath: \" + filepath + \" not in manifest for \" + root);\n      this._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n    }\n  } else {\n    // file not found in any of the include paths\n    cb();\n  }\n};\n\nLoader.prototype._loadFilesAsync = function (includePath, paths, results, callback) {\n  if (paths.length > 0) {\n    var filename = paths[0];\n    paths = paths.slice(1); //console.log(\"Loader._loadFilesAsync: attempting to load \" + filename + \" along the include path.\");\n\n    this._loadFilesAsyncAlongIncludePath(includePath, filename, ilib.bind(this, function (json) {\n      results.push(typeof json === \"string\" ? JSON.parse(json) : json);\n\n      this._loadFilesAsync(includePath, paths, results, callback);\n    }));\n  } else {\n    // only call the callback at the end of the chain of files\n    if (typeof callback === 'function') {\n      callback(results);\n    }\n  }\n};\n\nLoader.prototype._loadManifestFile = function (i, sync, cb) {\n  //console.log(\"Loader._loadManifestFile: Checking include path \" + i + \" \" + this.includePath[i]);\n  if (i < this.includePath.length) {\n    var filepath = Path.join(this.includePath[i], \"ilibmanifest.json\"); //console.log(\"Loader._loadManifestFile: Loading manifest file \" + filepath);\n\n    var text = this._loadFile(filepath, sync, ilib.bind(this, function (text) {\n      if (text) {\n        //console.log(\"Loader._loadManifestFile: success!\");\n        this.manifest[this.includePath[i]] = (typeof text === \"string\" ? JSON.parse(text) : text).files;\n      } //else console.log(\"Loader._loadManifestFile: failed...\");\n\n\n      this._loadManifestFile(i + 1, sync, cb);\n    }));\n  } else {\n    if (typeof cb === 'function') {\n      //console.log(\"Loader._loadManifestFile: now calling callback function\");\n      cb();\n    }\n  }\n};\n\nLoader.prototype._loadManifests = function (sync, cb) {\n  //console.log(\"Loader._loadManifests: called \" + (sync ? \"synchronously\" : \"asychronously.\"));\n  if (!this.manifest) {\n    //console.log(\"Loader._loadManifests: attempting to find manifests\");\n    this.manifest = {};\n\n    if (typeof sync !== 'boolean') {\n      sync = true;\n    }\n\n    this._loadManifestFile(0, sync, cb);\n  } else {\n    //console.log(\"Loader._loadManifests: already loaded\");\n    if (typeof cb === 'function') {\n      //console.log(\"Loader._loadManifests: now calling callback function\");\n      cb();\n    }\n  }\n};\n\nLoader.prototype.listAvailableFiles = function (sync, cb) {\n  //console.log(\"generic loader: list available files called\");\n  this._loadManifests(sync, ilib.bind(this, function () {\n    if (typeof cb === 'function') {\n      //console.log(\"generic loader: now calling caller's callback function\");\n      cb(this.manifest);\n    }\n  }));\n\n  return this.manifest;\n};\n\nLoader.indexOf = function (array, obj) {\n  if (!array || !obj) {\n    return -1;\n  }\n\n  if (typeof array.indexOf === 'function') {\n    return array.indexOf(obj);\n  } else {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === obj) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n};\n\nLoader.prototype.checkAvailability = function (file) {\n  for (var dir in this.manifest) {\n    if (Loader.indexOf(this.manifest[dir], file) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nLoader.prototype.isAvailable = function (file, sync, cb) {\n  //console.log(\"Loader.isAvailable: called\");\n  if (typeof sync !== 'boolean') {\n    sync = true;\n  }\n\n  if (sync) {\n    this._loadManifests(sync);\n\n    return this.checkAvailability(file);\n  }\n\n  this._loadManifests(false, ilib.bind(this, function () {\n    // console.log(\"generic loader: isAvailable \" + path + \"? \");\n    if (typeof cb === 'function') {\n      cb(this.checkAvailability(file));\n    }\n  }));\n};\n\nmodule.exports = Loader;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/Loader.js"],"names":["Path","require","ilib","Loader","protocol","includePath","prototype","parent","constructor","_loadFile","pathname","sync","cb","_exists","dir","file","fullpath","normalize","join","text","push","bind","slice","_loadFileAlongIncludePath","i","length","manifest","indexOf","filepath","undefined","loadFiles","paths","params","callback","base","concat","returnOne","tmp","pop","ret","_loadManifests","JSON","parse","results","_loadFilesAsync","_loadFilesAsyncAlongIncludePath","includes","filename","root","t","json","_loadManifestFile","files","listAvailableFiles","array","obj","checkAvailability","isAvailable","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAlB;AACA;;;;;;;;;AASA,IAAIE,MAAM,GAAG,SAASA,MAAT,GAAkB;AAC7B;AACA,OAAKC,QAAL,GAAgB,SAAhB;AACA,OAAKC,WAAL,GAAmB,EAAnB;AACD,CAJD;;AAMAF,MAAM,CAACG,SAAP,GAAmB,IAAIJ,IAAI,CAACC,MAAT,EAAnB;AACAA,MAAM,CAACG,SAAP,CAAiBC,MAAjB,GAA0BL,IAAI,CAACC,MAA/B;AACAA,MAAM,CAACG,SAAP,CAAiBE,WAAjB,GAA+BL,MAA/B;;AAEAA,MAAM,CAACG,SAAP,CAAiBG,SAAjB,GAA6B,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,EAA1B,EAA8B,CAAE,CAA7D;;AAEAT,MAAM,CAACG,SAAP,CAAiBO,OAAjB,GAA2B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC9C,MAAIC,QAAQ,GAAGhB,IAAI,CAACiB,SAAL,CAAejB,IAAI,CAACkB,IAAL,CAAUJ,GAAV,EAAeC,IAAf,CAAf,CAAf;;AAEA,MAAI,KAAKX,QAAL,KAAkB,SAAtB,EAAiC;AAC/B,QAAIe,IAAI,GAAG,KAAKV,SAAL,CAAeO,QAAf,EAAyB,IAAzB,CAAX;;AAEA,QAAIG,IAAJ,EAAU;AACR,WAAKd,WAAL,CAAiBe,IAAjB,CAAsBN,GAAtB;AACD;AACF,GAND,MAMO;AACL;AACA;AACA,SAAKT,WAAL,CAAiBe,IAAjB,CAAsBN,GAAtB;;AAEA,SAAKL,SAAL,CAAeO,QAAf,EAAyB,KAAzB,EAAgCd,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,UAAUF,IAAV,EAAgB;AAC9D,UAAI,CAACA,IAAL,EAAW;AACT;AACA,aAAKd,WAAL,GAAmB,KAAKA,WAAL,CAAiBiB,KAAjB,CAAuB,CAAC,CAAxB,CAAnB;AACD;AACF,KAL+B,CAAhC;AAMD;AACF,CArBD;;AAuBAnB,MAAM,CAACG,SAAP,CAAiBiB,yBAAjB,GAA6C,UAAUlB,WAAV,EAAuBK,QAAvB,EAAiC;AAC5E,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,WAAW,CAACoB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIE,QAAQ,GAAG,KAAKA,QAAL,CAAcrB,WAAW,CAACmB,CAAD,CAAzB,CAAf;;AAEA,QAAI,CAACE,QAAD,IAAavB,MAAM,CAACwB,OAAP,CAAeD,QAAf,EAAyBhB,QAAzB,IAAqC,CAAC,CAAvD,EAA0D;AACxD,UAAIkB,QAAQ,GAAG5B,IAAI,CAACkB,IAAL,CAAUb,WAAW,CAACmB,CAAD,CAArB,EAA0Bd,QAA1B,CAAf,CADwD,CACJ;;AAEpD,UAAIS,IAAI,GAAG,KAAKV,SAAL,CAAemB,QAAf,EAAyB,IAAzB,CAAX;;AAEA,UAAIT,IAAJ,EAAU;AACR;AACA,eAAOA,IAAP;AACD,OARuD,CAQtD;AACF;AACA;;AAED,KAf0C,CAezC;AACF;AACA;;AAED,GApB2E,CAoB1E;;;AAGF,SAAOU,SAAP;AACD,CAxBD;;AA0BA1B,MAAM,CAACG,SAAP,CAAiBwB,SAAjB,GAA6B,UAAUC,KAAV,EAAiBpB,IAAjB,EAAuBqB,MAAvB,EAA+BC,QAA/B,EAAyC;AACpE,MAAI5B,WAAW,GAAG2B,MAAM,IAAIA,MAAM,CAACE,IAAjB,GAAwB,CAACF,MAAM,CAACE,IAAR,EAAcC,MAAd,CAAqB,KAAK9B,WAA1B,CAAxB,GAAiE,KAAKA,WAAxF,CADoE,CACiC;AACrG;;AAEA,MAAI,CAAC0B,KAAL,EAAY;AACV;AACA;AACA;AACD;;AAED,MAAIC,MAAM,IAAIA,MAAM,CAACI,SAArB,EAAgC;AAC9B;AACA;AACA,QAAI1B,QAAJ;AACA,QAAI2B,GAAG,GAAG,EAAV;;AAEA,WAAO,CAAC3B,QAAQ,GAAGqB,KAAK,CAACO,GAAN,EAAZ,MAA6BT,SAApC,EAA+C;AAC7CQ,MAAAA,GAAG,CAACjB,IAAJ,CAASV,QAAT;AACD;;AAEDqB,IAAAA,KAAK,GAAGM,GAAR;AACD,GArBmE,CAqBlE;;;AAGF,MAAI1B,IAAJ,EAAU;AACR,QAAI4B,GAAG,GAAG,EAAV,CADQ,CACM;;AAEd,SAAKC,cAAL,CAAoB,IAApB;;AAEA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAAK,CAACN,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAIL,IAAI,GAAG,KAAKI,yBAAL,CAA+BlB,WAA/B,EAA4CL,IAAI,CAACiB,SAAL,CAAec,KAAK,CAACP,CAAD,CAApB,CAA5C,CAAX;;AAEAe,MAAAA,GAAG,CAACnB,IAAJ,CAAS,OAAOD,IAAP,KAAgB,QAAhB,GAA2BsB,IAAI,CAACC,KAAL,CAAWvB,IAAX,CAA3B,GAA8CA,IAAvD;;AAEA,UAAIa,MAAM,IAAIA,MAAM,CAACI,SAAjB,IAA8BjB,IAAlC,EAAwC;AACtC;AACD;AACF;;AAED,KAfQ,CAeN;;AAEF,QAAI,OAAOc,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAACM,GAAD,CAAR;AACD;;AAED,WAAOA,GAAP;AACD,GA9CmE,CA8ClE;;;AAGF,OAAKC,cAAL,CAAoB,KAApB,EAA2BtC,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,YAAY;AACrD;AACA,QAAIsB,OAAO,GAAG,EAAd;;AAEA,SAAKC,eAAL,CAAqBvC,WAArB,EAAkC0B,KAAlC,EAAyCY,OAAzC,EAAkDV,QAAlD;AACD,GAL0B,CAA3B;AAMD,CAvDD;;AAyDA9B,MAAM,CAACG,SAAP,CAAiBuC,+BAAjB,GAAmD,UAAUC,QAAV,EAAoBC,QAApB,EAA8BnC,EAA9B,EAAkC;AACnF,MAAIO,IAAI,GAAGU,SAAX;;AAEA,MAAIiB,QAAQ,CAACrB,MAAT,GAAkB,CAAtB,EAAyB;AACvB,QAAIuB,IAAI,GAAGF,QAAQ,CAAC,CAAD,CAAnB;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACxB,KAAT,CAAe,CAAf,CAAX;AACA,QAAII,QAAQ,GAAG,KAAKA,QAAL,CAAcsB,IAAd,CAAf;;AAEA,QAAI,CAACtB,QAAD,IAAavB,MAAM,CAACwB,OAAP,CAAeD,QAAf,EAAyBqB,QAAzB,IAAqC,CAAC,CAAvD,EAA0D;AACxD,UAAInB,QAAQ,GAAG5B,IAAI,CAACkB,IAAL,CAAU8B,IAAV,EAAgBD,QAAhB,CAAf;;AAEA,WAAKtC,SAAL,CAAemB,QAAf,EAAyB,KAAzB,EAAgC1B,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,UAAU4B,CAAV,EAAa;AAC3D;AACA,YAAIA,CAAJ,EAAO;AACLrC,UAAAA,EAAE,CAACqC,CAAD,CAAF;AACD,SAFD,MAEO;AACL,eAAKJ,+BAAL,CAAqCC,QAArC,EAA+CC,QAA/C,EAAyDnC,EAAzD;AACD;AACF,OAP+B,CAAhC;AAQD,KAXD,MAWO;AACL;AACA,WAAKiC,+BAAL,CAAqCC,QAArC,EAA+CC,QAA/C,EAAyDnC,EAAzD;AACD;AACF,GApBD,MAoBO;AACL;AACAA,IAAAA,EAAE;AACH;AACF,CA3BD;;AA6BAT,MAAM,CAACG,SAAP,CAAiBsC,eAAjB,GAAmC,UAAUvC,WAAV,EAAuB0B,KAAvB,EAA8BY,OAA9B,EAAuCV,QAAvC,EAAiD;AAClF,MAAIF,KAAK,CAACN,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAIsB,QAAQ,GAAGhB,KAAK,CAAC,CAAD,CAApB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACT,KAAN,CAAY,CAAZ,CAAR,CAFoB,CAEI;;AAExB,SAAKuB,+BAAL,CAAqCxC,WAArC,EAAkD0C,QAAlD,EAA4D7C,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,UAAU6B,IAAV,EAAgB;AAC1FP,MAAAA,OAAO,CAACvB,IAAR,CAAa,OAAO8B,IAAP,KAAgB,QAAhB,GAA2BT,IAAI,CAACC,KAAL,CAAWQ,IAAX,CAA3B,GAA8CA,IAA3D;;AAEA,WAAKN,eAAL,CAAqBvC,WAArB,EAAkC0B,KAAlC,EAAyCY,OAAzC,EAAkDV,QAAlD;AACD,KAJ2D,CAA5D;AAKD,GATD,MASO;AACL;AACA,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,MAAAA,QAAQ,CAACU,OAAD,CAAR;AACD;AACF;AACF,CAhBD;;AAkBAxC,MAAM,CAACG,SAAP,CAAiB6C,iBAAjB,GAAqC,UAAU3B,CAAV,EAAab,IAAb,EAAmBC,EAAnB,EAAuB;AAC1D;AACA,MAAIY,CAAC,GAAG,KAAKnB,WAAL,CAAiBoB,MAAzB,EAAiC;AAC/B,QAAIG,QAAQ,GAAG5B,IAAI,CAACkB,IAAL,CAAU,KAAKb,WAAL,CAAiBmB,CAAjB,CAAV,EAA+B,mBAA/B,CAAf,CAD+B,CACqC;;AAEpE,QAAIL,IAAI,GAAG,KAAKV,SAAL,CAAemB,QAAf,EAAyBjB,IAAzB,EAA+BT,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,UAAUF,IAAV,EAAgB;AACxE,UAAIA,IAAJ,EAAU;AACR;AACA,aAAKO,QAAL,CAAc,KAAKrB,WAAL,CAAiBmB,CAAjB,CAAd,IAAqC,CAAC,OAAOL,IAAP,KAAgB,QAAhB,GAA2BsB,IAAI,CAACC,KAAL,CAAWvB,IAAX,CAA3B,GAA8CA,IAA/C,EAAqDiC,KAA1F;AACD,OAJuE,CAItE;;;AAGF,WAAKD,iBAAL,CAAuB3B,CAAC,GAAG,CAA3B,EAA8Bb,IAA9B,EAAoCC,EAApC;AACD,KARyC,CAA/B,CAAX;AASD,GAZD,MAYO;AACL,QAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B;AACAA,MAAAA,EAAE;AACH;AACF;AACF,CApBD;;AAsBAT,MAAM,CAACG,SAAP,CAAiBkC,cAAjB,GAAkC,UAAU7B,IAAV,EAAgBC,EAAhB,EAAoB;AACpD;AACA,MAAI,CAAC,KAAKc,QAAV,EAAoB;AAClB;AACA,SAAKA,QAAL,GAAgB,EAAhB;;AAEA,QAAI,OAAOf,IAAP,KAAgB,SAApB,EAA+B;AAC7BA,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAKwC,iBAAL,CAAuB,CAAvB,EAA0BxC,IAA1B,EAAgCC,EAAhC;AACD,GATD,MASO;AACL;AACA,QAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B;AACAA,MAAAA,EAAE;AACH;AACF;AACF,CAlBD;;AAoBAT,MAAM,CAACG,SAAP,CAAiB+C,kBAAjB,GAAsC,UAAU1C,IAAV,EAAgBC,EAAhB,EAAoB;AACxD;AACA,OAAK4B,cAAL,CAAoB7B,IAApB,EAA0BT,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,YAAY;AACpD,QAAI,OAAOT,EAAP,KAAc,UAAlB,EAA8B;AAC5B;AACAA,MAAAA,EAAE,CAAC,KAAKc,QAAN,CAAF;AACD;AACF,GALyB,CAA1B;;AAOA,SAAO,KAAKA,QAAZ;AACD,CAVD;;AAYAvB,MAAM,CAACwB,OAAP,GAAiB,UAAU2B,KAAV,EAAiBC,GAAjB,EAAsB;AACrC,MAAI,CAACD,KAAD,IAAU,CAACC,GAAf,EAAoB;AAClB,WAAO,CAAC,CAAR;AACD;;AAED,MAAI,OAAOD,KAAK,CAAC3B,OAAb,KAAyB,UAA7B,EAAyC;AACvC,WAAO2B,KAAK,CAAC3B,OAAN,CAAc4B,GAAd,CAAP;AACD,GAFD,MAEO;AACL,SAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,KAAK,CAAC7B,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAI8B,KAAK,CAAC9B,CAAD,CAAL,KAAa+B,GAAjB,EAAsB;AACpB,eAAO/B,CAAP;AACD;AACF;;AAED,WAAO,CAAC,CAAR;AACD;AACF,CAhBD;;AAkBArB,MAAM,CAACG,SAAP,CAAiBkD,iBAAjB,GAAqC,UAAUzC,IAAV,EAAgB;AACnD,OAAK,IAAID,GAAT,IAAgB,KAAKY,QAArB,EAA+B;AAC7B,QAAIvB,MAAM,CAACwB,OAAP,CAAe,KAAKD,QAAL,CAAcZ,GAAd,CAAf,EAAmCC,IAAnC,MAA6C,CAAC,CAAlD,EAAqD;AACnD,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CARD;;AAUAZ,MAAM,CAACG,SAAP,CAAiBmD,WAAjB,GAA+B,UAAU1C,IAAV,EAAgBJ,IAAhB,EAAsBC,EAAtB,EAA0B;AACvD;AACA,MAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC7BA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAED,MAAIA,IAAJ,EAAU;AACR,SAAK6B,cAAL,CAAoB7B,IAApB;;AAEA,WAAO,KAAK6C,iBAAL,CAAuBzC,IAAvB,CAAP;AACD;;AAED,OAAKyB,cAAL,CAAoB,KAApB,EAA2BtC,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,YAAY;AACrD;AACA,QAAI,OAAOT,EAAP,KAAc,UAAlB,EAA8B;AAC5BA,MAAAA,EAAE,CAAC,KAAK4C,iBAAL,CAAuBzC,IAAvB,CAAD,CAAF;AACD;AACF,GAL0B,CAA3B;AAMD,CAlBD;;AAoBA2C,MAAM,CAACC,OAAP,GAAiBxD,MAAjB","sourcesContent":["\"use strict\";\n\n/*\n * Loader.js - shared loader implementation\n * \n * Copyright Â© 2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Path.js */\nvar Path = require(\"./Path.js\");\n\nvar ilib = require(\"./ilib.js\");\n/** \n * @class\n * Superclass of the loader classes that contains shared functionality.\n * \n * @private\n * @constructor\n */\n\n\nvar Loader = function Loader() {\n  // console.log(\"new Loader instance\");\n  this.protocol = \"file://\";\n  this.includePath = [];\n};\n\nLoader.prototype = new ilib.Loader();\nLoader.prototype.parent = ilib.Loader;\nLoader.prototype.constructor = Loader;\n\nLoader.prototype._loadFile = function (pathname, sync, cb) {};\n\nLoader.prototype._exists = function (dir, file) {\n  var fullpath = Path.normalize(Path.join(dir, file));\n\n  if (this.protocol !== \"http://\") {\n    var text = this._loadFile(fullpath, true);\n\n    if (text) {\n      this.includePath.push(dir);\n    }\n  } else {\n    // put the dir on the list now assuming it exists, and check for its availability \n    // later so we can avoid the 404 errors eventually\n    this.includePath.push(dir);\n\n    this._loadFile(fullpath, false, ilib.bind(this, function (text) {\n      if (!text) {\n        //console.log(\"Loader._exists: removing \" + dir + \" from the include path because it doesn't exist.\");\n        this.includePath = this.includePath.slice(-1);\n      }\n    }));\n  }\n};\n\nLoader.prototype._loadFileAlongIncludePath = function (includePath, pathname) {\n  for (var i = 0; i < includePath.length; i++) {\n    var manifest = this.manifest[includePath[i]];\n\n    if (!manifest || Loader.indexOf(manifest, pathname) > -1) {\n      var filepath = Path.join(includePath[i], pathname); //console.log(\"Loader._loadFileAlongIncludePath: attempting sync load \" + filepath);\n\n      var text = this._loadFile(filepath, true);\n\n      if (text) {\n        //console.log(\"Loader._loadFileAlongIncludePath: succeeded\");\n        return text;\n      } //else {\n      //console.log(\"Loader._loadFileAlongIncludePath: failed\");\n      //} \n\n    } //else {\n    //console.log(\"Loader._loadFileAlongIncludePath: \" + pathname + \" not in manifest for \" + this.includePath[i]);\n    //}\n\n  } //console.log(\"Loader._loadFileAlongIncludePath: file not found anywhere along the path.\");\n\n\n  return undefined;\n};\n\nLoader.prototype.loadFiles = function (paths, sync, params, callback) {\n  var includePath = params && params.base ? [params.base].concat(this.includePath) : this.includePath; //console.log(\"Loader loadFiles called\");\n  // make sure we know what we can load\n\n  if (!paths) {\n    // nothing to load\n    //console.log(\"nothing to load\");\n    return;\n  }\n\n  if (params && params.returnOne) {\n    // Only return the most locale-specific data. Do this by searching backwards\n    // in the list of paths.\n    var pathname;\n    var tmp = [];\n\n    while ((pathname = paths.pop()) !== undefined) {\n      tmp.push(pathname);\n    }\n\n    paths = tmp;\n  } //console.log(\"generic loader: attempting to load these files: \" + JSON.stringify(paths) + \"\\n\");\n\n\n  if (sync) {\n    var ret = []; // synchronous\n\n    this._loadManifests(true);\n\n    for (var i = 0; i < paths.length; i++) {\n      var text = this._loadFileAlongIncludePath(includePath, Path.normalize(paths[i]));\n\n      ret.push(typeof text === \"string\" ? JSON.parse(text) : text);\n\n      if (params && params.returnOne && text) {\n        break;\n      }\n    }\n\n    ; // only call the callback at the end of the chain of files\n\n    if (typeof callback === 'function') {\n      callback(ret);\n    }\n\n    return ret;\n  } // asynchronous\n\n\n  this._loadManifests(false, ilib.bind(this, function () {\n    //console.log(\"Loader.loadFiles: now loading files asynchronously\");\n    var results = [];\n\n    this._loadFilesAsync(includePath, paths, results, callback);\n  }));\n};\n\nLoader.prototype._loadFilesAsyncAlongIncludePath = function (includes, filename, cb) {\n  var text = undefined;\n\n  if (includes.length > 0) {\n    var root = includes[0];\n    includes = includes.slice(1);\n    var manifest = this.manifest[root];\n\n    if (!manifest || Loader.indexOf(manifest, filename) > -1) {\n      var filepath = Path.join(root, filename);\n\n      this._loadFile(filepath, false, ilib.bind(this, function (t) {\n        //console.log(\"Loader._loadFilesAsyncAlongIncludePath: loading \" + (t ? \" success\" : \" failed\"));\n        if (t) {\n          cb(t);\n        } else {\n          this._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n        }\n      }));\n    } else {\n      //console.log(\"Loader._loadFilesAsyncAlongIncludePath: \" + filepath + \" not in manifest for \" + root);\n      this._loadFilesAsyncAlongIncludePath(includes, filename, cb);\n    }\n  } else {\n    // file not found in any of the include paths\n    cb();\n  }\n};\n\nLoader.prototype._loadFilesAsync = function (includePath, paths, results, callback) {\n  if (paths.length > 0) {\n    var filename = paths[0];\n    paths = paths.slice(1); //console.log(\"Loader._loadFilesAsync: attempting to load \" + filename + \" along the include path.\");\n\n    this._loadFilesAsyncAlongIncludePath(includePath, filename, ilib.bind(this, function (json) {\n      results.push(typeof json === \"string\" ? JSON.parse(json) : json);\n\n      this._loadFilesAsync(includePath, paths, results, callback);\n    }));\n  } else {\n    // only call the callback at the end of the chain of files\n    if (typeof callback === 'function') {\n      callback(results);\n    }\n  }\n};\n\nLoader.prototype._loadManifestFile = function (i, sync, cb) {\n  //console.log(\"Loader._loadManifestFile: Checking include path \" + i + \" \" + this.includePath[i]);\n  if (i < this.includePath.length) {\n    var filepath = Path.join(this.includePath[i], \"ilibmanifest.json\"); //console.log(\"Loader._loadManifestFile: Loading manifest file \" + filepath);\n\n    var text = this._loadFile(filepath, sync, ilib.bind(this, function (text) {\n      if (text) {\n        //console.log(\"Loader._loadManifestFile: success!\");\n        this.manifest[this.includePath[i]] = (typeof text === \"string\" ? JSON.parse(text) : text).files;\n      } //else console.log(\"Loader._loadManifestFile: failed...\");\n\n\n      this._loadManifestFile(i + 1, sync, cb);\n    }));\n  } else {\n    if (typeof cb === 'function') {\n      //console.log(\"Loader._loadManifestFile: now calling callback function\");\n      cb();\n    }\n  }\n};\n\nLoader.prototype._loadManifests = function (sync, cb) {\n  //console.log(\"Loader._loadManifests: called \" + (sync ? \"synchronously\" : \"asychronously.\"));\n  if (!this.manifest) {\n    //console.log(\"Loader._loadManifests: attempting to find manifests\");\n    this.manifest = {};\n\n    if (typeof sync !== 'boolean') {\n      sync = true;\n    }\n\n    this._loadManifestFile(0, sync, cb);\n  } else {\n    //console.log(\"Loader._loadManifests: already loaded\");\n    if (typeof cb === 'function') {\n      //console.log(\"Loader._loadManifests: now calling callback function\");\n      cb();\n    }\n  }\n};\n\nLoader.prototype.listAvailableFiles = function (sync, cb) {\n  //console.log(\"generic loader: list available files called\");\n  this._loadManifests(sync, ilib.bind(this, function () {\n    if (typeof cb === 'function') {\n      //console.log(\"generic loader: now calling caller's callback function\");\n      cb(this.manifest);\n    }\n  }));\n\n  return this.manifest;\n};\n\nLoader.indexOf = function (array, obj) {\n  if (!array || !obj) {\n    return -1;\n  }\n\n  if (typeof array.indexOf === 'function') {\n    return array.indexOf(obj);\n  } else {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === obj) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n};\n\nLoader.prototype.checkAvailability = function (file) {\n  for (var dir in this.manifest) {\n    if (Loader.indexOf(this.manifest[dir], file) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nLoader.prototype.isAvailable = function (file, sync, cb) {\n  //console.log(\"Loader.isAvailable: called\");\n  if (typeof sync !== 'boolean') {\n    sync = true;\n  }\n\n  if (sync) {\n    this._loadManifests(sync);\n\n    return this.checkAvailability(file);\n  }\n\n  this._loadManifests(false, ilib.bind(this, function () {\n    // console.log(\"generic loader: isAvailable \" + path + \"? \");\n    if (typeof cb === 'function') {\n      cb(this.checkAvailability(file));\n    }\n  }));\n};\n\nmodule.exports = Loader;"]},"metadata":{},"sourceType":"module"}