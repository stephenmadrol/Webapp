{"ast":null,"code":"\"use strict\";\n/*\n * astro.js - Static functions to support astronomical calculations\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nIDate.js\nUtils.js\nMathUtils.js\nSearchUtils.js\nGregorianDate.js\nGregRataDie.js\n*/\n// !data astro\n\n/*\n * These routines were derived from a public domain set of JavaScript \n * functions for positional astronomy by John Walker of Fourmilab, \n * September 1999.\n */\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n\nvar Astro = {};\n/**\n * Load in all the data needed for astrological calculations.\n * \n * @private\n * @param {boolean} sync\n * @param {*} loadParams\n * @param {function(*)|undefined} callback\n */\n\nAstro.initAstro = function (sync, loadParams, callback) {\n  if (!ilib.data.astro) {\n    Utils.loadData({\n      object: \"Astro\",\n      name: \"astro.json\",\n      // countries in their own language \n      locale: \"-\",\n      // only need to load the root file \n      nonLocale: true,\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (astroData) {\n        /** \n         * @type {{\n         *  \t_EquinoxpTerms:Array.<number>, \n         *  \t_JDE0tab1000:Array.<number>, \n         *  \t_JDE0tab2000:Array.<number>, \n         *  \t_deltaTtab:Array.<number>,\n         *  \t_oterms:Array.<number>,\n         *  \t_nutArgMult:Array.<number>, \n         *  \t_nutArgCoeff:Array.<number>, \n         *  \t_nutCoeffA:Array.<number>,\n         *  \t_nutCoeffB:Array.<number>,\n         *  \t_coeff19th:Array.<number>,\n         *  \t_coeff18th:Array.<number>,\n         *  \t_solarLongCoeff:Array.<number>, \n         *  \t_solarLongMultipliers:Array.<number>, \n         *  \t_solarLongAddends:Array.<number>, \n         *  \t_meanMoonCoeff:Array.<number>,\n         *  \t_elongationCoeff:Array.<number>,\n         *  \t_solarAnomalyCoeff:Array.<number>,\n         *  \t_lunarAnomalyCoeff:Array.<number>,\n         *  \t_moonFromNodeCoeff:Array.<number>,\n         *  \t_eCoeff:Array.<number>,\n         *  \t_lunarElongationLongCoeff:Array.<number>,\n         *  \t_solarAnomalyLongCoeff:Array.<number>,\n         *  \t_lunarAnomalyLongCoeff:Array.<number>,\n         *  \t_moonFromNodeLongCoeff:Array.<number>,\n         *  \t_sineCoeff:Array.<number>,\n         *  \t_nmApproxCoeff:Array.<number>,\n         *  \t_nmCapECoeff:Array.<number>,\n         *  \t_nmSolarAnomalyCoeff:Array.<number>,\n         *  \t_nmLunarAnomalyCoeff:Array.<number>,\n         *  \t_nmMoonArgumentCoeff:Array.<number>,\n         *  \t_nmCapOmegaCoeff:Array.<number>,\n         *  \t_nmEFactor:Array.<number>,\n         *  \t_nmSolarCoeff:Array.<number>,\n         *  \t_nmLunarCoeff:Array.<number>,\n         *  \t_nmMoonCoeff:Array.<number>,\n         *  \t_nmSineCoeff:Array.<number>,\n         *  \t_nmAddConst:Array.<number>,\n         *  \t_nmAddCoeff:Array.<number>,\n         *  \t_nmAddFactor:Array.<number>,\n         *  \t_nmExtra:Array.<number>\n         *  }}\n         */\n        ilib.data.astro = astroData;\n\n        if (callback && typeof callback === 'function') {\n          callback(astroData);\n        }\n      })\n    });\n  } else {\n    if (callback && typeof callback === 'function') {\n      callback(ilib.data.astro);\n    }\n  }\n};\n/**\n * Convert degrees to radians.\n * \n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} angle in radians \n */\n\n\nAstro._dtr = function (d) {\n  return d * Math.PI / 180.0;\n};\n/**\n * Convert radians to degrees.\n * \n * @static\n * @protected\n * @param {number} r angle in radians\n * @return {number} angle in degrees \n */\n\n\nAstro._rtd = function (r) {\n  return r * 180.0 / Math.PI;\n};\n/**\n * Return the cosine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} cosine of the angle.\n */\n\n\nAstro._dcos = function (d) {\n  return Math.cos(Astro._dtr(d));\n};\n/**\n * Return the sine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} sine of the angle.\n */\n\n\nAstro._dsin = function (d) {\n  return Math.sin(Astro._dtr(d));\n};\n/**\n * Return the tan of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} tan of the angle.\n */\n\n\nAstro._dtan = function (d) {\n  return Math.tan(Astro._dtr(d));\n};\n/**\n * Range reduce angle in degrees.\n * \n * @static\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\n\n\nAstro._fixangle = function (a) {\n  return a - 360.0 * Math.floor(a / 360.0);\n};\n/**\n * Range reduce angle in radians.\n * \n * @static\n * @protected\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\n\n\nAstro._fixangr = function (a) {\n  return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));\n};\n/**\n * Determine the Julian Ephemeris Day of an equinox or solstice.  The \"which\" \n * argument selects the item to be computed:\n * \n * <ul>\n * <li>0   March equinox\n * <li>1   June solstice\n * <li>2   September equinox\n * <li>3   December solstice\n * </ul>\n * \n * @static\n * @protected\n * @param {number} year Gregorian year to calculate for\n * @param {number} which Which equinox or solstice to calculate\n */\n\n\nAstro._equinox = function (year, which) {\n  var deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;\n  /*  Initialize terms for mean equinox and solstices.  We\n      have two sets: one for years prior to 1000 and a second\n      for subsequent years.  */\n\n  if (year < 1000) {\n    JDE0tab = ilib.data.astro._JDE0tab1000;\n    Y = year / 1000;\n  } else {\n    JDE0tab = ilib.data.astro._JDE0tab2000;\n    Y = (year - 2000) / 1000;\n  }\n\n  JDE0 = JDE0tab[which][0] + JDE0tab[which][1] * Y + JDE0tab[which][2] * Y * Y + JDE0tab[which][3] * Y * Y * Y + JDE0tab[which][4] * Y * Y * Y * Y; //document.debug.log.value += \"JDE0 = \" + JDE0 + \"\\n\";\n\n  T = (JDE0 - 2451545.0) / 36525; //document.debug.log.value += \"T = \" + T + \"\\n\";\n\n  W = 35999.373 * T - 2.47; //document.debug.log.value += \"W = \" + W + \"\\n\";\n\n  deltaL = 1 + 0.0334 * Astro._dcos(W) + 0.0007 * Astro._dcos(2 * W); //document.debug.log.value += \"deltaL = \" + deltaL + \"\\n\";\n  //  Sum the periodic terms for time T\n\n  S = 0;\n  j = 0;\n\n  for (i = 0; i < 24; i++) {\n    S += ilib.data.astro._EquinoxpTerms[j] * Astro._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + ilib.data.astro._EquinoxpTerms[j + 2] * T);\n    j += 3;\n  } //document.debug.log.value += \"S = \" + S + \"\\n\";\n  //document.debug.log.value += \"Corr = \" + ((S * 0.00001) / deltaL) + \"\\n\";\n\n\n  JDE = JDE0 + S * 0.00001 / deltaL;\n  return JDE;\n};\n/* \n * The table of observed Delta T values at the beginning of\n * years from 1620 through 2014 as found in astro.json is taken from\n * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm\n * and\n * ftp://maia.usno.navy.mil/ser7/deltat.data\n */\n\n/**  \n * Determine the difference, in seconds, between dynamical time and universal time.\n * \n * @static\n * @protected\n * @param {number} year to calculate the difference for\n * @return {number} difference in seconds between dynamical time and universal time  \n */\n\n\nAstro._deltat = function (year) {\n  var dt, f, i, t;\n\n  if (year >= 1620 && year <= 2014) {\n    i = Math.floor(year - 1620);\n    f = year - 1620 - i;\n    /* Fractional part of year */\n\n    dt = ilib.data.astro._deltaTtab[i] + (ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f;\n  } else {\n    t = (year - 2000) / 100;\n\n    if (year < 948) {\n      dt = 2177 + 497 * t + 44.1 * t * t;\n    } else {\n      dt = 102 + 102 * t + 25.3 * t * t;\n\n      if (year > 2000 && year < 2100) {\n        dt += 0.37 * (year - 2100);\n      }\n    }\n  }\n\n  return dt;\n};\n/**\n * Calculate the obliquity of the ecliptic for a given\n * Julian date.  This uses Laskar's tenth-degree\n * polynomial fit (J. Laskar, Astronomy and\n * Astrophysics, Vol. 157, page 68 [1986]) which is\n * accurate to within 0.01 arc second between AD 1000\n * and AD 3000, and within a few seconds of arc for\n * +/-10000 years around AD 2000.  If we're outside the\n * range in which this fit is valid (deep time) we\n * simply return the J2000 value of the obliquity, which\n * happens to be almost precisely the mean.\n * \n * @static\n * @protected\n * @param {number} jd Julian Day to calculate the obliquity for\n * @return {number} the obliquity\n */\n\n\nAstro._obliqeq = function (jd) {\n  var eps, u, v, i;\n  v = u = (jd - 2451545.0) / 3652500.0;\n  eps = 23 + 26 / 60.0 + 21.448 / 3600.0;\n\n  if (Math.abs(u) < 1.0) {\n    for (i = 0; i < 10; i++) {\n      eps += ilib.data.astro._oterms[i] / 3600.0 * v;\n      v *= u;\n    }\n  }\n\n  return eps;\n};\n/**\n * Return the position of the sun.  We return\n * intermediate values because they are useful in a\n * variety of other contexts.\n * @static\n * @protected\n * @param {number} jd find the position of sun on this Julian Day\n * @return {Object} the position of the sun and many intermediate\n * values\n */\n\n\nAstro._sunpos = function (jd) {\n  var ret = {},\n      T,\n      T2,\n      T3,\n      Omega,\n      epsilon,\n      epsilon0;\n  T = (jd - 2451545.0) / 36525.0; //document.debug.log.value += \"Sunpos.  T = \" + T + \"\\n\";\n\n  T2 = T * T;\n  T3 = T * T2;\n  ret.meanLongitude = Astro._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2); //document.debug.log.value += \"ret.meanLongitude = \" + ret.meanLongitude + \"\\n\";\n\n  ret.meanAnomaly = Astro._fixangle(357.52911 + 35999.05029 * T - 0.0001537 * T2 - 0.00000048 * T3); //document.debug.log.value += \"ret.meanAnomaly = \" + ret.meanAnomaly + \"\\n\";\n\n  ret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2; //document.debug.log.value += \"e = \" + e + \"\\n\";\n\n  ret.equationOfCenter = (1.914602 - 0.004817 * T - 0.000014 * T2) * Astro._dsin(ret.meanAnomaly) + (0.019993 - 0.000101 * T) * Astro._dsin(2 * ret.meanAnomaly) + 0.000289 * Astro._dsin(3 * ret.meanAnomaly); //document.debug.log.value += \"ret.equationOfCenter = \" + ret.equationOfCenter + \"\\n\";\n\n  ret.sunLongitude = ret.meanLongitude + ret.equationOfCenter; //document.debug.log.value += \"ret.sunLongitude = \" + ret.sunLongitude + \"\\n\";\n  //ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;\n  //document.debug.log.value += \"ret.sunAnomaly = \" + ret.sunAnomaly + \"\\n\";\n  // ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * Astro._dcos(ret.sunAnomaly)));\n  //document.debug.log.value += \"ret.sunRadius = \" + ret.sunRadius + \"\\n\";\n\n  Omega = 125.04 - 1934.136 * T; //document.debug.log.value += \"Omega = \" + Omega + \"\\n\";\n\n  ret.apparentLong = ret.sunLongitude + -0.00569 + -0.00478 * Astro._dsin(Omega); //document.debug.log.value += \"ret.apparentLong = \" + ret.apparentLong + \"\\n\";\n\n  epsilon0 = Astro._obliqeq(jd); //document.debug.log.value += \"epsilon0 = \" + epsilon0 + \"\\n\";\n\n  epsilon = epsilon0 + 0.00256 * Astro._dcos(Omega); //document.debug.log.value += \"epsilon = \" + epsilon + \"\\n\";\n  //ret.rightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon0) * Astro._dsin(ret.sunLongitude), Astro._dcos(ret.sunLongitude))));\n  //document.debug.log.value += \"ret.rightAscension = \" + ret.rightAscension + \"\\n\";\n  // ret.declination = Astro._rtd(Math.asin(Astro._dsin(epsilon0) * Astro._dsin(ret.sunLongitude)));\n  ////document.debug.log.value += \"ret.declination = \" + ret.declination + \"\\n\";\n\n  ret.inclination = Astro._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);\n  ret.apparentRightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon) * Astro._dsin(ret.apparentLong), Astro._dcos(ret.apparentLong)))); //document.debug.log.value += \"ret.apparentRightAscension = \" + ret.apparentRightAscension + \"\\n\";\n  //ret.apparentDeclination = Astro._rtd(Math.asin(Astro._dsin(epsilon) * Astro._dsin(ret.apparentLong)));\n  //document.debug.log.value += \"ret.apparentDecliation = \" + ret.apparentDecliation + \"\\n\";\n  // Angular quantities are expressed in decimal degrees\n\n  return ret;\n};\n/**\n * Calculate the nutation in longitude, deltaPsi, and obliquity, \n * deltaEpsilon for a given Julian date jd. Results are returned as an object\n * giving deltaPsi and deltaEpsilon in degrees.\n * \n * @static\n * @protected\n * @param {number} jd calculate the nutation of this Julian Day\n * @return {Object} the deltaPsi and deltaEpsilon of the nutation\n */\n\n\nAstro._nutation = function (jd) {\n  var i,\n      j,\n      t = (jd - 2451545.0) / 36525.0,\n      t2,\n      t3,\n      to10,\n      ta = [],\n      dp = 0,\n      de = 0,\n      ang,\n      ret = {};\n  t3 = t * (t2 = t * t);\n  /*\n   * Calculate angles. The correspondence between the elements of our array\n   * and the terms cited in Meeus are:\n   * \n   * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \\Omega\n   * \n   */\n\n  ta[0] = Astro._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\n  ta[1] = Astro._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\n  ta[2] = Astro._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\n  ta[3] = Astro._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\n  ta[4] = Astro._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\n  /*\n   * Range reduce the angles in case the sine and cosine functions don't do it\n   * as accurately or quickly.\n   */\n\n  for (i = 0; i < 5; i++) {\n    ta[i] = Astro._fixangr(ta[i]);\n  }\n\n  to10 = t / 10.0;\n\n  for (i = 0; i < 63; i++) {\n    ang = 0;\n\n    for (j = 0; j < 5; j++) {\n      if (ilib.data.astro._nutArgMult[i * 5 + j] != 0) {\n        ang += ilib.data.astro._nutArgMult[i * 5 + j] * ta[j];\n      }\n    }\n\n    dp += (ilib.data.astro._nutArgCoeff[i * 4 + 0] + ilib.data.astro._nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang);\n    de += (ilib.data.astro._nutArgCoeff[i * 4 + 2] + ilib.data.astro._nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang);\n  }\n  /*\n   * Return the result, converting from ten thousandths of arc seconds to\n   * radians in the process.\n   */\n\n\n  ret.deltaPsi = dp / (3600.0 * 10000.0);\n  ret.deltaEpsilon = de / (3600.0 * 10000.0);\n  return ret;\n};\n/**\n * Returns the equation of time as a fraction of a day.\n * \n * @static\n * @protected\n * @param {number} jd the Julian Day of the day to calculate for\n * @return {number} the equation of time for the given day  \n */\n\n\nAstro._equationOfTime = function (jd) {\n  var alpha, deltaPsi, E, epsilon, L0, tau, pos; // 2451545.0 is the Julian day of J2000 epoch\n  // 365250.0 is the number of days in a Julian millenium\n\n  tau = (jd - 2451545.0) / 365250.0; //console.log(\"equationOfTime.  tau = \" + tau);\n\n  L0 = 280.4664567 + 360007.6982779 * tau + 0.03032028 * tau * tau + tau * tau * tau / 49931 + -(tau * tau * tau * tau / 15300) + -(tau * tau * tau * tau * tau / 2000000); //console.log(\"L0 = \" + L0);\n\n  L0 = Astro._fixangle(L0); //console.log(\"L0 = \" + L0);\n\n  pos = Astro._sunpos(jd);\n  alpha = pos.apparentRightAscension; //console.log(\"alpha = \" + alpha);\n\n  var nut = Astro._nutation(jd);\n\n  deltaPsi = nut.deltaPsi; //console.log(\"deltaPsi = \" + deltaPsi);\n\n  epsilon = Astro._obliqeq(jd) + nut.deltaEpsilon; //console.log(\"epsilon = \" + epsilon);\n  //console.log(\"L0 - 0.0057183 = \" + (L0 - 0.0057183));\n  //console.log(\"L0 - 0.0057183 - alpha = \" + (L0 - 0.0057183 - alpha));\n  //console.log(\"deltaPsi * cos(epsilon) = \" + deltaPsi * Astro._dcos(epsilon));\n\n  E = L0 - 0.0057183 - alpha + deltaPsi * Astro._dcos(epsilon); // if alpha and L0 are in different quadrants, then renormalize\n  // so that the difference between them is in the right range\n\n  if (E > 180) {\n    E -= 360;\n  } //console.log(\"E = \" + E);\n  // E = E - 20.0 * (Math.floor(E / 20.0));\n\n\n  E = E * 4; //console.log(\"Efixed = \" + E);\n\n  E = E / (24 * 60); //console.log(\"Eday = \" + E);\n\n  return E;\n};\n/**\n * @private\n * @static\n */\n\n\nAstro._poly = function (x, coefficients) {\n  var result = coefficients[0];\n  var xpow = x;\n\n  for (var i = 1; i < coefficients.length; i++) {\n    result += coefficients[i] * xpow;\n    xpow *= x;\n  }\n\n  return result;\n};\n/**\n * Calculate the UTC RD from the local RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\n\n\nAstro._universalFromLocal = function (local, zone) {\n  return local - zone / 1440;\n};\n/**\n * Calculate the local RD from the UTC RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\n\n\nAstro._localFromUniversal = function (local, zone) {\n  return local + zone / 1440;\n};\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the aberration\n */\n\n\nAstro._aberration = function (c) {\n  return 9.74e-05 * Astro._dcos(177.63 + 35999.01847999999 * c) - 0.005575;\n};\n/**\n * @private\n *\nilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];\nilib.data.astro._nutCoeffB q= [201.11, 72001.5377, 0.00057];\n*/\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the nutation for the given julian century in radians\n */\n\n\nAstro._nutation2 = function (c) {\n  var a = Astro._poly(c, ilib.data.astro._nutCoeffA);\n\n  var b = Astro._poly(c, ilib.data.astro._nutCoeffB); // return -0.0000834 * Astro._dsin(a) - 0.0000064 * Astro._dsin(b);\n\n\n  return -0.004778 * Astro._dsin(a) - 0.0003667 * Astro._dsin(b);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._ephemerisCorrection = function (jd) {\n  var year = GregorianDate._calcYear(jd - 1721424.5);\n\n  if (1988 <= year && year <= 2019) {\n    return (year - 1933) / 86400;\n  }\n\n  if (1800 <= year && year <= 1987) {\n    var jul1 = new GregRataDie({\n      year: year,\n      month: 7,\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0\n    }); // 693596 is the rd of Jan 1, 1900\n\n    var theta = (jul1.getRataDie() - 693596) / 36525;\n    return Astro._poly(theta, 1900 <= year ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);\n  }\n\n  if (1620 <= year && year <= 1799) {\n    year -= 1600;\n    return (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;\n  } // 660724 is the rd of Jan 1, 1810\n\n\n  var jan1 = new GregRataDie({\n    year: year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0\n  }); // var x = 0.5 + (jan1.getRataDie() - 660724);\n\n  var x = 0.5 + (jan1.getRataDie() - 660724);\n  return (x * x / 41048480 - 15) / 86400;\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._ephemerisFromUniversal = function (jd) {\n  return jd + Astro._ephemerisCorrection(jd);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._universalFromEphemeris = function (jd) {\n  return jd - Astro._ephemerisCorrection(jd);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._julianCenturies = function (jd) {\n  // 2451545.0 is the Julian day of J2000 epoch\n  // 730119.5 is the Gregorian RD of J2000 epoch\n  // 36525.0 is the number of days in a Julian century\n  return (Astro._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;\n};\n/**\n * Calculate the solar longitude\n * \n * @static\n * @protected\n * @param {number} jd julian day of the date to calculate the longitude for \n * @return {number} the solar longitude in degrees\n */\n\n\nAstro._solarLongitude = function (jd) {\n  var c = Astro._julianCenturies(jd),\n      longitude = 0,\n      len = ilib.data.astro._solarLongCoeff.length,\n      row;\n\n  for (var i = 0; i < len; i++) {\n    longitude += ilib.data.astro._solarLongCoeff[i] * Astro._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);\n  }\n\n  longitude *= 5.729577951308232e-06;\n  longitude += 282.77718340000001 + 36000.769537439999 * c;\n  longitude += Astro._aberration(c) + Astro._nutation2(c);\n  return Astro._fixangle(longitude);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._lunarLongitude = function (jd) {\n  var c = Astro._julianCenturies(jd),\n      meanMoon = Astro._fixangle(Astro._poly(c, ilib.data.astro._meanMoonCoeff)),\n      elongation = Astro._fixangle(Astro._poly(c, ilib.data.astro._elongationCoeff)),\n      solarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._solarAnomalyCoeff)),\n      lunarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._lunarAnomalyCoeff)),\n      moonNode = Astro._fixangle(Astro._poly(c, ilib.data.astro._moonFromNodeCoeff)),\n      e = Astro._poly(c, ilib.data.astro._eCoeff);\n\n  var sum = 0;\n\n  for (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {\n    var x = ilib.data.astro._solarAnomalyLongCoeff[i];\n    sum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * Astro._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + ilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + ilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);\n  }\n\n  var longitude = sum / 1000000;\n\n  var venus = 3958.0 / 1000000 * Astro._dsin(119.75 + c * 131.84899999999999);\n\n  var jupiter = 318.0 / 1000000 * Astro._dsin(53.090000000000003 + c * 479264.28999999998);\n\n  var flatEarth = 1962.0 / 1000000 * Astro._dsin(meanMoon - moonNode);\n\n  return Astro._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + Astro._nutation2(c));\n};\n/**\n * @static\n * @protected\n * @param {number} n\n * @return {number} julian day of the n'th new moon\n */\n\n\nAstro._newMoonTime = function (n) {\n  var k = n - 24724;\n  var c = k / 1236.8499999999999;\n\n  var approx = Astro._poly(c, ilib.data.astro._nmApproxCoeff);\n\n  var capE = Astro._poly(c, ilib.data.astro._nmCapECoeff);\n\n  var solarAnomaly = Astro._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);\n\n  var lunarAnomaly = Astro._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);\n\n  var moonArgument = Astro._poly(c, ilib.data.astro._nmMoonArgumentCoeff);\n\n  var capOmega = Astro._poly(c, ilib.data.astro._nmCapOmegaCoeff);\n\n  var correction = -0.00017 * Astro._dsin(capOmega);\n\n  for (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {\n    correction = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * Astro._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + ilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + ilib.data.astro._nmMoonCoeff[i] * moonArgument);\n  }\n\n  var additional = 0;\n\n  for (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {\n    additional = additional + ilib.data.astro._nmAddFactor[i] * Astro._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);\n  }\n\n  var extra = 0.000325 * Astro._dsin(Astro._poly(c, ilib.data.astro._nmExtra));\n\n  return Astro._universalFromEphemeris(approx + correction + extra + additional + RataDie.gregorianEpoch);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._lunarSolarAngle = function (jd) {\n  var lunar = Astro._lunarLongitude(jd);\n\n  var solar = Astro._solarLongitude(jd);\n\n  return Astro._fixangle(lunar - solar);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._newMoonBefore = function (jd) {\n  var phase = Astro._lunarSolarAngle(jd); // 11.450086114414322 is the julian day of the 0th full moon\n  // 29.530588853000001 is the average length of a month\n\n\n  var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;\n  var current, last;\n  current = last = Astro._newMoonTime(guess);\n\n  while (current < jd) {\n    guess++;\n    last = current;\n    current = Astro._newMoonTime(guess);\n  }\n\n  return last;\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._newMoonAtOrAfter = function (jd) {\n  var phase = Astro._lunarSolarAngle(jd); // 11.450086114414322 is the julian day of the 0th full moon\n  // 29.530588853000001 is the average length of a month\n\n\n  var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);\n  var current;\n\n  while ((current = Astro._newMoonTime(guess)) < jd) {\n    guess++;\n  }\n\n  return current;\n};\n/**\n * @static\n * @protected\n * @param {number} jd JD to calculate from\n * @param {number} longitude longitude to seek \n * @returns {number} the JD of the next time that the solar longitude \n * is a multiple of the given longitude\n */\n\n\nAstro._nextSolarLongitude = function (jd, longitude) {\n  var rate = 365.242189 / 360.0;\n\n  var tau = jd + rate * Astro._fixangle(longitude - Astro._solarLongitude(jd));\n\n  var start = Math.max(jd, tau - 5.0);\n  var end = tau + 5.0;\n  return SearchUtils.bisectionSearch(0, start, end, 1e-6, function (l) {\n    return 180 - Astro._fixangle(Astro._solarLongitude(l) - longitude);\n  });\n};\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\n\n\nAstro._floorToJD = function (jd) {\n  return Math.floor(jd - 0.5) + 0.5;\n};\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\n\n\nAstro._ceilToJD = function (jd) {\n  return Math.ceil(jd + 0.5) - 0.5;\n};\n\nmodule.exports = Astro;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\i18n\\ilib\\lib\\Astro.js"],"names":["ilib","require","Utils","MathUtils","SearchUtils","GregorianDate","RataDie","GregRataDie","Astro","initAstro","sync","loadParams","callback","data","astro","loadData","object","name","locale","nonLocale","bind","astroData","_dtr","d","Math","PI","_rtd","r","_dcos","cos","_dsin","sin","_dtan","tan","_fixangle","a","floor","_fixangr","_equinox","year","which","deltaL","i","j","JDE0","JDE","JDE0tab","S","T","W","Y","_JDE0tab1000","_JDE0tab2000","_EquinoxpTerms","_deltat","dt","f","t","_deltaTtab","_obliqeq","jd","eps","u","v","abs","_oterms","_sunpos","ret","T2","T3","Omega","epsilon","epsilon0","meanLongitude","meanAnomaly","eccentricity","equationOfCenter","sunLongitude","apparentLong","inclination","apparentRightAscension","atan2","_nutation","t2","t3","to10","ta","dp","de","ang","_nutArgMult","_nutArgCoeff","deltaPsi","deltaEpsilon","_equationOfTime","alpha","E","L0","tau","pos","nut","_poly","x","coefficients","result","xpow","length","_universalFromLocal","local","zone","_localFromUniversal","_aberration","c","_nutation2","_nutCoeffA","b","_nutCoeffB","_ephemerisCorrection","_calcYear","jul1","month","day","hour","minute","second","theta","getRataDie","_coeff19th","_coeff18th","jan1","_ephemerisFromUniversal","_universalFromEphemeris","_julianCenturies","_solarLongitude","longitude","len","_solarLongCoeff","row","_solarLongAddends","_solarLongMultipliers","_lunarLongitude","meanMoon","_meanMoonCoeff","elongation","_elongationCoeff","solarAnomaly","_solarAnomalyCoeff","lunarAnomaly","_lunarAnomalyCoeff","moonNode","_moonFromNodeCoeff","e","_eCoeff","sum","_lunarElongationLongCoeff","_solarAnomalyLongCoeff","_sineCoeff","pow","_lunarAnomalyLongCoeff","_moonFromNodeLongCoeff","venus","jupiter","flatEarth","_newMoonTime","n","k","approx","_nmApproxCoeff","capE","_nmCapECoeff","_nmSolarAnomalyCoeff","_nmLunarAnomalyCoeff","moonArgument","_nmMoonArgumentCoeff","capOmega","_nmCapOmegaCoeff","correction","_nmSineCoeff","_nmEFactor","_nmSolarCoeff","_nmLunarCoeff","_nmMoonCoeff","additional","_nmAddConst","_nmAddFactor","_nmAddCoeff","extra","_nmExtra","gregorianEpoch","_lunarSolarAngle","lunar","solar","_newMoonBefore","phase","guess","round","current","last","_newMoonAtOrAfter","_nextSolarLongitude","rate","start","max","end","bisectionSearch","l","_floorToJD","_ceilToJD","ceil","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * astro.js - Static functions to support astronomical calculations\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nIDate.js\nUtils.js\nMathUtils.js\nSearchUtils.js\nGregorianDate.js\nGregRataDie.js\n*/\n// !data astro\n\n/*\n * These routines were derived from a public domain set of JavaScript \n * functions for positional astronomy by John Walker of Fourmilab, \n * September 1999.\n */\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n\nvar Astro = {};\n/**\n * Load in all the data needed for astrological calculations.\n * \n * @private\n * @param {boolean} sync\n * @param {*} loadParams\n * @param {function(*)|undefined} callback\n */\n\nAstro.initAstro = function (sync, loadParams, callback) {\n  if (!ilib.data.astro) {\n    Utils.loadData({\n      object: \"Astro\",\n      name: \"astro.json\",\n      // countries in their own language \n      locale: \"-\",\n      // only need to load the root file \n      nonLocale: true,\n      sync: sync,\n      loadParams: loadParams,\n      callback: ilib.bind(this, function (astroData) {\n        /** \n         * @type {{\n         *  \t_EquinoxpTerms:Array.<number>, \n         *  \t_JDE0tab1000:Array.<number>, \n         *  \t_JDE0tab2000:Array.<number>, \n         *  \t_deltaTtab:Array.<number>,\n         *  \t_oterms:Array.<number>,\n         *  \t_nutArgMult:Array.<number>, \n         *  \t_nutArgCoeff:Array.<number>, \n         *  \t_nutCoeffA:Array.<number>,\n         *  \t_nutCoeffB:Array.<number>,\n         *  \t_coeff19th:Array.<number>,\n         *  \t_coeff18th:Array.<number>,\n         *  \t_solarLongCoeff:Array.<number>, \n         *  \t_solarLongMultipliers:Array.<number>, \n         *  \t_solarLongAddends:Array.<number>, \n         *  \t_meanMoonCoeff:Array.<number>,\n         *  \t_elongationCoeff:Array.<number>,\n         *  \t_solarAnomalyCoeff:Array.<number>,\n         *  \t_lunarAnomalyCoeff:Array.<number>,\n         *  \t_moonFromNodeCoeff:Array.<number>,\n         *  \t_eCoeff:Array.<number>,\n         *  \t_lunarElongationLongCoeff:Array.<number>,\n         *  \t_solarAnomalyLongCoeff:Array.<number>,\n         *  \t_lunarAnomalyLongCoeff:Array.<number>,\n         *  \t_moonFromNodeLongCoeff:Array.<number>,\n         *  \t_sineCoeff:Array.<number>,\n         *  \t_nmApproxCoeff:Array.<number>,\n         *  \t_nmCapECoeff:Array.<number>,\n         *  \t_nmSolarAnomalyCoeff:Array.<number>,\n         *  \t_nmLunarAnomalyCoeff:Array.<number>,\n         *  \t_nmMoonArgumentCoeff:Array.<number>,\n         *  \t_nmCapOmegaCoeff:Array.<number>,\n         *  \t_nmEFactor:Array.<number>,\n         *  \t_nmSolarCoeff:Array.<number>,\n         *  \t_nmLunarCoeff:Array.<number>,\n         *  \t_nmMoonCoeff:Array.<number>,\n         *  \t_nmSineCoeff:Array.<number>,\n         *  \t_nmAddConst:Array.<number>,\n         *  \t_nmAddCoeff:Array.<number>,\n         *  \t_nmAddFactor:Array.<number>,\n         *  \t_nmExtra:Array.<number>\n         *  }}\n         */\n        ilib.data.astro = astroData;\n\n        if (callback && typeof callback === 'function') {\n          callback(astroData);\n        }\n      })\n    });\n  } else {\n    if (callback && typeof callback === 'function') {\n      callback(ilib.data.astro);\n    }\n  }\n};\n/**\n * Convert degrees to radians.\n * \n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} angle in radians \n */\n\n\nAstro._dtr = function (d) {\n  return d * Math.PI / 180.0;\n};\n/**\n * Convert radians to degrees.\n * \n * @static\n * @protected\n * @param {number} r angle in radians\n * @return {number} angle in degrees \n */\n\n\nAstro._rtd = function (r) {\n  return r * 180.0 / Math.PI;\n};\n/**\n * Return the cosine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} cosine of the angle.\n */\n\n\nAstro._dcos = function (d) {\n  return Math.cos(Astro._dtr(d));\n};\n/**\n * Return the sine of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} sine of the angle.\n */\n\n\nAstro._dsin = function (d) {\n  return Math.sin(Astro._dtr(d));\n};\n/**\n * Return the tan of an angle given in degrees.\n * @static\n * @protected\n * @param {number} d angle in degrees\n * @return {number} tan of the angle.\n */\n\n\nAstro._dtan = function (d) {\n  return Math.tan(Astro._dtr(d));\n};\n/**\n * Range reduce angle in degrees.\n * \n * @static\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\n\n\nAstro._fixangle = function (a) {\n  return a - 360.0 * Math.floor(a / 360.0);\n};\n/**\n * Range reduce angle in radians.\n * \n * @static\n * @protected\n * @param {number} a angle to reduce\n * @return {number} the reduced angle  \n */\n\n\nAstro._fixangr = function (a) {\n  return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));\n};\n/**\n * Determine the Julian Ephemeris Day of an equinox or solstice.  The \"which\" \n * argument selects the item to be computed:\n * \n * <ul>\n * <li>0   March equinox\n * <li>1   June solstice\n * <li>2   September equinox\n * <li>3   December solstice\n * </ul>\n * \n * @static\n * @protected\n * @param {number} year Gregorian year to calculate for\n * @param {number} which Which equinox or solstice to calculate\n */\n\n\nAstro._equinox = function (year, which) {\n  var deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;\n  /*  Initialize terms for mean equinox and solstices.  We\n      have two sets: one for years prior to 1000 and a second\n      for subsequent years.  */\n\n  if (year < 1000) {\n    JDE0tab = ilib.data.astro._JDE0tab1000;\n    Y = year / 1000;\n  } else {\n    JDE0tab = ilib.data.astro._JDE0tab2000;\n    Y = (year - 2000) / 1000;\n  }\n\n  JDE0 = JDE0tab[which][0] + JDE0tab[which][1] * Y + JDE0tab[which][2] * Y * Y + JDE0tab[which][3] * Y * Y * Y + JDE0tab[which][4] * Y * Y * Y * Y; //document.debug.log.value += \"JDE0 = \" + JDE0 + \"\\n\";\n\n  T = (JDE0 - 2451545.0) / 36525; //document.debug.log.value += \"T = \" + T + \"\\n\";\n\n  W = 35999.373 * T - 2.47; //document.debug.log.value += \"W = \" + W + \"\\n\";\n\n  deltaL = 1 + 0.0334 * Astro._dcos(W) + 0.0007 * Astro._dcos(2 * W); //document.debug.log.value += \"deltaL = \" + deltaL + \"\\n\";\n  //  Sum the periodic terms for time T\n\n  S = 0;\n  j = 0;\n\n  for (i = 0; i < 24; i++) {\n    S += ilib.data.astro._EquinoxpTerms[j] * Astro._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + ilib.data.astro._EquinoxpTerms[j + 2] * T);\n    j += 3;\n  } //document.debug.log.value += \"S = \" + S + \"\\n\";\n  //document.debug.log.value += \"Corr = \" + ((S * 0.00001) / deltaL) + \"\\n\";\n\n\n  JDE = JDE0 + S * 0.00001 / deltaL;\n  return JDE;\n};\n/* \n * The table of observed Delta T values at the beginning of\n * years from 1620 through 2014 as found in astro.json is taken from\n * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm\n * and\n * ftp://maia.usno.navy.mil/ser7/deltat.data\n */\n\n/**  \n * Determine the difference, in seconds, between dynamical time and universal time.\n * \n * @static\n * @protected\n * @param {number} year to calculate the difference for\n * @return {number} difference in seconds between dynamical time and universal time  \n */\n\n\nAstro._deltat = function (year) {\n  var dt, f, i, t;\n\n  if (year >= 1620 && year <= 2014) {\n    i = Math.floor(year - 1620);\n    f = year - 1620 - i;\n    /* Fractional part of year */\n\n    dt = ilib.data.astro._deltaTtab[i] + (ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f;\n  } else {\n    t = (year - 2000) / 100;\n\n    if (year < 948) {\n      dt = 2177 + 497 * t + 44.1 * t * t;\n    } else {\n      dt = 102 + 102 * t + 25.3 * t * t;\n\n      if (year > 2000 && year < 2100) {\n        dt += 0.37 * (year - 2100);\n      }\n    }\n  }\n\n  return dt;\n};\n/**\n * Calculate the obliquity of the ecliptic for a given\n * Julian date.  This uses Laskar's tenth-degree\n * polynomial fit (J. Laskar, Astronomy and\n * Astrophysics, Vol. 157, page 68 [1986]) which is\n * accurate to within 0.01 arc second between AD 1000\n * and AD 3000, and within a few seconds of arc for\n * +/-10000 years around AD 2000.  If we're outside the\n * range in which this fit is valid (deep time) we\n * simply return the J2000 value of the obliquity, which\n * happens to be almost precisely the mean.\n * \n * @static\n * @protected\n * @param {number} jd Julian Day to calculate the obliquity for\n * @return {number} the obliquity\n */\n\n\nAstro._obliqeq = function (jd) {\n  var eps, u, v, i;\n  v = u = (jd - 2451545.0) / 3652500.0;\n  eps = 23 + 26 / 60.0 + 21.448 / 3600.0;\n\n  if (Math.abs(u) < 1.0) {\n    for (i = 0; i < 10; i++) {\n      eps += ilib.data.astro._oterms[i] / 3600.0 * v;\n      v *= u;\n    }\n  }\n\n  return eps;\n};\n/**\n * Return the position of the sun.  We return\n * intermediate values because they are useful in a\n * variety of other contexts.\n * @static\n * @protected\n * @param {number} jd find the position of sun on this Julian Day\n * @return {Object} the position of the sun and many intermediate\n * values\n */\n\n\nAstro._sunpos = function (jd) {\n  var ret = {},\n      T,\n      T2,\n      T3,\n      Omega,\n      epsilon,\n      epsilon0;\n  T = (jd - 2451545.0) / 36525.0; //document.debug.log.value += \"Sunpos.  T = \" + T + \"\\n\";\n\n  T2 = T * T;\n  T3 = T * T2;\n  ret.meanLongitude = Astro._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2); //document.debug.log.value += \"ret.meanLongitude = \" + ret.meanLongitude + \"\\n\";\n\n  ret.meanAnomaly = Astro._fixangle(357.52911 + 35999.05029 * T - 0.0001537 * T2 - 0.00000048 * T3); //document.debug.log.value += \"ret.meanAnomaly = \" + ret.meanAnomaly + \"\\n\";\n\n  ret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2; //document.debug.log.value += \"e = \" + e + \"\\n\";\n\n  ret.equationOfCenter = (1.914602 - 0.004817 * T - 0.000014 * T2) * Astro._dsin(ret.meanAnomaly) + (0.019993 - 0.000101 * T) * Astro._dsin(2 * ret.meanAnomaly) + 0.000289 * Astro._dsin(3 * ret.meanAnomaly); //document.debug.log.value += \"ret.equationOfCenter = \" + ret.equationOfCenter + \"\\n\";\n\n  ret.sunLongitude = ret.meanLongitude + ret.equationOfCenter; //document.debug.log.value += \"ret.sunLongitude = \" + ret.sunLongitude + \"\\n\";\n  //ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;\n  //document.debug.log.value += \"ret.sunAnomaly = \" + ret.sunAnomaly + \"\\n\";\n  // ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * Astro._dcos(ret.sunAnomaly)));\n  //document.debug.log.value += \"ret.sunRadius = \" + ret.sunRadius + \"\\n\";\n\n  Omega = 125.04 - 1934.136 * T; //document.debug.log.value += \"Omega = \" + Omega + \"\\n\";\n\n  ret.apparentLong = ret.sunLongitude + -0.00569 + -0.00478 * Astro._dsin(Omega); //document.debug.log.value += \"ret.apparentLong = \" + ret.apparentLong + \"\\n\";\n\n  epsilon0 = Astro._obliqeq(jd); //document.debug.log.value += \"epsilon0 = \" + epsilon0 + \"\\n\";\n\n  epsilon = epsilon0 + 0.00256 * Astro._dcos(Omega); //document.debug.log.value += \"epsilon = \" + epsilon + \"\\n\";\n  //ret.rightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon0) * Astro._dsin(ret.sunLongitude), Astro._dcos(ret.sunLongitude))));\n  //document.debug.log.value += \"ret.rightAscension = \" + ret.rightAscension + \"\\n\";\n  // ret.declination = Astro._rtd(Math.asin(Astro._dsin(epsilon0) * Astro._dsin(ret.sunLongitude)));\n  ////document.debug.log.value += \"ret.declination = \" + ret.declination + \"\\n\";\n\n  ret.inclination = Astro._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);\n  ret.apparentRightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon) * Astro._dsin(ret.apparentLong), Astro._dcos(ret.apparentLong)))); //document.debug.log.value += \"ret.apparentRightAscension = \" + ret.apparentRightAscension + \"\\n\";\n  //ret.apparentDeclination = Astro._rtd(Math.asin(Astro._dsin(epsilon) * Astro._dsin(ret.apparentLong)));\n  //document.debug.log.value += \"ret.apparentDecliation = \" + ret.apparentDecliation + \"\\n\";\n  // Angular quantities are expressed in decimal degrees\n\n  return ret;\n};\n/**\n * Calculate the nutation in longitude, deltaPsi, and obliquity, \n * deltaEpsilon for a given Julian date jd. Results are returned as an object\n * giving deltaPsi and deltaEpsilon in degrees.\n * \n * @static\n * @protected\n * @param {number} jd calculate the nutation of this Julian Day\n * @return {Object} the deltaPsi and deltaEpsilon of the nutation\n */\n\n\nAstro._nutation = function (jd) {\n  var i,\n      j,\n      t = (jd - 2451545.0) / 36525.0,\n      t2,\n      t3,\n      to10,\n      ta = [],\n      dp = 0,\n      de = 0,\n      ang,\n      ret = {};\n  t3 = t * (t2 = t * t);\n  /*\n   * Calculate angles. The correspondence between the elements of our array\n   * and the terms cited in Meeus are:\n   * \n   * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \\Omega\n   * \n   */\n\n  ta[0] = Astro._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\n  ta[1] = Astro._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\n  ta[2] = Astro._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\n  ta[3] = Astro._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\n  ta[4] = Astro._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\n  /*\n   * Range reduce the angles in case the sine and cosine functions don't do it\n   * as accurately or quickly.\n   */\n\n  for (i = 0; i < 5; i++) {\n    ta[i] = Astro._fixangr(ta[i]);\n  }\n\n  to10 = t / 10.0;\n\n  for (i = 0; i < 63; i++) {\n    ang = 0;\n\n    for (j = 0; j < 5; j++) {\n      if (ilib.data.astro._nutArgMult[i * 5 + j] != 0) {\n        ang += ilib.data.astro._nutArgMult[i * 5 + j] * ta[j];\n      }\n    }\n\n    dp += (ilib.data.astro._nutArgCoeff[i * 4 + 0] + ilib.data.astro._nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang);\n    de += (ilib.data.astro._nutArgCoeff[i * 4 + 2] + ilib.data.astro._nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang);\n  }\n  /*\n   * Return the result, converting from ten thousandths of arc seconds to\n   * radians in the process.\n   */\n\n\n  ret.deltaPsi = dp / (3600.0 * 10000.0);\n  ret.deltaEpsilon = de / (3600.0 * 10000.0);\n  return ret;\n};\n/**\n * Returns the equation of time as a fraction of a day.\n * \n * @static\n * @protected\n * @param {number} jd the Julian Day of the day to calculate for\n * @return {number} the equation of time for the given day  \n */\n\n\nAstro._equationOfTime = function (jd) {\n  var alpha, deltaPsi, E, epsilon, L0, tau, pos; // 2451545.0 is the Julian day of J2000 epoch\n  // 365250.0 is the number of days in a Julian millenium\n\n  tau = (jd - 2451545.0) / 365250.0; //console.log(\"equationOfTime.  tau = \" + tau);\n\n  L0 = 280.4664567 + 360007.6982779 * tau + 0.03032028 * tau * tau + tau * tau * tau / 49931 + -(tau * tau * tau * tau / 15300) + -(tau * tau * tau * tau * tau / 2000000); //console.log(\"L0 = \" + L0);\n\n  L0 = Astro._fixangle(L0); //console.log(\"L0 = \" + L0);\n\n  pos = Astro._sunpos(jd);\n  alpha = pos.apparentRightAscension; //console.log(\"alpha = \" + alpha);\n\n  var nut = Astro._nutation(jd);\n\n  deltaPsi = nut.deltaPsi; //console.log(\"deltaPsi = \" + deltaPsi);\n\n  epsilon = Astro._obliqeq(jd) + nut.deltaEpsilon; //console.log(\"epsilon = \" + epsilon);\n  //console.log(\"L0 - 0.0057183 = \" + (L0 - 0.0057183));\n  //console.log(\"L0 - 0.0057183 - alpha = \" + (L0 - 0.0057183 - alpha));\n  //console.log(\"deltaPsi * cos(epsilon) = \" + deltaPsi * Astro._dcos(epsilon));\n\n  E = L0 - 0.0057183 - alpha + deltaPsi * Astro._dcos(epsilon); // if alpha and L0 are in different quadrants, then renormalize\n  // so that the difference between them is in the right range\n\n  if (E > 180) {\n    E -= 360;\n  } //console.log(\"E = \" + E);\n  // E = E - 20.0 * (Math.floor(E / 20.0));\n\n\n  E = E * 4; //console.log(\"Efixed = \" + E);\n\n  E = E / (24 * 60); //console.log(\"Eday = \" + E);\n\n  return E;\n};\n/**\n * @private\n * @static\n */\n\n\nAstro._poly = function (x, coefficients) {\n  var result = coefficients[0];\n  var xpow = x;\n\n  for (var i = 1; i < coefficients.length; i++) {\n    result += coefficients[i] * xpow;\n    xpow *= x;\n  }\n\n  return result;\n};\n/**\n * Calculate the UTC RD from the local RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\n\n\nAstro._universalFromLocal = function (local, zone) {\n  return local - zone / 1440;\n};\n/**\n * Calculate the local RD from the UTC RD given \"zone\" number of minutes\n * worth of offset.\n * \n * @static\n * @protected\n * @param {number} local RD of the locale time, given in any calendar\n * @param {number} zone number of minutes of offset from UTC for the time zone \n * @return {number} the UTC equivalent of the local RD\n */\n\n\nAstro._localFromUniversal = function (local, zone) {\n  return local + zone / 1440;\n};\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the aberration\n */\n\n\nAstro._aberration = function (c) {\n  return 9.74e-05 * Astro._dcos(177.63 + 35999.01847999999 * c) - 0.005575;\n};\n/**\n * @private\n *\nilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];\nilib.data.astro._nutCoeffB q= [201.11, 72001.5377, 0.00057];\n*/\n\n/**\n * @private\n * @static\n * @param {number} c julian centuries of the date to calculate\n * @return {number} the nutation for the given julian century in radians\n */\n\n\nAstro._nutation2 = function (c) {\n  var a = Astro._poly(c, ilib.data.astro._nutCoeffA);\n\n  var b = Astro._poly(c, ilib.data.astro._nutCoeffB); // return -0.0000834 * Astro._dsin(a) - 0.0000064 * Astro._dsin(b);\n\n\n  return -0.004778 * Astro._dsin(a) - 0.0003667 * Astro._dsin(b);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._ephemerisCorrection = function (jd) {\n  var year = GregorianDate._calcYear(jd - 1721424.5);\n\n  if (1988 <= year && year <= 2019) {\n    return (year - 1933) / 86400;\n  }\n\n  if (1800 <= year && year <= 1987) {\n    var jul1 = new GregRataDie({\n      year: year,\n      month: 7,\n      day: 1,\n      hour: 0,\n      minute: 0,\n      second: 0\n    }); // 693596 is the rd of Jan 1, 1900\n\n    var theta = (jul1.getRataDie() - 693596) / 36525;\n    return Astro._poly(theta, 1900 <= year ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);\n  }\n\n  if (1620 <= year && year <= 1799) {\n    year -= 1600;\n    return (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;\n  } // 660724 is the rd of Jan 1, 1810\n\n\n  var jan1 = new GregRataDie({\n    year: year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0\n  }); // var x = 0.5 + (jan1.getRataDie() - 660724);\n\n  var x = 0.5 + (jan1.getRataDie() - 660724);\n  return (x * x / 41048480 - 15) / 86400;\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._ephemerisFromUniversal = function (jd) {\n  return jd + Astro._ephemerisCorrection(jd);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._universalFromEphemeris = function (jd) {\n  return jd - Astro._ephemerisCorrection(jd);\n};\n/**\n * @static\n * @private\n */\n\n\nAstro._julianCenturies = function (jd) {\n  // 2451545.0 is the Julian day of J2000 epoch\n  // 730119.5 is the Gregorian RD of J2000 epoch\n  // 36525.0 is the number of days in a Julian century\n  return (Astro._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;\n};\n/**\n * Calculate the solar longitude\n * \n * @static\n * @protected\n * @param {number} jd julian day of the date to calculate the longitude for \n * @return {number} the solar longitude in degrees\n */\n\n\nAstro._solarLongitude = function (jd) {\n  var c = Astro._julianCenturies(jd),\n      longitude = 0,\n      len = ilib.data.astro._solarLongCoeff.length,\n      row;\n\n  for (var i = 0; i < len; i++) {\n    longitude += ilib.data.astro._solarLongCoeff[i] * Astro._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);\n  }\n\n  longitude *= 5.729577951308232e-06;\n  longitude += 282.77718340000001 + 36000.769537439999 * c;\n  longitude += Astro._aberration(c) + Astro._nutation2(c);\n  return Astro._fixangle(longitude);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._lunarLongitude = function (jd) {\n  var c = Astro._julianCenturies(jd),\n      meanMoon = Astro._fixangle(Astro._poly(c, ilib.data.astro._meanMoonCoeff)),\n      elongation = Astro._fixangle(Astro._poly(c, ilib.data.astro._elongationCoeff)),\n      solarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._solarAnomalyCoeff)),\n      lunarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._lunarAnomalyCoeff)),\n      moonNode = Astro._fixangle(Astro._poly(c, ilib.data.astro._moonFromNodeCoeff)),\n      e = Astro._poly(c, ilib.data.astro._eCoeff);\n\n  var sum = 0;\n\n  for (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {\n    var x = ilib.data.astro._solarAnomalyLongCoeff[i];\n    sum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * Astro._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + ilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + ilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);\n  }\n\n  var longitude = sum / 1000000;\n\n  var venus = 3958.0 / 1000000 * Astro._dsin(119.75 + c * 131.84899999999999);\n\n  var jupiter = 318.0 / 1000000 * Astro._dsin(53.090000000000003 + c * 479264.28999999998);\n\n  var flatEarth = 1962.0 / 1000000 * Astro._dsin(meanMoon - moonNode);\n\n  return Astro._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + Astro._nutation2(c));\n};\n/**\n * @static\n * @protected\n * @param {number} n\n * @return {number} julian day of the n'th new moon\n */\n\n\nAstro._newMoonTime = function (n) {\n  var k = n - 24724;\n  var c = k / 1236.8499999999999;\n\n  var approx = Astro._poly(c, ilib.data.astro._nmApproxCoeff);\n\n  var capE = Astro._poly(c, ilib.data.astro._nmCapECoeff);\n\n  var solarAnomaly = Astro._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);\n\n  var lunarAnomaly = Astro._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);\n\n  var moonArgument = Astro._poly(c, ilib.data.astro._nmMoonArgumentCoeff);\n\n  var capOmega = Astro._poly(c, ilib.data.astro._nmCapOmegaCoeff);\n\n  var correction = -0.00017 * Astro._dsin(capOmega);\n\n  for (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {\n    correction = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * Astro._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + ilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + ilib.data.astro._nmMoonCoeff[i] * moonArgument);\n  }\n\n  var additional = 0;\n\n  for (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {\n    additional = additional + ilib.data.astro._nmAddFactor[i] * Astro._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);\n  }\n\n  var extra = 0.000325 * Astro._dsin(Astro._poly(c, ilib.data.astro._nmExtra));\n\n  return Astro._universalFromEphemeris(approx + correction + extra + additional + RataDie.gregorianEpoch);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._lunarSolarAngle = function (jd) {\n  var lunar = Astro._lunarLongitude(jd);\n\n  var solar = Astro._solarLongitude(jd);\n\n  return Astro._fixangle(lunar - solar);\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._newMoonBefore = function (jd) {\n  var phase = Astro._lunarSolarAngle(jd); // 11.450086114414322 is the julian day of the 0th full moon\n  // 29.530588853000001 is the average length of a month\n\n\n  var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;\n  var current, last;\n  current = last = Astro._newMoonTime(guess);\n\n  while (current < jd) {\n    guess++;\n    last = current;\n    current = Astro._newMoonTime(guess);\n  }\n\n  return last;\n};\n/**\n * @static\n * @protected\n * @param {number} jd\n * @return {number}\n */\n\n\nAstro._newMoonAtOrAfter = function (jd) {\n  var phase = Astro._lunarSolarAngle(jd); // 11.450086114414322 is the julian day of the 0th full moon\n  // 29.530588853000001 is the average length of a month\n\n\n  var guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);\n  var current;\n\n  while ((current = Astro._newMoonTime(guess)) < jd) {\n    guess++;\n  }\n\n  return current;\n};\n/**\n * @static\n * @protected\n * @param {number} jd JD to calculate from\n * @param {number} longitude longitude to seek \n * @returns {number} the JD of the next time that the solar longitude \n * is a multiple of the given longitude\n */\n\n\nAstro._nextSolarLongitude = function (jd, longitude) {\n  var rate = 365.242189 / 360.0;\n\n  var tau = jd + rate * Astro._fixangle(longitude - Astro._solarLongitude(jd));\n\n  var start = Math.max(jd, tau - 5.0);\n  var end = tau + 5.0;\n  return SearchUtils.bisectionSearch(0, start, end, 1e-6, function (l) {\n    return 180 - Astro._fixangle(Astro._solarLongitude(l) - longitude);\n  });\n};\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\n\n\nAstro._floorToJD = function (jd) {\n  return Math.floor(jd - 0.5) + 0.5;\n};\n/**\n * Floor the julian day to midnight of the current julian day.\n * \n * @static\n * @protected\n * @param {number} jd the julian to round\n * @return {number} the jd floored to the midnight of the julian day\n */\n\n\nAstro._ceilToJD = function (jd) {\n  return Math.ceil(jd + 0.5) - 0.5;\n};\n\nmodule.exports = Astro;"]},"metadata":{},"sourceType":"module"}