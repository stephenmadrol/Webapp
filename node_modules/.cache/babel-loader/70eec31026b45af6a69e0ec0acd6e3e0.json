{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"toLowerCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toLowerCase;\n  }\n});\nObject.defineProperty(exports, \"toUpperCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toUpperCase;\n  }\n});\nexports.toWordCase = exports.toCapitalized = exports.isRtlText = void 0;\n\nrequire(\"../src/glue\");\n\nvar _case = require(\"../src/case\");\n/**\n * A collection of locale-aware text utility function.\n *\n * @module i18n/util\n * @exports isRtlText\n * @exports toCapitalized\n * @exports toLowerCase\n * @exports toUpperCase\n * @exports toWordCase\n */\n\n/*\n * This regex pattern is used by the [isRtlText()]{@link i18n/utils.isRtlText} function.\n *\n * Arabic: \\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\n * Hebrew: \\u0590-\\u05FF\\uFB1D-\\uFB4F\n *\n * @private\n */\n\n\nvar rtlPattern = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n/**\n * Takes content `str` and determines whether or not it is [RTL]{@link /docs/developer-guide/glossary/#rtl}.\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - A string to check the [RTL]{@link /docs/developer-guide/glossary/#rtl}-ness of.\n * @returns {Boolean} `true` if `str` should be RTL; `false` if not.\n * @public\n */\n\nvar isRtlText = function isRtlText(str) {\n  if (typeof str === 'string') {\n    return rtlPattern.test(str);\n  }\n\n  return false;\n};\n/**\n * Capitalizes the first letter of a given string (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The capitalized string.\n * @public\n */\n\n\nexports.isRtlText = isRtlText;\n\nvar toCapitalized = function toCapitalized(str) {\n  return (0, _case.toUpperCase)(str.slice(0, 1)) + str.slice(1);\n};\n/**\n * Capitalizes every word in a string. Words are separated by spaces, not necessarily\n * word-breaks (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The word-cased string.\n * @public\n */\n\n\nexports.toCapitalized = toCapitalized;\n\nvar toWordCase = function toWordCase(str) {\n  return str.split(' ').map(toCapitalized).join(' ');\n};\n\nexports.toWordCase = toWordCase;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/util/util.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_case","toLowerCase","toUpperCase","toWordCase","toCapitalized","isRtlText","require","rtlPattern","str","test","slice","split","map","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,aAA/B,EAA8C;AAC5CE,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,KAAK,CAACC,WAAb;AACD;AAJ2C,CAA9C;AAMAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,aAA/B,EAA8C;AAC5CE,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,KAAK,CAACE,WAAb;AACD;AAJ2C,CAA9C;AAMAN,OAAO,CAACO,UAAR,GAAqBP,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACS,SAAR,GAAoB,KAAK,CAAtE;;AAEAC,OAAO,CAAC,aAAD,CAAP;;AAEA,IAAIN,KAAK,GAAGM,OAAO,CAAC,aAAD,CAAnB;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;AAQA,IAAIC,UAAU,GAAG,+FAAjB;AACA;;;;;;;;;;AAUA,IAAIF,SAAS,GAAG,SAASA,SAAT,CAAmBG,GAAnB,EAAwB;AACtC,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOD,UAAU,CAACE,IAAX,CAAgBD,GAAhB,CAAP;AACD;;AAED,SAAO,KAAP;AACD,CAND;AAOA;;;;;;;;;;;AAWAZ,OAAO,CAACS,SAAR,GAAoBA,SAApB;;AAEA,IAAID,aAAa,GAAG,SAASA,aAAT,CAAuBI,GAAvB,EAA4B;AAC9C,SAAO,CAAC,GAAGR,KAAK,CAACE,WAAV,EAAuBM,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAvB,IAA0CF,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAjD;AACD,CAFD;AAGA;;;;;;;;;;;;AAYAd,OAAO,CAACQ,aAAR,GAAwBA,aAAxB;;AAEA,IAAID,UAAU,GAAG,SAASA,UAAT,CAAoBK,GAApB,EAAyB;AACxC,SAAOA,GAAG,CAACG,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBR,aAAnB,EAAkCS,IAAlC,CAAuC,GAAvC,CAAP;AACD,CAFD;;AAIAjB,OAAO,CAACO,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"toLowerCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toLowerCase;\n  }\n});\nObject.defineProperty(exports, \"toUpperCase\", {\n  enumerable: true,\n  get: function get() {\n    return _case.toUpperCase;\n  }\n});\nexports.toWordCase = exports.toCapitalized = exports.isRtlText = void 0;\n\nrequire(\"../src/glue\");\n\nvar _case = require(\"../src/case\");\n\n/**\n * A collection of locale-aware text utility function.\n *\n * @module i18n/util\n * @exports isRtlText\n * @exports toCapitalized\n * @exports toLowerCase\n * @exports toUpperCase\n * @exports toWordCase\n */\n\n/*\n * This regex pattern is used by the [isRtlText()]{@link i18n/utils.isRtlText} function.\n *\n * Arabic: \\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\n * Hebrew: \\u0590-\\u05FF\\uFB1D-\\uFB4F\n *\n * @private\n */\nvar rtlPattern = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFE\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n/**\n * Takes content `str` and determines whether or not it is [RTL]{@link /docs/developer-guide/glossary/#rtl}.\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - A string to check the [RTL]{@link /docs/developer-guide/glossary/#rtl}-ness of.\n * @returns {Boolean} `true` if `str` should be RTL; `false` if not.\n * @public\n */\n\nvar isRtlText = function isRtlText(str) {\n  if (typeof str === 'string') {\n    return rtlPattern.test(str);\n  }\n\n  return false;\n};\n/**\n * Capitalizes the first letter of a given string (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The capitalized string.\n * @public\n */\n\n\nexports.isRtlText = isRtlText;\n\nvar toCapitalized = function toCapitalized(str) {\n  return (0, _case.toUpperCase)(str.slice(0, 1)) + str.slice(1);\n};\n/**\n * Capitalizes every word in a string. Words are separated by spaces, not necessarily\n * word-breaks (locale aware).\n *\n * @function\n * @memberof i18n/util\n * @param {String} str - The string to capitalize.\n * @returns {String} The word-cased string.\n * @public\n */\n\n\nexports.toCapitalized = toCapitalized;\n\nvar toWordCase = function toWordCase(str) {\n  return str.split(' ').map(toCapitalized).join(' ');\n};\n\nexports.toWordCase = toWordCase;"]},"metadata":{},"sourceType":"module"}