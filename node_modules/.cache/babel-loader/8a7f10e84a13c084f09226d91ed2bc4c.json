{"ast":null,"code":"\"use strict\";\n/*\n * JulianDay.js - A Julian Day object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * A Julian Day class. A Julian Day is a date based on the Julian Day count\n * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. \n * Do not confuse it with a date in the Julian calendar, which it has very\n * little in common with. The naming is unfortunately close, and comes from history.<p>\n * \n * \n * @constructor\n * @param {number} num the Julian Day expressed as a floating point number \n */\n\nvar JulianDay = function JulianDay(num) {\n  this.jd = num;\n  this.days = Math.floor(this.jd);\n  this.frac = num - this.days;\n};\n\nJulianDay.prototype = {\n  /**\n   * Return the integral portion of this Julian Day instance. This corresponds to\n   * the number of days since the beginning of the epoch.\n   * \n   * @return {number} the integral portion of this Julian Day\n   */\n  getDays: function getDays() {\n    return this.days;\n  },\n\n  /**\n   * Set the date of this Julian Day instance.\n   * \n   * @param {number} days the julian date expressed as a floating point number\n   */\n  setDays: function setDays(days) {\n    this.days = Math.floor(days);\n    this.jd = this.days + this.frac;\n  },\n\n  /**\n   * Return the fractional portion of this Julian Day instance. This portion \n   * corresponds to the time of day for the instance.\n   */\n  getDayFraction: function getDayFraction() {\n    return this.frac;\n  },\n\n  /**\n   * Set the fractional part of the Julian Day. The fractional part represents\n   * the portion of a fully day. Julian dates start at noon, and proceed until\n   * noon of the next day. That would mean midnight is represented as a fractional\n   * part of 0.5.\n   * \n   * @param {number} fraction The fractional part of the Julian date\n   */\n  setDayFraction: function setDayFraction(fraction) {\n    var t = Math.floor(fraction);\n    this.frac = fraction - t;\n    this.jd = this.days + this.frac;\n  },\n\n  /** \n   * Return the Julian Day expressed as a floating point number.\n   * @return {number} the Julian Day as a number\n   */\n  getDate: function getDate() {\n    return this.jd;\n  },\n\n  /**\n   * Set the date of this Julian Day instance.\n   * \n   * @param {number} num the numeric Julian Day to set into this instance\n   */\n  setDate: function setDate(num) {\n    this.jd = num;\n  },\n\n  /**\n   * Add an offset to the current date instance. The offset should be expressed in\n   * terms of Julian days. That is, each integral unit represents one day of time, and\n   * fractional part represents a fraction of a regular 24-hour day.\n   * \n   * @param {number} offset an amount to add (or subtract) to the current result instance.\n   */\n  addDate: function addDate(offset) {\n    if (typeof offset === 'number') {\n      this.jd += offset;\n      this.days = Math.floor(this.jd);\n      this.frac = this.jd - this.days;\n    }\n  }\n};\nmodule.exports = JulianDay;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\JulianDay.js"],"names":["JulianDay","num","jd","days","Math","floor","frac","prototype","getDays","setDays","getDayFraction","setDayFraction","fraction","t","getDate","setDate","addDate","offset","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;AAWA,IAAIA,SAAS,GAAG,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtC,OAAKC,EAAL,GAAUD,GAAV;AACA,OAAKE,IAAL,GAAYC,IAAI,CAACC,KAAL,CAAW,KAAKH,EAAhB,CAAZ;AACA,OAAKI,IAAL,GAAYL,GAAG,GAAG,KAAKE,IAAvB;AACD,CAJD;;AAMAH,SAAS,CAACO,SAAV,GAAsB;AACpB;;;;;;AAMAC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAO,KAAKL,IAAZ;AACD,GATmB;;AAWpB;;;;;AAKAM,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBN,IAAjB,EAAuB;AAC9B,SAAKA,IAAL,GAAYC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAZ;AACA,SAAKD,EAAL,GAAU,KAAKC,IAAL,GAAY,KAAKG,IAA3B;AACD,GAnBmB;;AAqBpB;;;;AAIAI,EAAAA,cAAc,EAAE,SAASA,cAAT,GAA0B;AACxC,WAAO,KAAKJ,IAAZ;AACD,GA3BmB;;AA6BpB;;;;;;;;AAQAK,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChD,QAAIC,CAAC,GAAGT,IAAI,CAACC,KAAL,CAAWO,QAAX,CAAR;AACA,SAAKN,IAAL,GAAYM,QAAQ,GAAGC,CAAvB;AACA,SAAKX,EAAL,GAAU,KAAKC,IAAL,GAAY,KAAKG,IAA3B;AACD,GAzCmB;;AA2CpB;;;;AAIAQ,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAO,KAAKZ,EAAZ;AACD,GAjDmB;;AAmDpB;;;;;AAKAa,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBd,GAAjB,EAAsB;AAC7B,SAAKC,EAAL,GAAUD,GAAV;AACD,GA1DmB;;AA4DpB;;;;;;;AAOAe,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AAChC,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAKf,EAAL,IAAWe,MAAX;AACA,WAAKd,IAAL,GAAYC,IAAI,CAACC,KAAL,CAAW,KAAKH,EAAhB,CAAZ;AACA,WAAKI,IAAL,GAAY,KAAKJ,EAAL,GAAU,KAAKC,IAA3B;AACD;AACF;AAzEmB,CAAtB;AA2EAe,MAAM,CAACC,OAAP,GAAiBnB,SAAjB","sourcesContent":["\"use strict\";\n\n/*\n * JulianDay.js - A Julian Day object.\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class\n * A Julian Day class. A Julian Day is a date based on the Julian Day count\n * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. \n * Do not confuse it with a date in the Julian calendar, which it has very\n * little in common with. The naming is unfortunately close, and comes from history.<p>\n * \n * \n * @constructor\n * @param {number} num the Julian Day expressed as a floating point number \n */\nvar JulianDay = function JulianDay(num) {\n  this.jd = num;\n  this.days = Math.floor(this.jd);\n  this.frac = num - this.days;\n};\n\nJulianDay.prototype = {\n  /**\n   * Return the integral portion of this Julian Day instance. This corresponds to\n   * the number of days since the beginning of the epoch.\n   * \n   * @return {number} the integral portion of this Julian Day\n   */\n  getDays: function getDays() {\n    return this.days;\n  },\n\n  /**\n   * Set the date of this Julian Day instance.\n   * \n   * @param {number} days the julian date expressed as a floating point number\n   */\n  setDays: function setDays(days) {\n    this.days = Math.floor(days);\n    this.jd = this.days + this.frac;\n  },\n\n  /**\n   * Return the fractional portion of this Julian Day instance. This portion \n   * corresponds to the time of day for the instance.\n   */\n  getDayFraction: function getDayFraction() {\n    return this.frac;\n  },\n\n  /**\n   * Set the fractional part of the Julian Day. The fractional part represents\n   * the portion of a fully day. Julian dates start at noon, and proceed until\n   * noon of the next day. That would mean midnight is represented as a fractional\n   * part of 0.5.\n   * \n   * @param {number} fraction The fractional part of the Julian date\n   */\n  setDayFraction: function setDayFraction(fraction) {\n    var t = Math.floor(fraction);\n    this.frac = fraction - t;\n    this.jd = this.days + this.frac;\n  },\n\n  /** \n   * Return the Julian Day expressed as a floating point number.\n   * @return {number} the Julian Day as a number\n   */\n  getDate: function getDate() {\n    return this.jd;\n  },\n\n  /**\n   * Set the date of this Julian Day instance.\n   * \n   * @param {number} num the numeric Julian Day to set into this instance\n   */\n  setDate: function setDate(num) {\n    this.jd = num;\n  },\n\n  /**\n   * Add an offset to the current date instance. The offset should be expressed in\n   * terms of Julian days. That is, each integral unit represents one day of time, and\n   * fractional part represents a fraction of a regular 24-hour day.\n   * \n   * @param {number} offset an amount to add (or subtract) to the current result instance.\n   */\n  addDate: function addDate(offset) {\n    if (typeof offset === 'number') {\n      this.jd += offset;\n      this.days = Math.floor(this.jd);\n      this.frac = this.jd - this.days;\n    }\n  }\n};\nmodule.exports = JulianDay;"]},"metadata":{},"sourceType":"module"}