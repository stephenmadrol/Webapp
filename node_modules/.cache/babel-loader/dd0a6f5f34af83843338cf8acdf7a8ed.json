{"ast":null,"code":"\"use strict\";\n/*\n * CalendarFactory.js - Constructs new instances of the right subclass of Calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nLocale.js\nLocaleInfo.js\nCalendar.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * Factory method to create a new instance of a calendar subclass.<p>\n * \n * The options parameter can be an object that contains the following\n * properties:\n * \n * <ul>\n * <li><i>type</i> - specify the type of the calendar desired. The\n * list of valid values changes depending on which calendars are \n * defined. When assembling your iliball.js, include those calendars \n * you wish to use in your program or web page, and they will register \n * themselves with this factory method. The \"official\", \"gregorian\",\n * and \"julian\" calendars are all included by default, as they are the\n * standard calendars for much of the world.\n * <li><i>locale</i> - some calendars vary depending on the locale.\n * For example, the \"official\" calendar transitions from a Julian-style\n * calendar to a Gregorian-style calendar on a different date for\n * each country, as the governments of those countries decided to\n * adopt the Gregorian calendar at different times.\n *  \n * <li><i>onLoad</i> - a callback function to call when the calendar object is fully \n * loaded. When the onLoad option is given, the calendar factory will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *  \n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If a locale is specified, but no type, then the calendar that is default for\n * the locale will be instantiated and returned. If neither the type nor\n * the locale are specified, then the calendar for the default locale will\n * be used. \n * \n * @static\n * @param {Object=} options options controlling the construction of this instance, or\n * undefined to use the default options\n * @return {Calendar} an instance of a calendar object of the appropriate type\n */\n\n\nvar CalendarFactory = function CalendarFactory(options) {\n  var locale,\n      type,\n      sync = true,\n      instance;\n\n  if (options) {\n    if (options.locale) {\n      locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    type = options.type || options.calendar;\n\n    if (typeof options.sync === 'boolean') {\n      sync = options.sync;\n    }\n  }\n\n  if (!locale) {\n    locale = new Locale(); // default locale\n  }\n\n  if (!type) {\n    new LocaleInfo(locale, {\n      sync: sync,\n      loadParams: options && options.loadParams,\n      onLoad: function onLoad(info) {\n        type = info.getCalendar();\n        instance = CalendarFactory._init(type, options);\n      }\n    });\n  } else {\n    instance = CalendarFactory._init(type, options);\n  }\n\n  return instance;\n};\n/**\n * Map calendar names to classes to initialize in the dynamic code model.\n * TODO: Need to figure out some way that this doesn't have to be updated by hand.\n * @private\n */\n\n\nCalendarFactory._dynMap = {\n  \"coptic\": \"Coptic\",\n  \"ethiopic\": \"Ethiopic\",\n  \"gregorian\": \"Gregorian\",\n  \"han\": \"Han\",\n  \"hebrew\": \"Hebrew\",\n  \"islamic\": \"Islamic\",\n  \"julian\": \"Julian\",\n  \"persian\": \"Persian\",\n  \"persian-algo\": \"PersianAlgo\",\n  \"thaisolar\": \"ThaiSolar\"\n};\n/**\n * Dynamically load the code for a calendar and calendar class if necessary.\n * @protected\n */\n\nCalendarFactory._dynLoadCalendar = function (name) {\n  if (!Calendar._constructors[name]) {\n    var entry = CalendarFactory._dynMap[name];\n\n    if (entry) {\n      Calendar._constructors[name] = require(\"./\" + entry + \"Cal.js\");\n    }\n  }\n\n  return Calendar._constructors[name];\n};\n/** @private */\n\n\nCalendarFactory._init = function (type, options) {\n  var cons;\n\n  if (ilib.isDynCode()) {\n    CalendarFactory._dynLoadCalendar(type);\n  }\n\n  cons = Calendar._constructors[type]; // pass the same options through to the constructor so the subclass\n  // has the ability to do something with if it needs to\n\n  if (!cons && typeof options.onLoad === \"function\") {\n    options.onLoad(undefined);\n  }\n\n  return cons && new cons(options);\n};\n/**\n * Return an array of known calendar types that the factory method can instantiate.\n * \n * @return {Array.<string>} an array of calendar types\n */\n\n\nCalendarFactory.getCalendars = function () {\n  var arr = [],\n      c;\n\n  if (ilib.isDynCode()) {\n    for (c in CalendarFactory._dynMap) {\n      CalendarFactory._dynLoadCalendar(c);\n    }\n  }\n\n  for (c in Calendar._constructors) {\n    if (c && Calendar._constructors[c]) {\n      arr.push(c); // code like a pirate\n    }\n  }\n\n  return arr;\n};\n\nmodule.exports = CalendarFactory;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/CalendarFactory.js"],"names":["ilib","require","Locale","LocaleInfo","Calendar","CalendarFactory","options","locale","type","sync","instance","calendar","loadParams","onLoad","info","getCalendar","_init","_dynMap","_dynLoadCalendar","name","_constructors","entry","cons","isDynCode","undefined","getCalendars","arr","c","push","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * CalendarFactory.js - Constructs new instances of the right subclass of Calendar\n * \n * Copyright © 2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nLocale.js\nLocaleInfo.js\nCalendar.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * Factory method to create a new instance of a calendar subclass.<p>\n * \n * The options parameter can be an object that contains the following\n * properties:\n * \n * <ul>\n * <li><i>type</i> - specify the type of the calendar desired. The\n * list of valid values changes depending on which calendars are \n * defined. When assembling your iliball.js, include those calendars \n * you wish to use in your program or web page, and they will register \n * themselves with this factory method. The \"official\", \"gregorian\",\n * and \"julian\" calendars are all included by default, as they are the\n * standard calendars for much of the world.\n * <li><i>locale</i> - some calendars vary depending on the locale.\n * For example, the \"official\" calendar transitions from a Julian-style\n * calendar to a Gregorian-style calendar on a different date for\n * each country, as the governments of those countries decided to\n * adopt the Gregorian calendar at different times.\n *  \n * <li><i>onLoad</i> - a callback function to call when the calendar object is fully \n * loaded. When the onLoad option is given, the calendar factory will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two.\n * \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n *  \n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * If a locale is specified, but no type, then the calendar that is default for\n * the locale will be instantiated and returned. If neither the type nor\n * the locale are specified, then the calendar for the default locale will\n * be used. \n * \n * @static\n * @param {Object=} options options controlling the construction of this instance, or\n * undefined to use the default options\n * @return {Calendar} an instance of a calendar object of the appropriate type\n */\n\n\nvar CalendarFactory = function CalendarFactory(options) {\n  var locale,\n      type,\n      sync = true,\n      instance;\n\n  if (options) {\n    if (options.locale) {\n      locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    type = options.type || options.calendar;\n\n    if (typeof options.sync === 'boolean') {\n      sync = options.sync;\n    }\n  }\n\n  if (!locale) {\n    locale = new Locale(); // default locale\n  }\n\n  if (!type) {\n    new LocaleInfo(locale, {\n      sync: sync,\n      loadParams: options && options.loadParams,\n      onLoad: function onLoad(info) {\n        type = info.getCalendar();\n        instance = CalendarFactory._init(type, options);\n      }\n    });\n  } else {\n    instance = CalendarFactory._init(type, options);\n  }\n\n  return instance;\n};\n/**\n * Map calendar names to classes to initialize in the dynamic code model.\n * TODO: Need to figure out some way that this doesn't have to be updated by hand.\n * @private\n */\n\n\nCalendarFactory._dynMap = {\n  \"coptic\": \"Coptic\",\n  \"ethiopic\": \"Ethiopic\",\n  \"gregorian\": \"Gregorian\",\n  \"han\": \"Han\",\n  \"hebrew\": \"Hebrew\",\n  \"islamic\": \"Islamic\",\n  \"julian\": \"Julian\",\n  \"persian\": \"Persian\",\n  \"persian-algo\": \"PersianAlgo\",\n  \"thaisolar\": \"ThaiSolar\"\n};\n/**\n * Dynamically load the code for a calendar and calendar class if necessary.\n * @protected\n */\n\nCalendarFactory._dynLoadCalendar = function (name) {\n  if (!Calendar._constructors[name]) {\n    var entry = CalendarFactory._dynMap[name];\n\n    if (entry) {\n      Calendar._constructors[name] = require(\"./\" + entry + \"Cal.js\");\n    }\n  }\n\n  return Calendar._constructors[name];\n};\n/** @private */\n\n\nCalendarFactory._init = function (type, options) {\n  var cons;\n\n  if (ilib.isDynCode()) {\n    CalendarFactory._dynLoadCalendar(type);\n  }\n\n  cons = Calendar._constructors[type]; // pass the same options through to the constructor so the subclass\n  // has the ability to do something with if it needs to\n\n  if (!cons && typeof options.onLoad === \"function\") {\n    options.onLoad(undefined);\n  }\n\n  return cons && new cons(options);\n};\n/**\n * Return an array of known calendar types that the factory method can instantiate.\n * \n * @return {Array.<string>} an array of calendar types\n */\n\n\nCalendarFactory.getCalendars = function () {\n  var arr = [],\n      c;\n\n  if (ilib.isDynCode()) {\n    for (c in CalendarFactory._dynMap) {\n      CalendarFactory._dynLoadCalendar(c);\n    }\n  }\n\n  for (c in Calendar._constructors) {\n    if (c && Calendar._constructors[c]) {\n      arr.push(c); // code like a pirate\n    }\n  }\n\n  return arr;\n};\n\nmodule.exports = CalendarFactory;"]},"metadata":{},"sourceType":"module"}