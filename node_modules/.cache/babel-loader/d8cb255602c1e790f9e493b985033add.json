{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * ratadie.js - Represent the RD date number in the calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nJulianDay.js\nMathUtils.js\nJSUtils.js\n*/\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar JulianDay = require(\"./JulianDay.js\");\n/**\n * @class\n * Construct a new RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used\n * in the Hebrew calendar. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @param {Object=} params parameters that govern the settings and behaviour of this RD date\n */\n\n\nvar RataDie = function RataDie(params) {\n  if (params) {\n    if (typeof params.date !== 'undefined') {\n      // accept JS Date classes or strings\n      var date = params.date;\n\n      if (!JSUtils.isDate(date)) {\n        date = new Date(date); // maybe a string initializer?\n      }\n\n      this._setTime(date.getTime());\n    } else if (typeof params.unixtime !== 'undefined') {\n      this._setTime(parseInt(params.unixtime, 10));\n    } else if (typeof params.julianday !== 'undefined') {\n      // JD time is defined to be UTC\n      this._setJulianDay(parseFloat(params.julianday));\n    } else if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond || params.parts || params.cycle) {\n      this._setDateComponents(params);\n    } else if (typeof params.rd !== 'undefined') {\n      /**\n       * @type {number} the Rata Die number of this date for this calendar type\n       */\n      this.rd = _typeof(params.rd) === 'object' && params.rd instanceof RataDie ? params.rd.rd : params.rd;\n    }\n  }\n\n  if (typeof this.rd === 'undefined' || isNaN(this.rd)) {\n    var now = new Date();\n\n    this._setTime(now.getTime());\n  }\n};\n/**\n * @private\n * @const\n * @type {number}\n */\n\n\nRataDie.gregorianEpoch = 1721424.5;\nRataDie.prototype = {\n  /**\n   * @protected\n   * @type {number}\n   * the difference between a zero Julian day and the zero Gregorian date. \n   */\n  epoch: RataDie.gregorianEpoch,\n\n  /**\n   * Set the RD of this instance according to the given unix time. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970.\n   *\n   * @protected\n   * @param {number} millis the unix time to set this date to in milliseconds \n   */\n  _setTime: function _setTime(millis) {\n    // 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)\n    this._setJulianDay(2440587.5 + millis / 86400000);\n  },\n\n  /**\n   * Set the date of this instance using a Julian Day.\n   * @protected\n   * @param {number} date the Julian Day to use to set this date\n   */\n  _setJulianDay: function _setJulianDay(date) {\n    var jd = typeof date === 'number' ? new JulianDay(date) : date; // round to the nearest millisecond\n\n    this.rd = MathUtils.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the \n   * given rd. eg. The Sunday on or before the given rd.\n   * @protected\n   * @param {number} rd the rata die date of the reference date\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the current date\n   * @return {number} the rd of the day of the week\n   */\n  _onOrBefore: function _onOrBefore(rd, dayOfWeek) {\n    return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 2, 7);\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the current rd.\n   * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the current date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the rd of the day of the week\n   */\n  onOrBefore: function onOrBefore(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the current rd.\n   * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  onOrAfter: function onOrAfter(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + 6 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week before the current rd.\n   * eg. The Sunday before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  before: function before(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd - 1 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week after the current rd.\n   * eg. The Sunday after the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  after: function after(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + 7 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only\n   * returns a valid number for dates between midnight, Jan 1, 1970 and  \n   * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance \n   * encodes a date outside of that range, this method will return -1.\n   * \n   * @return {number} a number giving the unix time, or -1 if the date is outside the\n   * valid unix time range\n   */\n  getTime: function getTime() {\n    // earlier than Jan 1, 1970\n    // or later than Jan 19, 2038 at 3:14:07am\n    var jd = this.getJulianDay();\n\n    if (jd < 2440587.5 || jd > 2465442.634803241) {\n      return -1;\n    } // avoid the rounding errors in the floating point math by only using\n    // the whole days from the rd, and then calculating the milliseconds directly\n\n\n    return Math.round((jd - 2440587.5) * 86400000);\n  },\n\n  /**\n   * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n   * (or the type \"time_t\" in C/C++) is only encoded with a unsigned 32 bit integer, and thus \n   * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n   * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n   * after Jan 1, 1970, and even more interestingly 100 million days worth of time before\n   * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n   * range. If this instance encodes a date outside of that range, this method will return\n   * NaN.\n   * \n   * @return {number} a number giving the extended unix time, or NaN if the date is outside \n   * the valid extended unix time range\n   */\n  getTimeExtended: function getTimeExtended() {\n    var jd = this.getJulianDay(); // test if earlier than Jan 1, 1970 - 100 million days\n    // or later than Jan 1, 1970 + 100 million days\n\n    if (jd < -97559412.5 || jd > 102440587.5) {\n      return NaN;\n    } // avoid the rounding errors in the floating point math by only using\n    // the whole days from the rd, and then calculating the milliseconds directly\n\n\n    return Math.round((jd - 2440587.5) * 86400000);\n  },\n\n  /**\n   * Return the Julian Day equivalent to this calendar date as a number.\n   * This returns the julian day in UTC.\n   * \n   * @return {number} the julian date equivalent of this date\n   */\n  getJulianDay: function getJulianDay() {\n    return this.rd + this.epoch;\n  },\n\n  /**\n   * Return the Rata Die (fixed day) number of this RD date.\n   * \n   * @return {number} the rd date as a number\n   */\n  getRataDie: function getRataDie() {\n    return this.rd;\n  }\n};\nmodule.exports = RataDie;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\i18n\\ilib\\lib\\RataDie.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","MathUtils","JSUtils","JulianDay","RataDie","params","date","isDate","Date","_setTime","getTime","unixtime","parseInt","julianday","_setJulianDay","parseFloat","year","month","day","hour","minute","second","millisecond","parts","cycle","_setDateComponents","rd","isNaN","now","gregorianEpoch","epoch","millis","jd","halfup","getDate","_onOrBefore","dayOfWeek","mod","Math","floor","onOrBefore","offset","onOrAfter","before","after","getJulianDay","round","getTimeExtended","NaN","getRataDie","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * ratadie.js - Represent the RD date number in the calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nJulianDay.js\nMathUtils.js\nJSUtils.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar JulianDay = require(\"./JulianDay.js\");\n/**\n * @class\n * Construct a new RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used\n * in the Hebrew calendar. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @param {Object=} params parameters that govern the settings and behaviour of this RD date\n */\n\n\nvar RataDie = function RataDie(params) {\n  if (params) {\n    if (typeof params.date !== 'undefined') {\n      // accept JS Date classes or strings\n      var date = params.date;\n\n      if (!JSUtils.isDate(date)) {\n        date = new Date(date); // maybe a string initializer?\n      }\n\n      this._setTime(date.getTime());\n    } else if (typeof params.unixtime !== 'undefined') {\n      this._setTime(parseInt(params.unixtime, 10));\n    } else if (typeof params.julianday !== 'undefined') {\n      // JD time is defined to be UTC\n      this._setJulianDay(parseFloat(params.julianday));\n    } else if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond || params.parts || params.cycle) {\n      this._setDateComponents(params);\n    } else if (typeof params.rd !== 'undefined') {\n      /**\n       * @type {number} the Rata Die number of this date for this calendar type\n       */\n      this.rd = _typeof(params.rd) === 'object' && params.rd instanceof RataDie ? params.rd.rd : params.rd;\n    }\n  }\n\n  if (typeof this.rd === 'undefined' || isNaN(this.rd)) {\n    var now = new Date();\n\n    this._setTime(now.getTime());\n  }\n};\n/**\n * @private\n * @const\n * @type {number}\n */\n\n\nRataDie.gregorianEpoch = 1721424.5;\nRataDie.prototype = {\n  /**\n   * @protected\n   * @type {number}\n   * the difference between a zero Julian day and the zero Gregorian date. \n   */\n  epoch: RataDie.gregorianEpoch,\n\n  /**\n   * Set the RD of this instance according to the given unix time. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970.\n   *\n   * @protected\n   * @param {number} millis the unix time to set this date to in milliseconds \n   */\n  _setTime: function _setTime(millis) {\n    // 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)\n    this._setJulianDay(2440587.5 + millis / 86400000);\n  },\n\n  /**\n   * Set the date of this instance using a Julian Day.\n   * @protected\n   * @param {number} date the Julian Day to use to set this date\n   */\n  _setJulianDay: function _setJulianDay(date) {\n    var jd = typeof date === 'number' ? new JulianDay(date) : date; // round to the nearest millisecond\n\n    this.rd = MathUtils.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the \n   * given rd. eg. The Sunday on or before the given rd.\n   * @protected\n   * @param {number} rd the rata die date of the reference date\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the current date\n   * @return {number} the rd of the day of the week\n   */\n  _onOrBefore: function _onOrBefore(rd, dayOfWeek) {\n    return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 2, 7);\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the current rd.\n   * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the current date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the rd of the day of the week\n   */\n  onOrBefore: function onOrBefore(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week on or before the current rd.\n   * eg. The Sunday on or before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  onOrAfter: function onOrAfter(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + 6 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week before the current rd.\n   * eg. The Sunday before the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  before: function before(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd - 1 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the rd number of the particular day of the week after the current rd.\n   * eg. The Sunday after the current rd. If the offset is given, the calculation\n   * happens in wall time instead of UTC. UTC time may be a day before or day behind \n   * wall time, so it it would give the wrong day of the week if this calculation was\n   * done in UTC time when the caller really wanted wall time. Even though the calculation\n   * may be done in wall time, the return value is nonetheless always given in UTC.\n   * @param {number} dayOfWeek the day of the week that is being sought relative \n   * to the reference date\n   * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\n   * not given\n   * @return {number} the day of the week\n   */\n  after: function after(dayOfWeek, offset) {\n    offset = offset || 0;\n    return this._onOrBefore(this.rd + 7 + offset, dayOfWeek) - offset;\n  },\n\n  /**\n   * Return the unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only\n   * returns a valid number for dates between midnight, Jan 1, 1970 and  \n   * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance \n   * encodes a date outside of that range, this method will return -1.\n   * \n   * @return {number} a number giving the unix time, or -1 if the date is outside the\n   * valid unix time range\n   */\n  getTime: function getTime() {\n    // earlier than Jan 1, 1970\n    // or later than Jan 19, 2038 at 3:14:07am\n    var jd = this.getJulianDay();\n\n    if (jd < 2440587.5 || jd > 2465442.634803241) {\n      return -1;\n    } // avoid the rounding errors in the floating point math by only using\n    // the whole days from the rd, and then calculating the milliseconds directly\n\n\n    return Math.round((jd - 2440587.5) * 86400000);\n  },\n\n  /**\n   * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\n   * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\n   * (or the type \"time_t\" in C/C++) is only encoded with a unsigned 32 bit integer, and thus \n   * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \n   * 32 bits and the Date object allows you to encode up to 100 million days worth of time \n   * after Jan 1, 1970, and even more interestingly 100 million days worth of time before\n   * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \n   * range. If this instance encodes a date outside of that range, this method will return\n   * NaN.\n   * \n   * @return {number} a number giving the extended unix time, or NaN if the date is outside \n   * the valid extended unix time range\n   */\n  getTimeExtended: function getTimeExtended() {\n    var jd = this.getJulianDay(); // test if earlier than Jan 1, 1970 - 100 million days\n    // or later than Jan 1, 1970 + 100 million days\n\n    if (jd < -97559412.5 || jd > 102440587.5) {\n      return NaN;\n    } // avoid the rounding errors in the floating point math by only using\n    // the whole days from the rd, and then calculating the milliseconds directly\n\n\n    return Math.round((jd - 2440587.5) * 86400000);\n  },\n\n  /**\n   * Return the Julian Day equivalent to this calendar date as a number.\n   * This returns the julian day in UTC.\n   * \n   * @return {number} the julian date equivalent of this date\n   */\n  getJulianDay: function getJulianDay() {\n    return this.rd + this.epoch;\n  },\n\n  /**\n   * Return the Rata Die (fixed day) number of this RD date.\n   * \n   * @return {number} the rd date as a number\n   */\n  getRataDie: function getRataDie() {\n    return this.rd;\n  }\n};\nmodule.exports = RataDie;"]},"metadata":{},"sourceType":"module"}