{"ast":null,"code":"\"use strict\";\n/*\n * hebrew.js - Represent a Hebrew calendar object.\n * \n * Copyright Â© 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Hebrew calendar object. This class encodes information about\n * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Hebrew calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Hebrew Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar HebrewCal = function HebrewCal(options) {\n  this.type = \"hebrew\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * Return the number of days elapsed in the Hebrew calendar before the\n * given year starts.\n * @private\n * @param {number} year the year for which the number of days is sought\n * @return {number} the number of days elapsed in the Hebrew calendar before the\n * given year starts\n */\n\n\nHebrewCal.elapsedDays = function (year) {\n  var months = Math.floor((235 * year - 234) / 19);\n  var parts = 204 + 793 * MathUtils.mod(months, 1080);\n  var hours = 11 + 12 * months + 793 * Math.floor(months / 1080) + Math.floor(parts / 1080);\n  var days = 29 * months + Math.floor(hours / 24);\n  return MathUtils.mod(3 * (days + 1), 7) < 3 ? days + 1 : days;\n};\n/**\n * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew \n * calendar will be corrected for the given year. Corrections are caused because New \n * Year's is not allowed to start on certain days of the week. To deal with \n * it, the start of the new year is corrected for the next year by adding a \n * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current\n * year to make them 30 days long instead of 29.\n * \n * @private\n * @param {number} year the year for which the correction is sought\n * @param {number} elapsed number of days elapsed up to this year\n * @return {number} the number of days correction in the current year to make sure\n * Rosh HaShanah does not fall on undesirable days of the week\n */\n\n\nHebrewCal.newYearsCorrection = function (year, elapsed) {\n  var lastYear = HebrewCal.elapsedDays(year - 1),\n      thisYear = elapsed,\n      nextYear = HebrewCal.elapsedDays(year + 1);\n  return nextYear - thisYear == 356 ? 2 : thisYear - lastYear == 382 ? 1 : 0;\n};\n/**\n * Return the rata die date of the new year for the given hebrew year.\n * @private\n * @param {number} year the year for which the new year is needed\n * @return {number} the rata die date of the new year\n */\n\n\nHebrewCal.newYear = function (year) {\n  var elapsed = HebrewCal.elapsedDays(year);\n  return elapsed + HebrewCal.newYearsCorrection(year, elapsed);\n};\n/**\n * Return the number of days in the given year. Years contain a variable number of\n * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't\n * fall on particular days of the week. Days are added to the months of Heshvan\n * and/or Kislev in the previous year in order to prevent the current year's New\n * Year from being on Sunday, Wednesday, or Friday.\n * \n * @param {number} year the year for which the length is sought\n * @return {number} number of days in the given year\n */\n\n\nHebrewCal.daysInYear = function (year) {\n  return HebrewCal.newYear(year + 1) - HebrewCal.newYear(year);\n};\n/**\n * Return true if the given year contains a long month of Heshvan. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a long month of Heshvan\n */\n\n\nHebrewCal.longHeshvan = function (year) {\n  return MathUtils.mod(HebrewCal.daysInYear(year), 10) === 5;\n};\n/**\n * Return true if the given year contains a long month of Kislev. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a short month of Kislev\n */\n\n\nHebrewCal.longKislev = function (year) {\n  return MathUtils.mod(HebrewCal.daysInYear(year), 10) !== 3;\n};\n/**\n * Return the date of the last day of the month for the given year. The date of\n * the last day of the month is variable because a number of months gain an extra \n * day in leap years, and it is variable which months gain a day for each leap \n * year and which do not.\n * \n * @param {number} month the month for which the number of days is sought\n * @param {number} year the year in which that month is\n * @return {number} the number of days in the given month and year\n */\n\n\nHebrewCal.prototype.lastDayOfMonth = function (month, year) {\n  switch (month) {\n    case 2:\n    case 4:\n    case 6:\n    case 10:\n      return 29;\n\n    case 13:\n      return this.isLeapYear(year) ? 29 : 0;\n\n    case 8:\n      return HebrewCal.longHeshvan(year) ? 30 : 29;\n\n    case 9:\n      return HebrewCal.longKislev(year) ? 30 : 29;\n\n    case 12:\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 11:\n      return 30;\n\n    default:\n      return 0;\n  }\n};\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\n\nHebrewCal.prototype.getNumMonths = function (year) {\n  return this.isLeapYear(year) ? 13 : 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @returns {number} the number of days within the given month in the given year, or\n * 0 for an invalid month in the year\n */\n\n\nHebrewCal.prototype.getMonLength = function (month, year) {\n  if (month < 1 || month > 13 || month == 13 && !this.isLeapYear(year)) {\n    return 0;\n  }\n\n  return this.lastDayOfMonth(month, year);\n};\n/**\n * Return true if the given year is a leap year in the Hebrew calendar.\n * The year parameter may be given as a number, or as a HebrewDate object.\n * @param {number|Object} year the year for which the leap year information is being sought\n * @returns {boolean} true if the given year is a leap year\n */\n\n\nHebrewCal.prototype.isLeapYear = function (year) {\n  var y = typeof year == 'number' ? year : year.year;\n  return MathUtils.mod(1 + 7 * y, 19) < 7;\n};\n/**\n * Return the type of this calendar.\n * \n * @returns {string} the name of the type of this calendar \n */\n\n\nHebrewCal.prototype.getType = function () {\n  return this.type;\n};\n/*register this calendar for the factory method */\n\n\nCalendar._constructors[\"hebrew\"] = HebrewCal;\nmodule.exports = HebrewCal;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/HebrewCal.js"],"names":["ilib","require","MathUtils","Calendar","HebrewCal","options","type","onLoad","elapsedDays","year","months","Math","floor","parts","mod","hours","days","newYearsCorrection","elapsed","lastYear","thisYear","nextYear","newYear","daysInYear","longHeshvan","longKislev","prototype","lastDayOfMonth","month","isLeapYear","getNumMonths","getMonLength","y","getType","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * hebrew.js - Represent a Hebrew calendar object.\n * \n * Copyright Â© 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Hebrew calendar object. This class encodes information about\n * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew \n * calendar where the dates are calculated by arithmetic rules. This differs from \n * the religious Hebrew calendar which is used to mark the beginning of particular \n * holidays. The religious calendar depends on the first sighting of the new \n * crescent moon to determine the first day of the new month. Because humans and \n * weather are both involved, the actual time of sighting varies, so it is not \n * really possible to precalculate the religious calendar. Certain groups, such \n * as the Hebrew Society of North America, decreed in in 2007 that they will use\n * a calendar based on calculations rather than observations to determine the \n * beginning of lunar months, and therefore the dates of holidays.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar HebrewCal = function HebrewCal(options) {\n  this.type = \"hebrew\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * Return the number of days elapsed in the Hebrew calendar before the\n * given year starts.\n * @private\n * @param {number} year the year for which the number of days is sought\n * @return {number} the number of days elapsed in the Hebrew calendar before the\n * given year starts\n */\n\n\nHebrewCal.elapsedDays = function (year) {\n  var months = Math.floor((235 * year - 234) / 19);\n  var parts = 204 + 793 * MathUtils.mod(months, 1080);\n  var hours = 11 + 12 * months + 793 * Math.floor(months / 1080) + Math.floor(parts / 1080);\n  var days = 29 * months + Math.floor(hours / 24);\n  return MathUtils.mod(3 * (days + 1), 7) < 3 ? days + 1 : days;\n};\n/**\n * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew \n * calendar will be corrected for the given year. Corrections are caused because New \n * Year's is not allowed to start on certain days of the week. To deal with \n * it, the start of the new year is corrected for the next year by adding a \n * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current\n * year to make them 30 days long instead of 29.\n * \n * @private\n * @param {number} year the year for which the correction is sought\n * @param {number} elapsed number of days elapsed up to this year\n * @return {number} the number of days correction in the current year to make sure\n * Rosh HaShanah does not fall on undesirable days of the week\n */\n\n\nHebrewCal.newYearsCorrection = function (year, elapsed) {\n  var lastYear = HebrewCal.elapsedDays(year - 1),\n      thisYear = elapsed,\n      nextYear = HebrewCal.elapsedDays(year + 1);\n  return nextYear - thisYear == 356 ? 2 : thisYear - lastYear == 382 ? 1 : 0;\n};\n/**\n * Return the rata die date of the new year for the given hebrew year.\n * @private\n * @param {number} year the year for which the new year is needed\n * @return {number} the rata die date of the new year\n */\n\n\nHebrewCal.newYear = function (year) {\n  var elapsed = HebrewCal.elapsedDays(year);\n  return elapsed + HebrewCal.newYearsCorrection(year, elapsed);\n};\n/**\n * Return the number of days in the given year. Years contain a variable number of\n * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't\n * fall on particular days of the week. Days are added to the months of Heshvan\n * and/or Kislev in the previous year in order to prevent the current year's New\n * Year from being on Sunday, Wednesday, or Friday.\n * \n * @param {number} year the year for which the length is sought\n * @return {number} number of days in the given year\n */\n\n\nHebrewCal.daysInYear = function (year) {\n  return HebrewCal.newYear(year + 1) - HebrewCal.newYear(year);\n};\n/**\n * Return true if the given year contains a long month of Heshvan. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a long month of Heshvan\n */\n\n\nHebrewCal.longHeshvan = function (year) {\n  return MathUtils.mod(HebrewCal.daysInYear(year), 10) === 5;\n};\n/**\n * Return true if the given year contains a long month of Kislev. That is,\n * it is 30 days instead of 29.\n * \n * @private\n * @param {number} year the year in which that month is questioned\n * @return {boolean} true if the given year contains a short month of Kislev\n */\n\n\nHebrewCal.longKislev = function (year) {\n  return MathUtils.mod(HebrewCal.daysInYear(year), 10) !== 3;\n};\n/**\n * Return the date of the last day of the month for the given year. The date of\n * the last day of the month is variable because a number of months gain an extra \n * day in leap years, and it is variable which months gain a day for each leap \n * year and which do not.\n * \n * @param {number} month the month for which the number of days is sought\n * @param {number} year the year in which that month is\n * @return {number} the number of days in the given month and year\n */\n\n\nHebrewCal.prototype.lastDayOfMonth = function (month, year) {\n  switch (month) {\n    case 2:\n    case 4:\n    case 6:\n    case 10:\n      return 29;\n\n    case 13:\n      return this.isLeapYear(year) ? 29 : 0;\n\n    case 8:\n      return HebrewCal.longHeshvan(year) ? 30 : 29;\n\n    case 9:\n      return HebrewCal.longKislev(year) ? 30 : 29;\n\n    case 12:\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 11:\n      return 30;\n\n    default:\n      return 0;\n  }\n};\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\n\nHebrewCal.prototype.getNumMonths = function (year) {\n  return this.isLeapYear(year) ? 13 : 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of leap years.\n *\n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @returns {number} the number of days within the given month in the given year, or\n * 0 for an invalid month in the year\n */\n\n\nHebrewCal.prototype.getMonLength = function (month, year) {\n  if (month < 1 || month > 13 || month == 13 && !this.isLeapYear(year)) {\n    return 0;\n  }\n\n  return this.lastDayOfMonth(month, year);\n};\n/**\n * Return true if the given year is a leap year in the Hebrew calendar.\n * The year parameter may be given as a number, or as a HebrewDate object.\n * @param {number|Object} year the year for which the leap year information is being sought\n * @returns {boolean} true if the given year is a leap year\n */\n\n\nHebrewCal.prototype.isLeapYear = function (year) {\n  var y = typeof year == 'number' ? year : year.year;\n  return MathUtils.mod(1 + 7 * y, 19) < 7;\n};\n/**\n * Return the type of this calendar.\n * \n * @returns {string} the name of the type of this calendar \n */\n\n\nHebrewCal.prototype.getType = function () {\n  return this.type;\n};\n/*register this calendar for the factory method */\n\n\nCalendar._constructors[\"hebrew\"] = HebrewCal;\nmodule.exports = HebrewCal;"]},"metadata":{},"sourceType":"module"}