{"ast":null,"code":"\"use strict\";\n/*\n * gregratadie.js - Represent the RD date number in the Gregorian calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nGregorianCal.js\nRataDie.js\nMathUtils.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar GregorianCal = require(\"./GregorianCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Gregorian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date\n */\n\n\nvar GregRataDie = function GregRataDie(params) {\n  this.cal = params && params.cal || new GregorianCal();\n  /** @type {number|undefined} */\n\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nGregRataDie.prototype = new RataDie();\nGregRataDie.prototype.parent = RataDie;\nGregRataDie.prototype.constructor = GregRataDie;\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nGregRataDie.cumMonthLengths = [0,\n/* Jan */\n31,\n/* Feb */\n59,\n/* Mar */\n90,\n/* Apr */\n120,\n/* May */\n151,\n/* Jun */\n181,\n/* Jul */\n212,\n/* Aug */\n243,\n/* Sep */\n273,\n/* Oct */\n304,\n/* Nov */\n334,\n/* Dec */\n365];\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nGregRataDie.cumMonthLengthsLeap = [0,\n/* Jan */\n31,\n/* Feb */\n60,\n/* Mar */\n91,\n/* Apr */\n121,\n/* May */\n152,\n/* Jun */\n182,\n/* Jul */\n213,\n/* Aug */\n244,\n/* Sep */\n274,\n/* Oct */\n305,\n/* Nov */\n335,\n/* Dec */\n366];\n/**\n * Calculate the Rata Die (fixed day) number of the given date.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\n\nGregRataDie.prototype._setDateComponents = function (date) {\n  var year = parseInt(date.year, 10) || 0;\n  var month = parseInt(date.month, 10) || 1;\n  var day = parseInt(date.day, 10) || 1;\n  var hour = parseInt(date.hour, 10) || 0;\n  var minute = parseInt(date.minute, 10) || 0;\n  var second = parseInt(date.second, 10) || 0;\n  var millisecond = parseInt(date.millisecond, 10) || 0;\n  var years = 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400);\n  var dayInYear = (month > 1 ? GregRataDie.cumMonthLengths[month - 1] : 0) + day + (GregorianCal.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);\n  var rdtime = (hour * 3600000 + minute * 60000 + second * 1000 + millisecond) / 86400000;\n  /*\n  debug(\"getRataDie: converting \" +  JSON.stringify(this));\n  debug(\"getRataDie: year is \" +  years);\n  debug(\"getRataDie: day in year is \" +  dayInYear);\n  debug(\"getRataDie: rdtime is \" +  rdtime);\n  debug(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n  */\n\n  /**\n   * @type {number|undefined} the RD number of this Gregorian date\n   */\n\n  this.rd = years + dayInYear + rdtime;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nGregRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\nmodule.exports = GregRataDie;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/GregRataDie.js"],"names":["ilib","require","MathUtils","GregorianCal","RataDie","GregRataDie","params","cal","rd","NaN","call","prototype","parent","constructor","cumMonthLengths","cumMonthLengthsLeap","_setDateComponents","date","year","parseInt","month","day","hour","minute","second","millisecond","years","Math","floor","dayInYear","isLeapYear","rdtime","_onOrBefore","dayOfWeek","mod","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * gregratadie.js - Represent the RD date number in the Gregorian calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nGregorianCal.js\nRataDie.js\nMathUtils.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar GregorianCal = require(\"./GregorianCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Gregorian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Gregorian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date\n */\n\n\nvar GregRataDie = function GregRataDie(params) {\n  this.cal = params && params.cal || new GregorianCal();\n  /** @type {number|undefined} */\n\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nGregRataDie.prototype = new RataDie();\nGregRataDie.prototype.parent = RataDie;\nGregRataDie.prototype.constructor = GregRataDie;\n/**\n * the cumulative lengths of each month, for a non-leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nGregRataDie.cumMonthLengths = [0,\n/* Jan */\n31,\n/* Feb */\n59,\n/* Mar */\n90,\n/* Apr */\n120,\n/* May */\n151,\n/* Jun */\n181,\n/* Jul */\n212,\n/* Aug */\n243,\n/* Sep */\n273,\n/* Oct */\n304,\n/* Nov */\n334,\n/* Dec */\n365];\n/**\n * the cumulative lengths of each month, for a leap year \n * @private\n * @const\n * @type Array.<number>\n */\n\nGregRataDie.cumMonthLengthsLeap = [0,\n/* Jan */\n31,\n/* Feb */\n60,\n/* Mar */\n91,\n/* Apr */\n121,\n/* May */\n152,\n/* Jun */\n182,\n/* Jul */\n213,\n/* Aug */\n244,\n/* Sep */\n274,\n/* Oct */\n305,\n/* Nov */\n335,\n/* Dec */\n366];\n/**\n * Calculate the Rata Die (fixed day) number of the given date.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\n\nGregRataDie.prototype._setDateComponents = function (date) {\n  var year = parseInt(date.year, 10) || 0;\n  var month = parseInt(date.month, 10) || 1;\n  var day = parseInt(date.day, 10) || 1;\n  var hour = parseInt(date.hour, 10) || 0;\n  var minute = parseInt(date.minute, 10) || 0;\n  var second = parseInt(date.second, 10) || 0;\n  var millisecond = parseInt(date.millisecond, 10) || 0;\n  var years = 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400);\n  var dayInYear = (month > 1 ? GregRataDie.cumMonthLengths[month - 1] : 0) + day + (GregorianCal.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);\n  var rdtime = (hour * 3600000 + minute * 60000 + second * 1000 + millisecond) / 86400000;\n  /*\n  debug(\"getRataDie: converting \" +  JSON.stringify(this));\n  debug(\"getRataDie: year is \" +  years);\n  debug(\"getRataDie: day in year is \" +  dayInYear);\n  debug(\"getRataDie: rdtime is \" +  rdtime);\n  debug(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n  */\n\n  /**\n   * @type {number|undefined} the RD number of this Gregorian date\n   */\n\n  this.rd = years + dayInYear + rdtime;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nGregRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n\nmodule.exports = GregRataDie;"]},"metadata":{},"sourceType":"module"}