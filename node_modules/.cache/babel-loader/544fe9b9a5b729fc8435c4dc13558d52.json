{"ast":null,"code":"\"use strict\";\n/*\n * persian.js - Represent a Persian algorithmic calendar object.\n * \n * Copyright © 2014-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Persian algorithmic calendar object. This class encodes information about\n * a Persian algorithmic calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar PersianAlgoCal = function PersianAlgoCal(options) {\n  this.type = \"persian-algo\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\n\n\nPersianAlgoCal.monthLengths = [31, // Farvardin\n31, // Ordibehesht\n31, // Khordad\n31, // Tir\n31, // Mordad\n31, // Shahrivar\n30, // Mehr\n30, // Aban\n30, // Azar\n30, // Dey\n30, // Bahman\n29 // Esfand\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nPersianAlgoCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nPersianAlgoCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12 || !this.isLeapYear(year)) {\n    return PersianAlgoCal.monthLengths[month - 1];\n  } else {\n    // Month 12, Esfand, has 30 days instead of 29 in leap years\n    return 30;\n  }\n};\n/**\n * Return the equivalent year in the 2820 year cycle that begins on \n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into \n * the cycle.   \n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\n\n\nPersianAlgoCal.prototype.equivalentCycleYear = function (year) {\n  var y = year - (year >= 0 ? 474 : 473);\n  return MathUtils.mod(y, 2820) + 474;\n};\n/**\n * Return true if the given year is a leap year in the Persian calendar.\n * The year parameter may be given as a number, or as a PersAlgoDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nPersianAlgoCal.prototype.isLeapYear = function (year) {\n  return MathUtils.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nPersianAlgoCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"persian-algo\"] = PersianAlgoCal;\nmodule.exports = PersianAlgoCal;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/PersianAlgoCal.js"],"names":["ilib","require","MathUtils","Calendar","PersianAlgoCal","options","type","onLoad","monthLengths","prototype","getNumMonths","year","getMonLength","month","isLeapYear","equivalentCycleYear","y","mod","getType","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;AACA;;;;;;;;;;;AAWA,IAAIG,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AACpD,OAAKC,IAAL,GAAY,cAAZ;;AAEA,MAAID,OAAO,IAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,UAAzC,EAAqD;AACnDF,IAAAA,OAAO,CAACE,MAAR,CAAe,IAAf;AACD;AACF,CAND;AAOA;;;;;;;;AAQAH,cAAc,CAACI,YAAf,GAA8B,CAAC,EAAD,EAAK;AACnC,EAD8B,EAC1B;AACJ,EAF8B,EAE1B;AACJ,EAH8B,EAG1B;AACJ,EAJ8B,EAI1B;AACJ,EAL8B,EAK1B;AACJ,EAN8B,EAM1B;AACJ,EAP8B,EAO1B;AACJ,EAR8B,EAQ1B;AACJ,EAT8B,EAS1B;AACJ,EAV8B,EAU1B;AACJ,EAX8B,CAW3B;AAX2B,CAA9B;AAaA;;;;;;;;;;AAUAJ,cAAc,CAACK,SAAf,CAAyBC,YAAzB,GAAwC,UAAUC,IAAV,EAAgB;AACtD,SAAO,EAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAP,cAAc,CAACK,SAAf,CAAyBG,YAAzB,GAAwC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AAC7D,MAAIE,KAAK,KAAK,EAAV,IAAgB,CAAC,KAAKC,UAAL,CAAgBH,IAAhB,CAArB,EAA4C;AAC1C,WAAOP,cAAc,CAACI,YAAf,CAA4BK,KAAK,GAAG,CAApC,CAAP;AACD,GAFD,MAEO;AACL;AACA,WAAO,EAAP;AACD;AACF,CAPD;AAQA;;;;;;;;;;;AAWAT,cAAc,CAACK,SAAf,CAAyBM,mBAAzB,GAA+C,UAAUJ,IAAV,EAAgB;AAC7D,MAAIK,CAAC,GAAGL,IAAI,IAAIA,IAAI,IAAI,CAAR,GAAY,GAAZ,GAAkB,GAAtB,CAAZ;AACA,SAAOT,SAAS,CAACe,GAAV,CAAcD,CAAd,EAAiB,IAAjB,IAAyB,GAAhC;AACD,CAHD;AAIA;;;;;;;;AAQAZ,cAAc,CAACK,SAAf,CAAyBK,UAAzB,GAAsC,UAAUH,IAAV,EAAgB;AACpD,SAAOT,SAAS,CAACe,GAAV,CAAc,CAAC,KAAKF,mBAAL,CAAyBJ,IAAzB,IAAiC,EAAlC,IAAwC,GAAtD,EAA2D,IAA3D,IAAmE,GAA1E;AACD,CAFD;AAGA;;;;;;;AAOAP,cAAc,CAACK,SAAf,CAAyBS,OAAzB,GAAmC,YAAY;AAC7C,SAAO,KAAKZ,IAAZ;AACD,CAFD;AAGA;;;AAGAH,QAAQ,CAACgB,aAAT,CAAuB,cAAvB,IAAyCf,cAAzC;AACAgB,MAAM,CAACC,OAAP,GAAiBjB,cAAjB","sourcesContent":["\"use strict\";\n\n/*\n * persian.js - Represent a Persian algorithmic calendar object.\n * \n * Copyright © 2014-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js MathUtils.js */\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Persian algorithmic calendar object. This class encodes information about\n * a Persian algorithmic calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar PersianAlgoCal = function PersianAlgoCal(options) {\n  this.type = \"persian-algo\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\n\n\nPersianAlgoCal.monthLengths = [31, // Farvardin\n31, // Ordibehesht\n31, // Khordad\n31, // Tir\n31, // Mordad\n31, // Shahrivar\n30, // Mehr\n30, // Aban\n30, // Azar\n30, // Dey\n30, // Bahman\n29 // Esfand\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nPersianAlgoCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nPersianAlgoCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12 || !this.isLeapYear(year)) {\n    return PersianAlgoCal.monthLengths[month - 1];\n  } else {\n    // Month 12, Esfand, has 30 days instead of 29 in leap years\n    return 30;\n  }\n};\n/**\n * Return the equivalent year in the 2820 year cycle that begins on \n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \n * whereas the others do not specifically. This cycle can be used as\n * a proxy for other years outside of the cycle by shifting them into \n * the cycle.   \n * @param {number} year year to find the equivalent cycle year for\n * @returns {number} the equivalent cycle year\n */\n\n\nPersianAlgoCal.prototype.equivalentCycleYear = function (year) {\n  var y = year - (year >= 0 ? 474 : 473);\n  return MathUtils.mod(y, 2820) + 474;\n};\n/**\n * Return true if the given year is a leap year in the Persian calendar.\n * The year parameter may be given as a number, or as a PersAlgoDate object.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nPersianAlgoCal.prototype.isLeapYear = function (year) {\n  return MathUtils.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nPersianAlgoCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"persian-algo\"] = PersianAlgoCal;\nmodule.exports = PersianAlgoCal;"]},"metadata":{},"sourceType":"module"}