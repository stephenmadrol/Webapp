{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * ethiopic.js - Represent a Ethiopic calendar object.\n * \n * Copyright © 2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Ethiopic calendar object. This class encodes information about\n * a Ethiopic calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar EthiopicCal = function EthiopicCal(options) {\n  this.type = \"ethiopic\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\n\nEthiopicCal.prototype.getNumMonths = function (year) {\n  return 13;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number|string} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nEthiopicCal.prototype.getMonLength = function (month, year) {\n  var m = month;\n\n  switch (_typeof(m)) {\n    case \"string\":\n      m = parseInt(m, 10);\n      break;\n\n    case \"function\":\n    case \"object\":\n    case \"undefined\":\n      return 30;\n      break;\n  }\n\n  if (m < 13) {\n    return 30;\n  } else {\n    return this.isLeapYear(year) ? 6 : 5;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Ethiopic calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|EthiopicDate|string} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nEthiopicCal.prototype.isLeapYear = function (year) {\n  var y = year;\n\n  switch (_typeof(y)) {\n    case \"string\":\n      y = parseInt(y, 10);\n      break;\n\n    case \"object\":\n      if (typeof y.year !== \"number\") {\n        // in case it is an ilib.Date object\n        return false;\n      }\n\n      y = y.year;\n      break;\n\n    case \"function\":\n    case \"undefined\":\n      return false;\n      break;\n  }\n\n  return MathUtils.mod(y, 4) === 3;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nEthiopicCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"ethiopic\"] = EthiopicCal;\nmodule.exports = EthiopicCal;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\EthiopicCal.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","Utils","MathUtils","Calendar","EthiopicCal","options","type","onLoad","getNumMonths","year","getMonLength","month","m","parseInt","isLeapYear","y","mod","getType","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * ethiopic.js - Represent a Ethiopic calendar object.\n * \n * Copyright © 2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Ethiopic calendar object. This class encodes information about\n * a Ethiopic calendar.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar EthiopicCal = function EthiopicCal(options) {\n  this.type = \"ethiopic\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for lunar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.\n * \n * @param {number} year a year for which the number of months is sought\n */\n\n\nEthiopicCal.prototype.getNumMonths = function (year) {\n  return 13;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number|string} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nEthiopicCal.prototype.getMonLength = function (month, year) {\n  var m = month;\n\n  switch (_typeof(m)) {\n    case \"string\":\n      m = parseInt(m, 10);\n      break;\n\n    case \"function\":\n    case \"object\":\n    case \"undefined\":\n      return 30;\n      break;\n  }\n\n  if (m < 13) {\n    return 30;\n  } else {\n    return this.isLeapYear(year) ? 6 : 5;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Ethiopic calendar.\n * The year parameter may be given as a number, or as a JulDate object.\n * @param {number|EthiopicDate|string} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nEthiopicCal.prototype.isLeapYear = function (year) {\n  var y = year;\n\n  switch (_typeof(y)) {\n    case \"string\":\n      y = parseInt(y, 10);\n      break;\n\n    case \"object\":\n      if (typeof y.year !== \"number\") {\n        // in case it is an ilib.Date object\n        return false;\n      }\n\n      y = y.year;\n      break;\n\n    case \"function\":\n    case \"undefined\":\n      return false;\n      break;\n  }\n\n  return MathUtils.mod(y, 4) === 3;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nEthiopicCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"ethiopic\"] = EthiopicCal;\nmodule.exports = EthiopicCal;"]},"metadata":{},"sourceType":"module"}