{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * ilib.js - define the ilib name space\n * \n * Copyright Â© 2012-2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @namespace The global namespace that contains general ilib functions useful\n * to all of ilib\n * \n * @version // !macro ilibVersion\n */\n\n\nvar ilib = ilib || {};\n/** @private */\n\nilib._ver = function () {\n  return;\n};\n/**\n * Return the current version of ilib.\n * \n * @static\n * @return {string} a version string for this instance of ilib\n */\n\n\nilib.getVersion = function () {\n  if (ilib._dyncode) {\n    try {\n      var pkg; //pkg = require(\"../package.json\");\n\n      /* [Temp fix for webOS build for enyo]\n         The build has 2 parts of Enyo using the webOS submission of iLib.\n         First, Enyo ilib re-routes the locale JSON requests to /usr/share/javascript/ilib/locale/ in place of ./lib/enyo-ilib/ilib/locale.\n         Second, it also copies the js from /usr/share/javascript/ilib/locale/lib into ./lib/enyo-ilib/ilib/lib.\n         Since the package.json is outside that lib directory, it's triggering the error.\n         Will either need to move the package.json file location or update the webos_enyojs_app_2.6+.bbclass to copy the package.json as well.\n      */\n\n      pkg.version = \"13.0.2\";\n      return pkg.version;\n    } catch (e) {// ignore\n    }\n  }\n\n  return ilib._ver() || \"13.0\";\n};\n/**\n * Place where resources and such are eventually assigned.\n */\n\n\nilib.data = {\n  /** @type {{ccc:Object.<string,number>,nfd:Object.<string,string>,nfc:Object.<string,string>,nfkd:Object.<string,string>,nfkc:Object.<string,string>}} */\n  norm: {\n    ccc: {},\n    nfd: {},\n    nfc: {},\n    nfkd: {},\n    nfkc: {}\n  },\n  zoneinfo: {\n    \"Etc/UTC\": {\n      \"o\": \"0:0\",\n      \"f\": \"UTC\"\n    },\n    \"local\": {\n      \"f\": \"local\"\n    }\n  },\n\n  /** @type {Object.<string,{to:Object.<string,string>,from:Object.<string,number>}>} */\n  charmaps: {},\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_c: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_l: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_m: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_p: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_z: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  scriptToRange: null,\n\n  /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */\n  dateformats: null,\n\n  /** @type {null|Array.<string>} */\n  timezones: [],\n  cache: {}\n};\n/*\nif (typeof(window) !== 'undefined') {\n    window[\"ilib\"] = ilib;\n}\n*/\n// export ilib for use as a module in nodejs\n\nif (typeof module !== 'undefined') {\n  module.exports = ilib;\n  module.exports.ilib = ilib; // for backwards compatibility with older versions of ilib\n}\n/**\n * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing\n * internationalization aspects of software. Instead of translating the text of the software\n * into a foreign language, as in the process of localization, the textual elements of an application\n * are replaced with an altered version of the original language.These specific alterations make\n * the original words appear readable, but include the most problematic characteristics of \n * the world's languages: varying length of text or characters, language direction, and so on.\n * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF\n * \n * @param {string|undefined|null} localename the locale specifier for the pseudo locale\n */\n\n\nilib.setAsPseudoLocale = function (localename) {\n  if (localename) {\n    ilib.pseudoLocales.push(localename);\n  }\n};\n/**\n * Reset the list of pseudo locales back to the default single locale of zxx-XX.\n * @static\n */\n\n\nilib.clearPseudoLocales = function () {\n  ilib.pseudoLocales = [\"zxx-XX\", \"zxx-Cyrl-XX\", \"zxx-Hans-XX\", \"zxx-Hebr-XX\"];\n};\n\nilib.clearPseudoLocales();\n/**\n * Return the name of the platform\n * @private\n * @static\n * @return {string} string naming the platform\n */\n\nilib._getPlatform = function () {\n  if (!ilib._platform) {\n    try {\n      if (typeof java.lang.Object !== 'undefined') {\n        ilib._platform = typeof process !== 'undefined' ? \"trireme\" : \"rhino\";\n        return ilib._platform;\n      }\n    } catch (e) {}\n\n    if (typeof process !== 'undefined' && process.versions && process.versions.node && typeof module !== 'undefined') {\n      ilib._platform = \"nodejs\";\n    } else if (typeof Qt !== 'undefined') {\n      ilib._platform = \"qt\";\n    } else if (typeof window !== 'undefined') {\n      ilib._platform = typeof PalmSystem !== 'undefined' ? \"webos\" : \"browser\";\n    } else {\n      ilib._platform = \"unknown\";\n    }\n  }\n\n  return ilib._platform;\n};\n/**\n * If this ilib is running in a browser, return the name of that browser.\n * @private\n * @static\n * @return {string|undefined} the name of the browser that this is running in (\"firefox\", \"chrome\", \"ie\", \n * \"safari\", or \"opera\"), or undefined if this is not running in a browser or if\n * the browser name could not be determined \n */\n\n\nilib._getBrowser = function () {\n  var browser = undefined;\n\n  if (ilib._getPlatform() === \"browser\") {\n    if (navigator && navigator.userAgent) {\n      if (navigator.userAgent.indexOf(\"Firefox\") > -1) {\n        browser = \"firefox\";\n      }\n\n      if (navigator.userAgent.search(/Opera|OPR/) > -1) {\n        browser = \"opera\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Chrome\") > -1) {\n        browser = \"chrome\";\n      }\n\n      if (navigator.userAgent.indexOf(\" .NET\") > -1) {\n        browser = \"ie\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Safari\") > -1) {\n        // chrome also has the string Safari in its userAgent, but the chrome case is \n        // already taken care of above\n        browser = \"safari\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Edge\") > -1) {\n        browser = \"Edge\";\n      }\n\n      if (navigator.userAgent.search(/iPad|iPhone|iPod/) > -1) {\n        // Due to constraints of the iOS platform, \n        // all browser must be built on top of the WebKit rendering engine\n        browser = \"iOS\";\n      }\n    }\n  }\n\n  return browser;\n};\n/**\n * Return the value of a global variable given its name in a way that works \n * correctly for the current platform.\n * @private\n * @static\n * @param {string} name the name of the variable to return\n * @return {*} the global variable, or undefined if it does not exist\n */\n\n\nilib._global = function (name) {\n  switch (ilib._getPlatform()) {\n    case \"rhino\":\n      var top = function () {\n        return (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === 'object' ? global : this;\n      }();\n\n      break;\n\n    case \"nodejs\":\n    case \"trireme\":\n      top = typeof global !== 'undefined' ? global : this; //console.log(\"ilib._global: top is \" + (typeof(global) !== 'undefined' ? \"global\" : \"this\"));\n\n      break;\n\n    case \"qt\":\n      return undefined;\n\n    default:\n      top = window;\n      break;\n  }\n\n  try {\n    return top[name];\n  } catch (e) {\n    return undefined;\n  }\n};\n/**\n * Return true if the global variable is defined on this platform.\n * @private\n * @static\n * @param {string} name the name of the variable to check\n * @return {boolean} true if the global variable is defined on this platform, false otherwise\n */\n\n\nilib._isGlobal = function (name) {\n  return typeof ilib._global(name) !== 'undefined';\n};\n/**\n * Clear the file load cache. This is mainly used by the unit tests,\n * but could be used by regular callers if you want to free up memory\n * for garbage collecting.\n */\n\n\nilib.clearCache = function () {\n  ilib.data.cache = {};\n};\n/**\n * Sets the default locale for all of ilib. This locale will be used\n * when no explicit locale is passed to any ilib class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\". If a type of parameter is string, \n * ilib will take only well-formed BCP-47 tag  <p>\n * \n * \n * @static\n * @param {string|undefined|null} spec the locale specifier for the default locale\n */\n\n\nilib.setLocale = function (spec) {\n  if (typeof spec === 'string' || !spec) {\n    ilib.locale = spec;\n  } // else ignore other data types, as we don't have the dependencies\n  // to look into them to find a locale\n\n};\n/**\n * Return the default locale for all of ilib if one has been set. This \n * locale will be used when no explicit locale is passed to any ilib \n * class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\".<p>\n * \n * \n * @static\n * @return {string} the locale specifier for the default locale\n */\n\n\nilib.getLocale = function () {\n  if (typeof ilib.locale !== 'string') {\n    var plat = ilib._getPlatform();\n\n    switch (plat) {\n      case 'browser':\n        // running in a browser\n        if (typeof navigator.language !== 'undefined') {\n          ilib.locale = navigator.language.substring(0, 3) + navigator.language.substring(3, 5).toUpperCase(); // FF/Opera/Chrome/Webkit    \n        }\n\n        if (!ilib.locale) {\n          // IE on Windows\n          var lang = typeof navigator.browserLanguage !== 'undefined' ? navigator.browserLanguage : typeof navigator.userLanguage !== 'undefined' ? navigator.userLanguage : typeof navigator.systemLanguage !== 'undefined' ? navigator.systemLanguage : undefined;\n\n          if (typeof lang !== 'undefined' && lang) {\n            // for some reason, MS uses lower case region tags\n            ilib.locale = lang.substring(0, 3) + lang.substring(3, 5).toUpperCase();\n          }\n        }\n\n        break;\n\n      case 'webos':\n        // webOS\n        if (typeof PalmSystem.locales !== 'undefined' && typeof PalmSystem.locales.UI != 'undefined' && PalmSystem.locales.UI.length > 0) {\n          ilib.locale = PalmSystem.locales.UI;\n        } else if (typeof PalmSystem.locale !== 'undefined') {\n          ilib.locale = PalmSystem.locale;\n        }\n\n        break;\n\n      case 'rhino':\n        if (typeof environment !== 'undefined' && environment.user && typeof environment.user.language === 'string' && environment.user.language.length > 0) {\n          // running under plain rhino\n          ilib.locale = environment.user.language;\n\n          if (typeof environment.user.country === 'string' && environment.user.country.length > 0) {\n            ilib.locale += '-' + environment.user.country;\n          }\n        }\n\n        break;\n\n      case \"trireme\":\n        // under trireme on rhino emulating nodejs\n        var lang = process.env.LANG || process.env.LANGUAGE || process.env.LC_ALL; // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n        // where language and region are the correct ISO codes separated by\n        // an underscore. This translate it back to the BCP-47 form.\n\n        if (lang && typeof lang !== 'undefined') {\n          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();\n        }\n\n        break;\n\n      case 'nodejs':\n        // running under nodejs\n        var lang = process.env.LANG || process.env.LC_ALL; // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n        // where language and region are the correct ISO codes separated by\n        // an underscore. This translate it back to the BCP-47 form.\n\n        if (lang && typeof lang !== 'undefined') {\n          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();\n        }\n\n        break;\n\n      case 'qt':\n        // running in the Javascript engine under Qt/QML\n        var locobj = Qt.locale();\n        var lang = locobj.name && locobj.name.replace(\"_\", \"-\") || \"en-US\";\n        break;\n    }\n\n    ilib.locale = typeof ilib.locale === 'string' && ilib.locale ? ilib.locale : 'en-US';\n\n    if (ilib.locale === \"en\") {\n      ilib.locale = \"en-US\"; // hack to get various platforms working correctly\n    }\n  }\n\n  return ilib.locale;\n};\n/**\n * Sets the default time zone for all of ilib. This time zone will be used when\n * no explicit time zone is passed to any ilib class. If the default time zone\n * is not set, ilib will attempt to use the time zone of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the UTC zone \"Etc/UTC\".<p>\n * \n * \n * @static\n * @param {string} tz the name of the time zone to set as the default time zone\n */\n\n\nilib.setTimeZone = function (tz) {\n  ilib.tz = tz || ilib.tz;\n};\n/**\n * Return the default time zone for all of ilib if one has been set. This \n * time zone will be used when no explicit time zone is passed to any ilib \n * class. If the default time zone\n * is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the zone \"local\".<p>\n * \n * \n * @static\n * @return {string} the default time zone for ilib\n */\n\n\nilib.getTimeZone = function () {\n  if (typeof ilib.tz === 'undefined') {\n    if (typeof navigator !== 'undefined' && typeof navigator.timezone !== 'undefined') {\n      // running in a browser\n      if (navigator.timezone.length > 0) {\n        ilib.tz = navigator.timezone;\n      }\n    } else if (typeof PalmSystem !== 'undefined' && typeof PalmSystem.timezone !== 'undefined') {\n      // running in webkit on webOS\n      if (PalmSystem.timezone.length > 0) {\n        ilib.tz = PalmSystem.timezone;\n      }\n    } else if (typeof environment !== 'undefined' && typeof environment.user !== 'undefined') {\n      // running under rhino\n      if (typeof environment.user.timezone !== 'undefined' && environment.user.timezone.length > 0) {\n        ilib.tz = environment.user.timezone;\n      }\n    } else if (typeof process !== 'undefined' && typeof process.env !== 'undefined') {\n      // running in nodejs\n      if (process.env.TZ && typeof process.env.TZ !== \"undefined\") {\n        ilib.tz = process.env.TZ;\n      }\n    }\n\n    ilib.tz = ilib.tz || \"local\";\n  }\n\n  return ilib.tz;\n};\n/**\n * @class\n * Defines the interface for the loader class for ilib. The main method of the\n * loader object is loadFiles(), which loads a set of requested locale data files\n * from where-ever it is stored.\n * @interface\n */\n\n\nilib.Loader = function () {};\n/**\n * Load a set of files from where-ever it is stored.<p>\n * \n * This is the main function define a callback function for loading missing locale \n * data or resources.\n * If this copy of ilib is assembled without including the required locale data\n * or resources, then that data can be lazy loaded dynamically when it is \n * needed by calling this method. Each ilib class will first\n * check for the existence of data under ilib.data, and if it is not there, \n * it will attempt to load it by calling this method of the laoder, and then place\n * it there.<p>\n * \n * Suggested implementations of this method might load files \n * directly from disk under nodejs or rhino, or within web pages, to load \n * files from the server with XHR calls.<p>\n * \n * The first parameter to this method, paths, is an array of relative paths within \n * the ilib dir structure for the \n * requested data. These paths will already have the locale spec integrated \n * into them, so no further tweaking needs to happen to load the data. Simply\n * load the named files. The second\n * parameter tells the loader whether to load the files synchronously or asynchronously.\n * If the sync parameters is false, then the onLoad function must also be specified.\n * The third parameter gives extra parameters to the loader passed from the calling\n * code. This may contain any property/value pairs.  The last parameter, callback,\n * is a callback function to call when all of the data is finishing loading. Make\n * sure to call the callback with the context of \"this\" so that the caller has their \n * context back again.<p>\n * \n * The loader function must be able to operate either synchronously or asychronously. \n * If the loader function is called with an undefined callback function, it is\n * expected to load the data synchronously, convert it to javascript\n * objects, and return the array of json objects as the return value of the \n * function. If the loader \n * function is called with a callback function, it may load the data \n * synchronously or asynchronously (doesn't matter which) as long as it calls\n * the callback function with the data converted to a javascript objects\n * when it becomes available. If a particular file could not be loaded, the \n * loader function should put undefined into the corresponding entry in the\n * results array. \n * Note that it is important that all the data is loaded before the callback\n * is called.<p>\n * \n * An example implementation for nodejs might be:\n * \n * <pre>\n * var fs = require(\"fs\");\n * \n * var myLoader = function() {};\n * myLoader.prototype = new Loader();\n * myLoader.prototype.constructor = myLoader;\n * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n *    if (sync) {\n *        var ret = [];\n *        // synchronous load -- just return the result\n *        paths.forEach(function (path) {\n *            var json = fs.readFileSync(path, \"utf-8\");\n *            ret.push(json ? JSON.parse(json) : undefined);\n *        });\n *        \n *        return ret;\n *    }\n *    this.callback = callback;\n *\n *    // asynchronous\n *    this.results = [];\n *    this._loadFilesAsync(paths);\n * }\n * myLoader.prototype._loadFilesAsync = function (paths) {\n *    if (paths.length > 0) {\n *        var file = paths.shift();\n *        fs.readFile(file, \"utf-8\", function(err, json) {\n *            this.results.push(err ? undefined : JSON.parse(json));\n *            // call self recursively so that the callback is only called at the end\n *            // when all the files are loaded sequentially\n *            if (paths.length > 0) {\n *                this._loadFilesAsync(paths);\n *            } else {\n *                this.callback(this.results);\n *            }\n *        });\n *     }\n * }\n * \n * // bind to \"this\" so that \"this\" is relative to your own instance\n * ilib.setLoaderCallback(new myLoader());\n * </pre>\n\n * @param {Array.<string>} paths An array of paths to load from wherever the files are stored \n * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously\n * @param {Object} params an object with any extra parameters for the loader. These can be \n * anything. The caller of the ilib class passes these parameters in. Presumably, the code that\n * calls ilib and the code that provides the loader are together and can have a private \n * agreement between them about what the parameters should contain.\n * @param {function(Object)} callback function to call when the files are all loaded. The \n * parameter of the callback function is the contents of the files.\n */\n\n\nilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};\n/**\n * Return all files available for loading using this loader instance.\n * This method returns an object where the properties are the paths to\n * directories where files are loaded from and the values are an array\n * of strings containing the relative paths under the directory of each\n * file that can be loaded.<p>\n * \n * Example:\n *  <pre>\n *  {\n *      \"/usr/share/javascript/ilib/locale\": [\n *          \"dateformats.json\",\n *          \"aa/dateformats.json\",\n *          \"af/dateformats.json\",\n *          \"agq/dateformats.json\",\n *          \"ak/dateformats.json\",\n *          ...\n *          \"zxx/dateformats.json\"\n *      ]\n *  }\n *  </pre>\n * @returns {Object} a hash containing directory names and\n * paths to file that can be loaded by this loader \n */\n\n\nilib.Loader.prototype.listAvailableFiles = function () {};\n/**\n * Return true if the file in the named path is available for loading using\n * this loader. The path may be given as an absolute path, in which case\n * only that file is checked, or as a relative path, in which case, the\n * relative path may appear underneath any of the directories that the loader\n * knows about.\n * @returns {boolean} true if the file in the named path is available for loading, and\n * false otherwise\n */\n\n\nilib.Loader.prototype.isAvailable = function (path) {};\n/**\n * Set the custom loader used to load ilib's locale data in your environment. \n * The instance passed in must implement the Loader interface. See the\n * Loader class documentation for more information about loaders. \n * \n * @static\n * @param {ilib.Loader} loader class to call to access the requested data.\n * @return {boolean} true if the loader was installed correctly, or false\n * if not\n */\n\n\nilib.setLoaderCallback = function (loader) {\n  // only a basic check\n  if (_typeof(loader) === 'object' && typeof loader.loadFiles === 'function' || typeof loader === 'function' || typeof loader === 'undefined') {\n    //console.log(\"setting callback loader to \" + (loader ? loader.name : \"undefined\"));\n    ilib._load = loader;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Return the custom Loader instance currently in use with this instance \n * of ilib. If there is no loader, this method returns undefined.\n * \n * @protected\n * @static\n * @return {ilib.Loader|undefined} the loader instance currently in use, or \n * undefined if there is no such loader\n */\n\n\nilib.getLoader = function () {\n  return ilib._load;\n};\n/**\n * Test whether an object is an javascript array. \n * \n * @static\n * @param {*} object The object to test\n * @return {boolean} return true if the object is an array\n * and false otherwise\n */\n\n\nilib.isArray = function (object) {\n  if (_typeof(object) === 'object') {\n    return Object.prototype.toString.call(object) === '[object Array]';\n  }\n\n  return false;\n};\n/**\n * Extend object1 by mixing in everything from object2 into it. The objects\n * are deeply extended, meaning that this method recursively descends the\n * tree in the objects and mixes them in at each level. Arrays are extended\n * by concatenating the elements of object2 onto those of object1.  \n * \n * @static\n * @param {Object} object1 the target object to extend\n * @param {Object=} object2 the object to mix in to object1\n * @return {Object} returns object1\n */\n\n\nilib.extend = function (object1, object2) {\n  var prop = undefined;\n\n  if (object2) {\n    for (prop in object2) {\n      // don't extend object with undefined or functions\n      if (prop && typeof object2[prop] !== 'undefined' && typeof object2[prop] !== \"function\") {\n        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n          //console.log(\"Merging array prop \" + prop);\n          object1[prop] = object1[prop].concat(object2[prop]);\n        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {\n          //console.log(\"Merging object prop \" + prop);\n          if (prop !== \"ilib\") {\n            object1[prop] = ilib.extend(object1[prop], object2[prop]);\n          }\n        } else {\n          //console.log(\"Copying prop \" + prop);\n          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n          object1[prop] = object2[prop];\n        }\n      }\n    }\n  }\n\n  return object1;\n};\n\nilib.extend2 = function (object1, object2) {\n  var prop = undefined;\n\n  if (object2) {\n    for (prop in object2) {\n      // don't extend object with undefined or functions\n      if (prop && typeof object2[prop] !== 'undefined') {\n        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n          //console.log(\"Merging array prop \" + prop);\n          object1[prop] = object1[prop].concat(object2[prop]);\n        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {\n          //console.log(\"Merging object prop \" + prop);\n          if (prop !== \"ilib\") {\n            object1[prop] = ilib.extend2(object1[prop], object2[prop]);\n          }\n        } else {\n          //console.log(\"Copying prop \" + prop);\n          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n          object1[prop] = object2[prop];\n        }\n      }\n    }\n  }\n\n  return object1;\n};\n/**\n * If Function.prototype.bind does not exist in this JS engine, this\n * function reimplements it in terms of older JS functions.\n * bind() doesn't exist in many older browsers.\n * \n * @static\n * @param {Object} scope object that the method should operate on\n * @param {function(...)} method method to call\n * @return {function(...)|undefined} function that calls the given method \n * in the given scope with all of its arguments properly attached, or\n * undefined if there was a problem with the arguments\n */\n\n\nilib.bind = function (scope, method\n/*, bound arguments*/\n) {\n  if (!scope || !method) {\n    return undefined;\n  }\n  /** @protected \n   * @param {Arguments} inArrayLike\n   * @param {number=} inOffset\n   */\n\n\n  function cloneArray(inArrayLike, inOffset) {\n    var arr = [];\n\n    for (var i = inOffset || 0, l = inArrayLike.length; i < l; i++) {\n      arr.push(inArrayLike[i]);\n    }\n\n    return arr;\n  }\n\n  if (typeof method === 'function') {\n    var func,\n        args = cloneArray(arguments, 2);\n\n    if (typeof method.bind === 'function') {\n      func = method.bind.apply(method, [scope].concat(args));\n    } else {\n      func = function func() {\n        var nargs = cloneArray(arguments); // invoke with collected args\n\n        return method.apply(scope, args.concat(nargs));\n      };\n    }\n\n    return func;\n  }\n\n  return undefined;\n};\n/**\n * @private\n */\n\n\nilib._dyncode = false;\n/**\n * Return true if this copy of ilib is using dynamically loaded code. It returns\n * false for pre-assembled code.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded code, and false otherwise\n */\n\nilib.isDynCode = function () {\n  return ilib._dyncode;\n};\n/**\n * @private\n */\n\n\nilib._dyndata = false;\n/**\n * Return true if this copy of ilib is using dynamically loaded locale data. It returns\n * false for pre-assembled data.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded locale data, and false otherwise\n */\n\nilib.isDynData = function () {\n  return ilib._dyndata;\n};\n\nilib._loadtime = new Date().getTime();","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/ilib.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","_ver","getVersion","_dyncode","pkg","version","e","data","norm","ccc","nfd","nfc","nfkd","nfkc","zoneinfo","charmaps","ctype","ctype_c","ctype_l","ctype_m","ctype_p","ctype_z","scriptToRange","dateformats","timezones","cache","module","exports","setAsPseudoLocale","localename","pseudoLocales","push","clearPseudoLocales","_getPlatform","_platform","java","lang","Object","process","versions","node","Qt","window","PalmSystem","_getBrowser","browser","undefined","navigator","userAgent","indexOf","search","_global","name","top","global","_isGlobal","clearCache","setLocale","spec","locale","getLocale","plat","language","substring","toUpperCase","browserLanguage","userLanguage","systemLanguage","locales","UI","length","environment","user","country","env","LANG","LANGUAGE","LC_ALL","toLowerCase","locobj","replace","setTimeZone","tz","getTimeZone","timezone","TZ","Loader","loadFiles","paths","sync","params","callback","listAvailableFiles","isAvailable","path","setLoaderCallback","loader","_load","getLoader","isArray","object","toString","call","extend","object1","object2","prop","concat","extend2","bind","scope","method","cloneArray","inArrayLike","inOffset","arr","i","l","func","args","arguments","apply","nargs","isDynCode","_dyndata","isDynData","_loadtime","Date","getTime"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * ilib.js - define the ilib name space\n * \n * Copyright Â© 2012-2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @namespace The global namespace that contains general ilib functions useful\n * to all of ilib\n * \n * @version // !macro ilibVersion\n */\nvar ilib = ilib || {};\n/** @private */\n\nilib._ver = function () {\n  return;\n};\n/**\n * Return the current version of ilib.\n * \n * @static\n * @return {string} a version string for this instance of ilib\n */\n\n\nilib.getVersion = function () {\n  if (ilib._dyncode) {\n    try {\n      var pkg; //pkg = require(\"../package.json\");\n\n      /* [Temp fix for webOS build for enyo]\n         The build has 2 parts of Enyo using the webOS submission of iLib.\n         First, Enyo ilib re-routes the locale JSON requests to /usr/share/javascript/ilib/locale/ in place of ./lib/enyo-ilib/ilib/locale.\n         Second, it also copies the js from /usr/share/javascript/ilib/locale/lib into ./lib/enyo-ilib/ilib/lib.\n         Since the package.json is outside that lib directory, it's triggering the error.\n         Will either need to move the package.json file location or update the webos_enyojs_app_2.6+.bbclass to copy the package.json as well.\n      */\n\n      pkg.version = \"13.0.2\";\n      return pkg.version;\n    } catch (e) {// ignore\n    }\n  }\n\n  return ilib._ver() || \"13.0\";\n};\n/**\n * Place where resources and such are eventually assigned.\n */\n\n\nilib.data = {\n  /** @type {{ccc:Object.<string,number>,nfd:Object.<string,string>,nfc:Object.<string,string>,nfkd:Object.<string,string>,nfkc:Object.<string,string>}} */\n  norm: {\n    ccc: {},\n    nfd: {},\n    nfc: {},\n    nfkd: {},\n    nfkc: {}\n  },\n  zoneinfo: {\n    \"Etc/UTC\": {\n      \"o\": \"0:0\",\n      \"f\": \"UTC\"\n    },\n    \"local\": {\n      \"f\": \"local\"\n    }\n  },\n\n  /** @type {Object.<string,{to:Object.<string,string>,from:Object.<string,number>}>} */\n  charmaps: {},\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_c: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_l: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_m: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_p: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  ctype_z: null,\n\n  /** @type {null|Object.<string,Array.<Array.<number>>>} */\n  scriptToRange: null,\n\n  /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */\n  dateformats: null,\n\n  /** @type {null|Array.<string>} */\n  timezones: [],\n  cache: {}\n};\n/*\nif (typeof(window) !== 'undefined') {\n    window[\"ilib\"] = ilib;\n}\n*/\n// export ilib for use as a module in nodejs\n\nif (typeof module !== 'undefined') {\n  module.exports = ilib;\n  module.exports.ilib = ilib; // for backwards compatibility with older versions of ilib\n}\n/**\n * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing\n * internationalization aspects of software. Instead of translating the text of the software\n * into a foreign language, as in the process of localization, the textual elements of an application\n * are replaced with an altered version of the original language.These specific alterations make\n * the original words appear readable, but include the most problematic characteristics of \n * the world's languages: varying length of text or characters, language direction, and so on.\n * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF\n * \n * @param {string|undefined|null} localename the locale specifier for the pseudo locale\n */\n\n\nilib.setAsPseudoLocale = function (localename) {\n  if (localename) {\n    ilib.pseudoLocales.push(localename);\n  }\n};\n/**\n * Reset the list of pseudo locales back to the default single locale of zxx-XX.\n * @static\n */\n\n\nilib.clearPseudoLocales = function () {\n  ilib.pseudoLocales = [\"zxx-XX\", \"zxx-Cyrl-XX\", \"zxx-Hans-XX\", \"zxx-Hebr-XX\"];\n};\n\nilib.clearPseudoLocales();\n/**\n * Return the name of the platform\n * @private\n * @static\n * @return {string} string naming the platform\n */\n\nilib._getPlatform = function () {\n  if (!ilib._platform) {\n    try {\n      if (typeof java.lang.Object !== 'undefined') {\n        ilib._platform = typeof process !== 'undefined' ? \"trireme\" : \"rhino\";\n        return ilib._platform;\n      }\n    } catch (e) {}\n\n    if (typeof process !== 'undefined' && process.versions && process.versions.node && typeof module !== 'undefined') {\n      ilib._platform = \"nodejs\";\n    } else if (typeof Qt !== 'undefined') {\n      ilib._platform = \"qt\";\n    } else if (typeof window !== 'undefined') {\n      ilib._platform = typeof PalmSystem !== 'undefined' ? \"webos\" : \"browser\";\n    } else {\n      ilib._platform = \"unknown\";\n    }\n  }\n\n  return ilib._platform;\n};\n/**\n * If this ilib is running in a browser, return the name of that browser.\n * @private\n * @static\n * @return {string|undefined} the name of the browser that this is running in (\"firefox\", \"chrome\", \"ie\", \n * \"safari\", or \"opera\"), or undefined if this is not running in a browser or if\n * the browser name could not be determined \n */\n\n\nilib._getBrowser = function () {\n  var browser = undefined;\n\n  if (ilib._getPlatform() === \"browser\") {\n    if (navigator && navigator.userAgent) {\n      if (navigator.userAgent.indexOf(\"Firefox\") > -1) {\n        browser = \"firefox\";\n      }\n\n      if (navigator.userAgent.search(/Opera|OPR/) > -1) {\n        browser = \"opera\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Chrome\") > -1) {\n        browser = \"chrome\";\n      }\n\n      if (navigator.userAgent.indexOf(\" .NET\") > -1) {\n        browser = \"ie\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Safari\") > -1) {\n        // chrome also has the string Safari in its userAgent, but the chrome case is \n        // already taken care of above\n        browser = \"safari\";\n      }\n\n      if (navigator.userAgent.indexOf(\"Edge\") > -1) {\n        browser = \"Edge\";\n      }\n\n      if (navigator.userAgent.search(/iPad|iPhone|iPod/) > -1) {\n        // Due to constraints of the iOS platform, \n        // all browser must be built on top of the WebKit rendering engine\n        browser = \"iOS\";\n      }\n    }\n  }\n\n  return browser;\n};\n/**\n * Return the value of a global variable given its name in a way that works \n * correctly for the current platform.\n * @private\n * @static\n * @param {string} name the name of the variable to return\n * @return {*} the global variable, or undefined if it does not exist\n */\n\n\nilib._global = function (name) {\n  switch (ilib._getPlatform()) {\n    case \"rhino\":\n      var top = function () {\n        return (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === 'object' ? global : this;\n      }();\n\n      break;\n\n    case \"nodejs\":\n    case \"trireme\":\n      top = typeof global !== 'undefined' ? global : this; //console.log(\"ilib._global: top is \" + (typeof(global) !== 'undefined' ? \"global\" : \"this\"));\n\n      break;\n\n    case \"qt\":\n      return undefined;\n\n    default:\n      top = window;\n      break;\n  }\n\n  try {\n    return top[name];\n  } catch (e) {\n    return undefined;\n  }\n};\n/**\n * Return true if the global variable is defined on this platform.\n * @private\n * @static\n * @param {string} name the name of the variable to check\n * @return {boolean} true if the global variable is defined on this platform, false otherwise\n */\n\n\nilib._isGlobal = function (name) {\n  return typeof ilib._global(name) !== 'undefined';\n};\n/**\n * Clear the file load cache. This is mainly used by the unit tests,\n * but could be used by regular callers if you want to free up memory\n * for garbage collecting.\n */\n\n\nilib.clearCache = function () {\n  ilib.data.cache = {};\n};\n/**\n * Sets the default locale for all of ilib. This locale will be used\n * when no explicit locale is passed to any ilib class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\". If a type of parameter is string, \n * ilib will take only well-formed BCP-47 tag  <p>\n * \n * \n * @static\n * @param {string|undefined|null} spec the locale specifier for the default locale\n */\n\n\nilib.setLocale = function (spec) {\n  if (typeof spec === 'string' || !spec) {\n    ilib.locale = spec;\n  } // else ignore other data types, as we don't have the dependencies\n  // to look into them to find a locale\n\n};\n/**\n * Return the default locale for all of ilib if one has been set. This \n * locale will be used when no explicit locale is passed to any ilib \n * class. If the default\n * locale is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the locale \"en-US\".<p>\n * \n * \n * @static\n * @return {string} the locale specifier for the default locale\n */\n\n\nilib.getLocale = function () {\n  if (typeof ilib.locale !== 'string') {\n    var plat = ilib._getPlatform();\n\n    switch (plat) {\n      case 'browser':\n        // running in a browser\n        if (typeof navigator.language !== 'undefined') {\n          ilib.locale = navigator.language.substring(0, 3) + navigator.language.substring(3, 5).toUpperCase(); // FF/Opera/Chrome/Webkit    \n        }\n\n        if (!ilib.locale) {\n          // IE on Windows\n          var lang = typeof navigator.browserLanguage !== 'undefined' ? navigator.browserLanguage : typeof navigator.userLanguage !== 'undefined' ? navigator.userLanguage : typeof navigator.systemLanguage !== 'undefined' ? navigator.systemLanguage : undefined;\n\n          if (typeof lang !== 'undefined' && lang) {\n            // for some reason, MS uses lower case region tags\n            ilib.locale = lang.substring(0, 3) + lang.substring(3, 5).toUpperCase();\n          }\n        }\n\n        break;\n\n      case 'webos':\n        // webOS\n        if (typeof PalmSystem.locales !== 'undefined' && typeof PalmSystem.locales.UI != 'undefined' && PalmSystem.locales.UI.length > 0) {\n          ilib.locale = PalmSystem.locales.UI;\n        } else if (typeof PalmSystem.locale !== 'undefined') {\n          ilib.locale = PalmSystem.locale;\n        }\n\n        break;\n\n      case 'rhino':\n        if (typeof environment !== 'undefined' && environment.user && typeof environment.user.language === 'string' && environment.user.language.length > 0) {\n          // running under plain rhino\n          ilib.locale = environment.user.language;\n\n          if (typeof environment.user.country === 'string' && environment.user.country.length > 0) {\n            ilib.locale += '-' + environment.user.country;\n          }\n        }\n\n        break;\n\n      case \"trireme\":\n        // under trireme on rhino emulating nodejs\n        var lang = process.env.LANG || process.env.LANGUAGE || process.env.LC_ALL; // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n        // where language and region are the correct ISO codes separated by\n        // an underscore. This translate it back to the BCP-47 form.\n\n        if (lang && typeof lang !== 'undefined') {\n          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();\n        }\n\n        break;\n\n      case 'nodejs':\n        // running under nodejs\n        var lang = process.env.LANG || process.env.LC_ALL; // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\n        // where language and region are the correct ISO codes separated by\n        // an underscore. This translate it back to the BCP-47 form.\n\n        if (lang && typeof lang !== 'undefined') {\n          ilib.locale = lang.substring(0, 2).toLowerCase() + '-' + lang.substring(3, 5).toUpperCase();\n        }\n\n        break;\n\n      case 'qt':\n        // running in the Javascript engine under Qt/QML\n        var locobj = Qt.locale();\n        var lang = locobj.name && locobj.name.replace(\"_\", \"-\") || \"en-US\";\n        break;\n    }\n\n    ilib.locale = typeof ilib.locale === 'string' && ilib.locale ? ilib.locale : 'en-US';\n\n    if (ilib.locale === \"en\") {\n      ilib.locale = \"en-US\"; // hack to get various platforms working correctly\n    }\n  }\n\n  return ilib.locale;\n};\n/**\n * Sets the default time zone for all of ilib. This time zone will be used when\n * no explicit time zone is passed to any ilib class. If the default time zone\n * is not set, ilib will attempt to use the time zone of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the UTC zone \"Etc/UTC\".<p>\n * \n * \n * @static\n * @param {string} tz the name of the time zone to set as the default time zone\n */\n\n\nilib.setTimeZone = function (tz) {\n  ilib.tz = tz || ilib.tz;\n};\n/**\n * Return the default time zone for all of ilib if one has been set. This \n * time zone will be used when no explicit time zone is passed to any ilib \n * class. If the default time zone\n * is not set, ilib will attempt to use the locale of the\n * environment it is running in, if it can find that. If not, it will\n * default to the the zone \"local\".<p>\n * \n * \n * @static\n * @return {string} the default time zone for ilib\n */\n\n\nilib.getTimeZone = function () {\n  if (typeof ilib.tz === 'undefined') {\n    if (typeof navigator !== 'undefined' && typeof navigator.timezone !== 'undefined') {\n      // running in a browser\n      if (navigator.timezone.length > 0) {\n        ilib.tz = navigator.timezone;\n      }\n    } else if (typeof PalmSystem !== 'undefined' && typeof PalmSystem.timezone !== 'undefined') {\n      // running in webkit on webOS\n      if (PalmSystem.timezone.length > 0) {\n        ilib.tz = PalmSystem.timezone;\n      }\n    } else if (typeof environment !== 'undefined' && typeof environment.user !== 'undefined') {\n      // running under rhino\n      if (typeof environment.user.timezone !== 'undefined' && environment.user.timezone.length > 0) {\n        ilib.tz = environment.user.timezone;\n      }\n    } else if (typeof process !== 'undefined' && typeof process.env !== 'undefined') {\n      // running in nodejs\n      if (process.env.TZ && typeof process.env.TZ !== \"undefined\") {\n        ilib.tz = process.env.TZ;\n      }\n    }\n\n    ilib.tz = ilib.tz || \"local\";\n  }\n\n  return ilib.tz;\n};\n/**\n * @class\n * Defines the interface for the loader class for ilib. The main method of the\n * loader object is loadFiles(), which loads a set of requested locale data files\n * from where-ever it is stored.\n * @interface\n */\n\n\nilib.Loader = function () {};\n/**\n * Load a set of files from where-ever it is stored.<p>\n * \n * This is the main function define a callback function for loading missing locale \n * data or resources.\n * If this copy of ilib is assembled without including the required locale data\n * or resources, then that data can be lazy loaded dynamically when it is \n * needed by calling this method. Each ilib class will first\n * check for the existence of data under ilib.data, and if it is not there, \n * it will attempt to load it by calling this method of the laoder, and then place\n * it there.<p>\n * \n * Suggested implementations of this method might load files \n * directly from disk under nodejs or rhino, or within web pages, to load \n * files from the server with XHR calls.<p>\n * \n * The first parameter to this method, paths, is an array of relative paths within \n * the ilib dir structure for the \n * requested data. These paths will already have the locale spec integrated \n * into them, so no further tweaking needs to happen to load the data. Simply\n * load the named files. The second\n * parameter tells the loader whether to load the files synchronously or asynchronously.\n * If the sync parameters is false, then the onLoad function must also be specified.\n * The third parameter gives extra parameters to the loader passed from the calling\n * code. This may contain any property/value pairs.  The last parameter, callback,\n * is a callback function to call when all of the data is finishing loading. Make\n * sure to call the callback with the context of \"this\" so that the caller has their \n * context back again.<p>\n * \n * The loader function must be able to operate either synchronously or asychronously. \n * If the loader function is called with an undefined callback function, it is\n * expected to load the data synchronously, convert it to javascript\n * objects, and return the array of json objects as the return value of the \n * function. If the loader \n * function is called with a callback function, it may load the data \n * synchronously or asynchronously (doesn't matter which) as long as it calls\n * the callback function with the data converted to a javascript objects\n * when it becomes available. If a particular file could not be loaded, the \n * loader function should put undefined into the corresponding entry in the\n * results array. \n * Note that it is important that all the data is loaded before the callback\n * is called.<p>\n * \n * An example implementation for nodejs might be:\n * \n * <pre>\n * var fs = require(\"fs\");\n * \n * var myLoader = function() {};\n * myLoader.prototype = new Loader();\n * myLoader.prototype.constructor = myLoader;\n * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {\n *    if (sync) {\n *        var ret = [];\n *        // synchronous load -- just return the result\n *        paths.forEach(function (path) {\n *            var json = fs.readFileSync(path, \"utf-8\");\n *            ret.push(json ? JSON.parse(json) : undefined);\n *        });\n *        \n *        return ret;\n *    }\n *    this.callback = callback;\n *\n *    // asynchronous\n *    this.results = [];\n *    this._loadFilesAsync(paths);\n * }\n * myLoader.prototype._loadFilesAsync = function (paths) {\n *    if (paths.length > 0) {\n *        var file = paths.shift();\n *        fs.readFile(file, \"utf-8\", function(err, json) {\n *            this.results.push(err ? undefined : JSON.parse(json));\n *            // call self recursively so that the callback is only called at the end\n *            // when all the files are loaded sequentially\n *            if (paths.length > 0) {\n *                this._loadFilesAsync(paths);\n *            } else {\n *                this.callback(this.results);\n *            }\n *        });\n *     }\n * }\n * \n * // bind to \"this\" so that \"this\" is relative to your own instance\n * ilib.setLoaderCallback(new myLoader());\n * </pre>\n\n * @param {Array.<string>} paths An array of paths to load from wherever the files are stored \n * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously\n * @param {Object} params an object with any extra parameters for the loader. These can be \n * anything. The caller of the ilib class passes these parameters in. Presumably, the code that\n * calls ilib and the code that provides the loader are together and can have a private \n * agreement between them about what the parameters should contain.\n * @param {function(Object)} callback function to call when the files are all loaded. The \n * parameter of the callback function is the contents of the files.\n */\n\n\nilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};\n/**\n * Return all files available for loading using this loader instance.\n * This method returns an object where the properties are the paths to\n * directories where files are loaded from and the values are an array\n * of strings containing the relative paths under the directory of each\n * file that can be loaded.<p>\n * \n * Example:\n *  <pre>\n *  {\n *      \"/usr/share/javascript/ilib/locale\": [\n *          \"dateformats.json\",\n *          \"aa/dateformats.json\",\n *          \"af/dateformats.json\",\n *          \"agq/dateformats.json\",\n *          \"ak/dateformats.json\",\n *          ...\n *          \"zxx/dateformats.json\"\n *      ]\n *  }\n *  </pre>\n * @returns {Object} a hash containing directory names and\n * paths to file that can be loaded by this loader \n */\n\n\nilib.Loader.prototype.listAvailableFiles = function () {};\n/**\n * Return true if the file in the named path is available for loading using\n * this loader. The path may be given as an absolute path, in which case\n * only that file is checked, or as a relative path, in which case, the\n * relative path may appear underneath any of the directories that the loader\n * knows about.\n * @returns {boolean} true if the file in the named path is available for loading, and\n * false otherwise\n */\n\n\nilib.Loader.prototype.isAvailable = function (path) {};\n/**\n * Set the custom loader used to load ilib's locale data in your environment. \n * The instance passed in must implement the Loader interface. See the\n * Loader class documentation for more information about loaders. \n * \n * @static\n * @param {ilib.Loader} loader class to call to access the requested data.\n * @return {boolean} true if the loader was installed correctly, or false\n * if not\n */\n\n\nilib.setLoaderCallback = function (loader) {\n  // only a basic check\n  if (_typeof(loader) === 'object' && typeof loader.loadFiles === 'function' || typeof loader === 'function' || typeof loader === 'undefined') {\n    //console.log(\"setting callback loader to \" + (loader ? loader.name : \"undefined\"));\n    ilib._load = loader;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Return the custom Loader instance currently in use with this instance \n * of ilib. If there is no loader, this method returns undefined.\n * \n * @protected\n * @static\n * @return {ilib.Loader|undefined} the loader instance currently in use, or \n * undefined if there is no such loader\n */\n\n\nilib.getLoader = function () {\n  return ilib._load;\n};\n/**\n * Test whether an object is an javascript array. \n * \n * @static\n * @param {*} object The object to test\n * @return {boolean} return true if the object is an array\n * and false otherwise\n */\n\n\nilib.isArray = function (object) {\n  if (_typeof(object) === 'object') {\n    return Object.prototype.toString.call(object) === '[object Array]';\n  }\n\n  return false;\n};\n/**\n * Extend object1 by mixing in everything from object2 into it. The objects\n * are deeply extended, meaning that this method recursively descends the\n * tree in the objects and mixes them in at each level. Arrays are extended\n * by concatenating the elements of object2 onto those of object1.  \n * \n * @static\n * @param {Object} object1 the target object to extend\n * @param {Object=} object2 the object to mix in to object1\n * @return {Object} returns object1\n */\n\n\nilib.extend = function (object1, object2) {\n  var prop = undefined;\n\n  if (object2) {\n    for (prop in object2) {\n      // don't extend object with undefined or functions\n      if (prop && typeof object2[prop] !== 'undefined' && typeof object2[prop] !== \"function\") {\n        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n          //console.log(\"Merging array prop \" + prop);\n          object1[prop] = object1[prop].concat(object2[prop]);\n        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {\n          //console.log(\"Merging object prop \" + prop);\n          if (prop !== \"ilib\") {\n            object1[prop] = ilib.extend(object1[prop], object2[prop]);\n          }\n        } else {\n          //console.log(\"Copying prop \" + prop);\n          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n          object1[prop] = object2[prop];\n        }\n      }\n    }\n  }\n\n  return object1;\n};\n\nilib.extend2 = function (object1, object2) {\n  var prop = undefined;\n\n  if (object2) {\n    for (prop in object2) {\n      // don't extend object with undefined or functions\n      if (prop && typeof object2[prop] !== 'undefined') {\n        if (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\n          //console.log(\"Merging array prop \" + prop);\n          object1[prop] = object1[prop].concat(object2[prop]);\n        } else if (_typeof(object1[prop]) === 'object' && _typeof(object2[prop]) === 'object') {\n          //console.log(\"Merging object prop \" + prop);\n          if (prop !== \"ilib\") {\n            object1[prop] = ilib.extend2(object1[prop], object2[prop]);\n          }\n        } else {\n          //console.log(\"Copying prop \" + prop);\n          // for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\n          object1[prop] = object2[prop];\n        }\n      }\n    }\n  }\n\n  return object1;\n};\n/**\n * If Function.prototype.bind does not exist in this JS engine, this\n * function reimplements it in terms of older JS functions.\n * bind() doesn't exist in many older browsers.\n * \n * @static\n * @param {Object} scope object that the method should operate on\n * @param {function(...)} method method to call\n * @return {function(...)|undefined} function that calls the given method \n * in the given scope with all of its arguments properly attached, or\n * undefined if there was a problem with the arguments\n */\n\n\nilib.bind = function (scope, method\n/*, bound arguments*/\n) {\n  if (!scope || !method) {\n    return undefined;\n  }\n  /** @protected \n   * @param {Arguments} inArrayLike\n   * @param {number=} inOffset\n   */\n\n\n  function cloneArray(inArrayLike, inOffset) {\n    var arr = [];\n\n    for (var i = inOffset || 0, l = inArrayLike.length; i < l; i++) {\n      arr.push(inArrayLike[i]);\n    }\n\n    return arr;\n  }\n\n  if (typeof method === 'function') {\n    var func,\n        args = cloneArray(arguments, 2);\n\n    if (typeof method.bind === 'function') {\n      func = method.bind.apply(method, [scope].concat(args));\n    } else {\n      func = function func() {\n        var nargs = cloneArray(arguments); // invoke with collected args\n\n        return method.apply(scope, args.concat(nargs));\n      };\n    }\n\n    return func;\n  }\n\n  return undefined;\n};\n/**\n * @private\n */\n\n\nilib._dyncode = false;\n/**\n * Return true if this copy of ilib is using dynamically loaded code. It returns\n * false for pre-assembled code.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded code, and false otherwise\n */\n\nilib.isDynCode = function () {\n  return ilib._dyncode;\n};\n/**\n * @private\n */\n\n\nilib._dyndata = false;\n/**\n * Return true if this copy of ilib is using dynamically loaded locale data. It returns\n * false for pre-assembled data.\n * \n * @static\n * @return {boolean} true if this ilib uses dynamically loaded locale data, and false otherwise\n */\n\nilib.isDynData = function () {\n  return ilib._dyndata;\n};\n\nilib._loadtime = new Date().getTime();"]},"metadata":{},"sourceType":"module"}