{"ast":null,"code":"\"use strict\";\n/*\n * julianDate.js - Represent a date in the Julian calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nJulianCal.js \nRataDie.js\n*/\n\nvar RataDie = require(\"./RataDie.js\");\n\nvar JulianCal = require(\"./JulianCal.js\");\n/**\n * @class\n * Construct a new Julian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Julian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date\n */\n\n\nvar JulianRataDie = function JulianRataDie(params) {\n  this.cal = params && params.cal || new JulianCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nJulianRataDie.prototype = new RataDie();\nJulianRataDie.prototype.parent = RataDie;\nJulianRataDie.prototype.constructor = JulianRataDie;\n/**\n * The difference between a zero Julian day and the first Julian date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @type number\n */\n\nJulianRataDie.prototype.epoch = 1721422.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nJulianRataDie.prototype._setDateComponents = function (date) {\n  var year = date.year + (date.year < 0 ? 1 : 0);\n  var years = 365 * (year - 1) + Math.floor((year - 1) / 4);\n  var dayInYear = (date.month > 1 ? JulianCal.cumMonthLengths[date.month - 1] : 0) + date.day + (this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  console.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n  console.log(\"getRataDie: year is \" +  years);\n  console.log(\"getRataDie: day in year is \" +  dayInYear);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n  */\n\n  this.rd = years + dayInYear + rdtime;\n};\n\nmodule.exports = JulianRataDie;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\JulianRataDie.js"],"names":["RataDie","require","JulianCal","JulianRataDie","params","cal","rd","NaN","call","prototype","parent","constructor","epoch","_setDateComponents","date","year","years","Math","floor","dayInYear","month","cumMonthLengths","day","isLeapYear","rdtime","hour","minute","second","millisecond","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;AAIA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAIE,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACjD,OAAKC,GAAL,GAAWD,MAAM,IAAIA,MAAM,CAACC,GAAjB,IAAwB,IAAIH,SAAJ,EAAnC;AACA,OAAKI,EAAL,GAAUC,GAAV;AACAP,EAAAA,OAAO,CAACQ,IAAR,CAAa,IAAb,EAAmBJ,MAAnB;AACD,CAJD;;AAMAD,aAAa,CAACM,SAAd,GAA0B,IAAIT,OAAJ,EAA1B;AACAG,aAAa,CAACM,SAAd,CAAwBC,MAAxB,GAAiCV,OAAjC;AACAG,aAAa,CAACM,SAAd,CAAwBE,WAAxB,GAAsCR,aAAtC;AACA;;;;;;;AAOAA,aAAa,CAACM,SAAd,CAAwBG,KAAxB,GAAgC,SAAhC;AACA;;;;;;;;AAQAT,aAAa,CAACM,SAAd,CAAwBI,kBAAxB,GAA6C,UAAUC,IAAV,EAAgB;AAC3D,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACC,IAAL,GAAY,CAAZ,GAAgB,CAAhB,GAAoB,CAAjC,CAAX;AACA,MAAIC,KAAK,GAAG,OAAOD,IAAI,GAAG,CAAd,IAAmBE,IAAI,CAACC,KAAL,CAAW,CAACH,IAAI,GAAG,CAAR,IAAa,CAAxB,CAA/B;AACA,MAAII,SAAS,GAAG,CAACL,IAAI,CAACM,KAAL,GAAa,CAAb,GAAiBlB,SAAS,CAACmB,eAAV,CAA0BP,IAAI,CAACM,KAAL,GAAa,CAAvC,CAAjB,GAA6D,CAA9D,IAAmEN,IAAI,CAACQ,GAAxE,IAA+E,KAAKjB,GAAL,CAASkB,UAAT,CAAoBT,IAAI,CAACC,IAAzB,KAAkCD,IAAI,CAACM,KAAL,GAAa,CAA/C,GAAmD,CAAnD,GAAuD,CAAtI,CAAhB;AACA,MAAII,MAAM,GAAG,CAACV,IAAI,CAACW,IAAL,GAAY,OAAZ,GAAsBX,IAAI,CAACY,MAAL,GAAc,KAApC,GAA4CZ,IAAI,CAACa,MAAL,GAAc,IAA1D,GAAiEb,IAAI,CAACc,WAAvE,IAAsF,QAAnG;AACA;;;;;;;;AAQA,OAAKtB,EAAL,GAAUU,KAAK,GAAGG,SAAR,GAAoBK,MAA9B;AACD,CAdD;;AAgBAK,MAAM,CAACC,OAAP,GAAiB3B,aAAjB","sourcesContent":["\"use strict\";\n\n/*\n * julianDate.js - Represent a date in the Julian calendar\n * \n * Copyright © 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nJulianCal.js \nRataDie.js\n*/\nvar RataDie = require(\"./RataDie.js\");\n\nvar JulianCal = require(\"./JulianCal.js\");\n/**\n * @class\n * Construct a new Julian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Julian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date\n */\n\n\nvar JulianRataDie = function JulianRataDie(params) {\n  this.cal = params && params.cal || new JulianCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nJulianRataDie.prototype = new RataDie();\nJulianRataDie.prototype.parent = RataDie;\nJulianRataDie.prototype.constructor = JulianRataDie;\n/**\n * The difference between a zero Julian day and the first Julian date\n * of Friday, July 16, 622 CE Julian. \n * @private\n * @type number\n */\n\nJulianRataDie.prototype.epoch = 1721422.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nJulianRataDie.prototype._setDateComponents = function (date) {\n  var year = date.year + (date.year < 0 ? 1 : 0);\n  var years = 365 * (year - 1) + Math.floor((year - 1) / 4);\n  var dayInYear = (date.month > 1 ? JulianCal.cumMonthLengths[date.month - 1] : 0) + date.day + (this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  console.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\n  console.log(\"getRataDie: year is \" +  years);\n  console.log(\"getRataDie: day in year is \" +  dayInYear);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\n  */\n\n  this.rd = years + dayInYear + rdtime;\n};\n\nmodule.exports = JulianRataDie;"]},"metadata":{},"sourceType":"module"}