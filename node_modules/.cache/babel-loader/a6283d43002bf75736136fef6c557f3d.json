{"ast":null,"code":"\"use strict\";\n/*\n * PersAlsoRataDie.js - Represent an RD date in the Persian algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nPersianAlgoCal.js \nMathUtils.js\nRataDie.js\n*/\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\n\n\nvar PersAlgoRataDie = function PersAlgoRataDie(params) {\n  this.cal = params && params.cal || new PersianAlgoCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nPersAlgoRataDie.prototype = new RataDie();\nPersAlgoRataDie.prototype.parent = RataDie;\nPersAlgoRataDie.prototype.constructor = PersAlgoRataDie;\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @type number\n */\n\nPersAlgoRataDie.prototype.epoch = 1948319.5;\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year \n */\n\nPersAlgoRataDie.cumMonthLengths = [0, // Farvardin\n31, // Ordibehesht\n62, // Khordad\n93, // Tir\n124, // Mordad\n155, // Shahrivar\n186, // Mehr\n216, // Aban\n246, // Azar\n276, // Dey\n306, // Bahman\n336, // Esfand\n365];\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nPersAlgoRataDie.prototype._setDateComponents = function (date) {\n  var year = this.cal.equivalentCycleYear(date.year);\n  var y = date.year - (date.year >= 0 ? 474 : 473);\n  var rdOfYears = 1029983 * Math.floor(y / 2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);\n  var dayInYear = (date.month > 1 ? PersAlgoRataDie.cumMonthLengths[date.month - 1] : 0) + date.day;\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  // console.log(\"getRataDie: converting \" +  JSON.stringify(this));\n  console.log(\"getRataDie: year is \" +  year);\n  console.log(\"getRataDie: rd of years is \" +  rdOfYears);\n  console.log(\"getRataDie: day in year is \" +  dayInYear);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (rdOfYears + dayInYear + rdtime));\n  */\n\n  this.rd = rdOfYears + dayInYear + rdtime;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nPersAlgoRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersAlgoRataDie;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\i18n\\ilib\\lib\\PersAlgoRataDie.js"],"names":["MathUtils","require","PersianAlgoCal","RataDie","PersAlgoRataDie","params","cal","rd","NaN","call","prototype","parent","constructor","epoch","cumMonthLengths","_setDateComponents","date","year","equivalentCycleYear","y","rdOfYears","Math","floor","dayInYear","month","day","rdtime","hour","minute","second","millisecond","_onOrBefore","dayOfWeek","mod","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAKA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,qBAAD,CAA5B;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,cAAD,CAArB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,IAAIG,eAAe,GAAG,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AACrD,OAAKC,GAAL,GAAWD,MAAM,IAAIA,MAAM,CAACC,GAAjB,IAAwB,IAAIJ,cAAJ,EAAnC;AACA,OAAKK,EAAL,GAAUC,GAAV;AACAL,EAAAA,OAAO,CAACM,IAAR,CAAa,IAAb,EAAmBJ,MAAnB;AACD,CAJD;;AAMAD,eAAe,CAACM,SAAhB,GAA4B,IAAIP,OAAJ,EAA5B;AACAC,eAAe,CAACM,SAAhB,CAA0BC,MAA1B,GAAmCR,OAAnC;AACAC,eAAe,CAACM,SAAhB,CAA0BE,WAA1B,GAAwCR,eAAxC;AACA;;;;;;AAMAA,eAAe,CAACM,SAAhB,CAA0BG,KAA1B,GAAkC,SAAlC;AACA;;;;;;;AAOAT,eAAe,CAACU,eAAhB,GAAkC,CAAC,CAAD,EAAI;AACtC,EADkC,EAC9B;AACJ,EAFkC,EAE9B;AACJ,EAHkC,EAG9B;AACJ,GAJkC,EAI7B;AACL,GALkC,EAK7B;AACL,GANkC,EAM7B;AACL,GAPkC,EAO7B;AACL,GARkC,EAQ7B;AACL,GATkC,EAS7B;AACL,GAVkC,EAU7B;AACL,GAXkC,EAW7B;AACL,GAZkC,CAAlC;AAaA;;;;;;;;AAQAV,eAAe,CAACM,SAAhB,CAA0BK,kBAA1B,GAA+C,UAAUC,IAAV,EAAgB;AAC7D,MAAIC,IAAI,GAAG,KAAKX,GAAL,CAASY,mBAAT,CAA6BF,IAAI,CAACC,IAAlC,CAAX;AACA,MAAIE,CAAC,GAAGH,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACC,IAAL,IAAa,CAAb,GAAiB,GAAjB,GAAuB,GAApC,CAAR;AACA,MAAIG,SAAS,GAAG,UAAUC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,IAAf,CAAV,GAAiC,OAAOF,IAAI,GAAG,CAAd,CAAjC,GAAoDI,IAAI,CAACC,KAAL,CAAW,CAAC,MAAML,IAAN,GAAa,GAAd,IAAqB,IAAhC,CAApE;AACA,MAAIM,SAAS,GAAG,CAACP,IAAI,CAACQ,KAAL,GAAa,CAAb,GAAiBpB,eAAe,CAACU,eAAhB,CAAgCE,IAAI,CAACQ,KAAL,GAAa,CAA7C,CAAjB,GAAmE,CAApE,IAAyER,IAAI,CAACS,GAA9F;AACA,MAAIC,MAAM,GAAG,CAACV,IAAI,CAACW,IAAL,GAAY,OAAZ,GAAsBX,IAAI,CAACY,MAAL,GAAc,KAApC,GAA4CZ,IAAI,CAACa,MAAL,GAAc,IAA1D,GAAiEb,IAAI,CAACc,WAAvE,IAAsF,QAAnG;AACA;;;;;;;;;AASA,OAAKvB,EAAL,GAAUa,SAAS,GAAGG,SAAZ,GAAwBG,MAAlC;AACD,CAhBD;AAiBA;;;;;;;;;;;AAWAtB,eAAe,CAACM,SAAhB,CAA0BqB,WAA1B,GAAwC,UAAUxB,EAAV,EAAcyB,SAAd,EAAyB;AAC/D,SAAOzB,EAAE,GAAGP,SAAS,CAACiC,GAAV,CAAcZ,IAAI,CAACC,KAAL,CAAWf,EAAX,IAAiByB,SAAjB,GAA6B,CAA3C,EAA8C,CAA9C,CAAZ;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiB/B,eAAjB","sourcesContent":["\"use strict\";\n\n/*\n * PersAlsoRataDie.js - Represent an RD date in the Persian algorithmic calendar\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nPersianAlgoCal.js \nMathUtils.js\nRataDie.js\n*/\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Persian RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\n */\n\n\nvar PersAlgoRataDie = function PersAlgoRataDie(params) {\n  this.cal = params && params.cal || new PersianAlgoCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nPersAlgoRataDie.prototype = new RataDie();\nPersAlgoRataDie.prototype.parent = RataDie;\nPersAlgoRataDie.prototype.constructor = PersAlgoRataDie;\n/**\n * The difference between a zero Julian day and the first Persian date\n * @private\n * @type number\n */\n\nPersAlgoRataDie.prototype.epoch = 1948319.5;\n/**\n * @private\n * @const\n * @type Array.<number>\n * the cumulative lengths of each month, for a non-leap year \n */\n\nPersAlgoRataDie.cumMonthLengths = [0, // Farvardin\n31, // Ordibehesht\n62, // Khordad\n93, // Tir\n124, // Mordad\n155, // Shahrivar\n186, // Mehr\n216, // Aban\n246, // Azar\n276, // Dey\n306, // Bahman\n336, // Esfand\n365];\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nPersAlgoRataDie.prototype._setDateComponents = function (date) {\n  var year = this.cal.equivalentCycleYear(date.year);\n  var y = date.year - (date.year >= 0 ? 474 : 473);\n  var rdOfYears = 1029983 * Math.floor(y / 2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);\n  var dayInYear = (date.month > 1 ? PersAlgoRataDie.cumMonthLengths[date.month - 1] : 0) + date.day;\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  // console.log(\"getRataDie: converting \" +  JSON.stringify(this));\n  console.log(\"getRataDie: year is \" +  year);\n  console.log(\"getRataDie: rd of years is \" +  rdOfYears);\n  console.log(\"getRataDie: day in year is \" +  dayInYear);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (rdOfYears + dayInYear + rdtime));\n  */\n\n  this.rd = rdOfYears + dayInYear + rdtime;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nPersAlgoRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\n};\n\nmodule.exports = PersAlgoRataDie;"]},"metadata":{},"sourceType":"module"}