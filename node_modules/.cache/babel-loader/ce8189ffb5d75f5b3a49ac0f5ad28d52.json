{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Spotlight = exports.getDirection = exports[\"default\"] = void 0;\n\nvar _keymap = require(\"@enact/core/keymap\");\n\nvar _snapshot = require(\"@enact/core/snapshot\");\n\nvar _platform = _interopRequireDefault(require(\"@enact/core/platform\"));\n\nvar _last = _interopRequireDefault(require(\"ramda/src/last\"));\n\nvar _Accelerator = _interopRequireDefault(require(\"../Accelerator\"));\n\nvar _Spottable = require(\"../Spottable\");\n\nvar _Pause = require(\"../Pause\");\n\nvar _container = require(\"./container\");\n\nvar _pointer = require(\"./pointer\");\n\nvar _target = require(\"./target\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*\n * A javascript-based implementation of Spatial Navigation.\n *\n * Copyright (c) 2016 Luke Chang.\n * https://github.com/luke-chang/js-spatial-navigation\n *\n * Licensed under the MPL license.\n */\n\n/**\n * Exports the {@link spotlight.Spotlight} object used for controlling spotlight behavior and the\n * {@link spotlight.Spotlight.getDirection} function for mapping a keycode to a spotlight direction.\n *\n * The default export is {@link spotlight.Spotlight}.\n *\n * @module spotlight\n */\n\n\nvar isDown = (0, _keymap.is)('down');\nvar isEnter = (0, _keymap.is)('enter');\nvar isLeft = (0, _keymap.is)('left');\nvar isRight = (0, _keymap.is)('right');\nvar isUp = (0, _keymap.is)('up');\n/**\n * Translates keyCodes into 5-way direction descriptions (e.g. `'down'`)\n *\n * @function\n * @memberof spotlight\n * @param {Number} keyCode - Key code to analyze\n * @returns {String|false} - One of `'up'`, `'down'`, `'left'`, `'right'` or `false` if not a direction key\n * @public\n */\n\nvar getDirection = function getDirection(keyCode) {\n  return isDown(keyCode) && 'down' || isLeft(keyCode) && 'left' || isRight(keyCode) && 'right' || isUp(keyCode) && 'up';\n};\n\nexports.getDirection = getDirection;\nvar SpotlightAccelerator = new _Accelerator[\"default\"]();\n/**\n * Provides 5-way navigation and focus support\n *\n * ```\n * import Spotlight from '@enact/Spotlight';\n *\n * // get the currently focused component\n * const current = Spotlight.getCurrent();\n *\n * // focus an element by CSS selector\n * Spotlight.focus('.my-custom-class');\n *\n * // is `current` focusable?\n * const isFocused = Spotlight.isSpottable(current);\n * ```\n *\n * @type {Object}\n * @memberof spotlight\n * @public\n */\n\nvar Spotlight = function () {\n  'use strict';\n  /*\n  /* private vars\n  */\n\n  var _initialized = false;\n  var _duringFocusChange = false;\n  /*\n   * Whether a 5-way directional key is being held.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _5WayKeyHold = false;\n  /*\n   * Whether to set focus during the next window focus event\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _spotOnWindowFocus = false;\n  /*\n   * `true` when a pointer move event occurs during a keypress. Used to short circuit key down\n   * handling until the next keyup occurs.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _pointerMoveDuringKeyPress = false;\n  /*\n  * protected methods\n  */\n\n  function preventDefault(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    return false;\n  }\n\n  function shouldPreventNavigation() {\n    return (0, _Pause.isPaused)() || (0, _container.getAllContainerIds)().length === 0;\n  }\n\n  function _getCurrent() {\n    if (!(0, _snapshot.isWindowReady)()) return;\n    var activeElement = document.activeElement;\n\n    if (activeElement && activeElement !== document.body) {\n      return activeElement;\n    }\n  } // An extension point for updating pointer mode based on the current platform.\n  // Currently only webOS\n\n\n  function setPlatformPointerMode() {\n    var palmSystem = window.PalmSystem;\n\n    if (palmSystem && palmSystem.cursor) {\n      (0, _pointer.setPointerMode)(palmSystem.cursor.visibility);\n    }\n  }\n\n  function focusElement(elem, containerIds, fromPointer) {\n    if (!elem) {\n      return false;\n    }\n\n    if ((0, _pointer.getPointerMode)() && !fromPointer) {\n      (0, _container.setContainerLastFocusedElement)(elem, containerIds);\n      return false;\n    }\n\n    var currentFocusedElement = _getCurrent();\n\n    if (elem === currentFocusedElement) {\n      return true;\n    }\n\n    var focusOptions = (0, _container.isWithinOverflowContainer)(elem, containerIds) ? {\n      preventScroll: true\n    } : null;\n\n    var silentFocus = function silentFocus() {\n      elem.focus(focusOptions);\n      focusChanged(elem, containerIds);\n    };\n\n    if (_duringFocusChange) {\n      silentFocus();\n      return true;\n    }\n\n    _duringFocusChange = true;\n\n    if ((0, _Pause.isPaused)()) {\n      silentFocus();\n      _duringFocusChange = false;\n      return true;\n    }\n\n    elem.focus(focusOptions);\n    _duringFocusChange = false;\n    focusChanged(elem, containerIds);\n    return true;\n  }\n\n  function focusChanged(elem, containerIds) {\n    if (!containerIds || !containerIds.length) {\n      containerIds = (0, _container.getContainersForNode)(elem);\n    }\n\n    var containerId = (0, _last[\"default\"])(containerIds);\n\n    if (containerId) {\n      (0, _container.setContainerLastFocusedElement)(elem, containerIds);\n      (0, _container.setLastContainer)(containerId);\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      assignFocusPreview(elem);\n    }\n  }\n\n  function restoreFocus() {\n    var lastContainerId = (0, _container.getLastContainer)();\n    var next = [_container.rootContainerId];\n\n    if (lastContainerId) {\n      next.unshift(lastContainerId); // only prepend last focused if it exists so that Spotlight.focus() doesn't receive\n      // a falsy target\n\n      var lastFocused = (0, _container.getContainerLastFocusedElement)(lastContainerId);\n\n      if (lastFocused) {\n        next.unshift(lastFocused);\n      }\n    } // attempt to find a target starting with the last focused element in the last\n    // container, followed by the last container, and finally the root container\n\n\n    return next.reduce(function (focused, target) {\n      return focused || Spotlight.focus(target);\n    }, false);\n  } // The below should be gated on non-production environment only.\n\n\n  function assignFocusPreview(elem) {\n    var directions = ['up', 'right', 'down', 'left'],\n        nextClassBase = _Spottable.spottableClass + '-next-'; // Remove all previous targets\n\n    directions.forEach(function (dir) {\n      var nextClass = nextClassBase + dir,\n          prevElems = (0, _utils.parseSelector)('.' + nextClass);\n\n      if (prevElems && prevElems.length !== 0) {\n        prevElems.forEach(function (prevElem) {\n          return prevElem.classList.remove(nextClass);\n        });\n      }\n    }); // Find all next targets and identify them\n\n    directions.forEach(function (dir) {\n      var nextElem = (0, _target.getTargetByDirectionFromElement)(dir, elem);\n\n      if (nextElem) {\n        nextElem.classList.add(nextClassBase + dir);\n      }\n    });\n  }\n\n  function spotNextFromPoint(direction, position) {\n    var containerId = Spotlight.getActiveContainer();\n    var next = (0, _target.getTargetByDirectionFromPosition)(direction, position, containerId);\n\n    if (next) {\n      (0, _container.setContainerPreviousTarget)(containerId, direction, next, (0, _container.getContainerLastFocusedElement)(containerId));\n      return focusElement(next, (0, _container.getContainersForNode)(next));\n    }\n\n    return false;\n  }\n\n  function spotNext(direction, currentFocusedElement, currentContainerIds) {\n    var next = (0, _target.getTargetByDirectionFromElement)(direction, currentFocusedElement);\n\n    if (next) {\n      var currentContainerId = (0, _last[\"default\"])(currentContainerIds);\n      var nextContainerIds = (0, _container.getContainersForNode)(next); // prevent focus if 5-way is being held and the next element isn't wrapped by\n      // the current element's immediate container\n\n      if (_5WayKeyHold && nextContainerIds.indexOf(currentContainerId) < 0 && !(0, _container.isContainer5WayHoldable)(currentContainerId)) {\n        return false;\n      }\n\n      (0, _container.notifyLeaveContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);\n      (0, _container.setContainerPreviousTarget)(currentContainerId, direction, next, currentFocusedElement);\n      var focused = focusElement(next, nextContainerIds);\n      (0, _container.notifyEnterContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);\n      return focused;\n    }\n\n    (0, _container.notifyLeaveContainerFail)(direction, currentFocusedElement, currentContainerIds);\n    return false;\n  }\n\n  function onAcceleratedKeyDown(evt) {\n    var direction = getDirection(evt.keyCode);\n    if (!direction) return;\n\n    var currentFocusedElement = _getCurrent();\n\n    var currentContainerIds = (0, _container.getContainersForNode)(currentFocusedElement);\n    spotNext(direction, currentFocusedElement, currentContainerIds);\n  }\n\n  function onBlur() {\n    var current = _getCurrent();\n\n    if (current) {\n      current.blur();\n    }\n\n    Spotlight.setPointerMode(false);\n    _spotOnWindowFocus = true;\n    _pointerMoveDuringKeyPress = false;\n  }\n\n  function handleWebOSMouseEvent(ev) {\n    if (!(0, _Pause.isPaused)() && ev && ev.detail && ev.detail.type === 'Leave') {\n      onBlur();\n    }\n  }\n\n  function handleKeyboardStateChangeEvent(_ref) {\n    var visibility = _ref.visibility;\n\n    if (!visibility) {\n      setPlatformPointerMode();\n    }\n  }\n\n  function onFocus() {\n    // Normally, there isn't focus here unless the window has been blurred above. On webOS, the\n    // platform may focus the window after the app has already focused a component so we prevent\n    // trying to focus something else (potentially) unless the window was previously blurred\n    if (_spotOnWindowFocus) {\n      setPlatformPointerMode(); // If the window was previously blurred while in pointer mode, the last active containerId may\n      // not have yet set focus to its spottable elements. For this reason we can't rely on setting focus\n      // to the last focused element of the last active containerId, so we use rootContainerId instead\n\n      var lastFocusedElement = (0, _container.getContainerLastFocusedElement)(_container.rootContainerId);\n\n      while ((0, _container.isContainer)(lastFocusedElement)) {\n        var _getContainerConfig = (0, _container.getContainerConfig)(lastFocusedElement);\n\n        lastFocusedElement = _getContainerConfig.lastFocusedElement;\n      }\n\n      if (!Spotlight.focus(lastFocusedElement)) {\n        // If the last focused element was previously also disabled (or no longer exists), we\n        // need to set focus somewhere\n        Spotlight.focus();\n      }\n\n      _spotOnWindowFocus = false;\n    }\n  }\n\n  function onKeyUp(evt) {\n    _pointerMoveDuringKeyPress = false;\n    var keyCode = evt.keyCode;\n\n    if (getDirection(keyCode) || isEnter(keyCode)) {\n      SpotlightAccelerator.reset();\n      _5WayKeyHold = false;\n    }\n  }\n\n  function handlePointerHide() {\n    if (!_getCurrent()) {\n      restoreFocus();\n    }\n  }\n\n  function onKeyDown(evt) {\n    if (shouldPreventNavigation()) {\n      (0, _pointer.notifyKeyDown)(evt.keyCode);\n      return;\n    }\n\n    var keyCode = evt.keyCode;\n    var direction = getDirection(keyCode);\n    var pointerHandled = (0, _pointer.notifyKeyDown)(keyCode, handlePointerHide);\n\n    if (pointerHandled || !(direction || isEnter(keyCode))) {\n      return;\n    }\n\n    if (!(0, _Pause.isPaused)() && !_pointerMoveDuringKeyPress) {\n      if (_getCurrent()) {\n        SpotlightAccelerator.processKey(evt, onAcceleratedKeyDown);\n      } else if (!spotNextFromPoint(direction, (0, _pointer.getLastPointerPosition)())) {\n        restoreFocus();\n      }\n\n      _5WayKeyHold = true;\n    }\n\n    if (direction) {\n      preventDefault(evt);\n    }\n  }\n\n  function onMouseMove(_ref2) {\n    var target = _ref2.target,\n        clientX = _ref2.clientX,\n        clientY = _ref2.clientY;\n\n    if (shouldPreventNavigation()) {\n      (0, _pointer.notifyPointerMove)(null, target, clientX, clientY);\n      return;\n    }\n\n    var current = _getCurrent();\n\n    var update = (0, _pointer.notifyPointerMove)(current, target, clientX, clientY);\n\n    if (update) {\n      if (_5WayKeyHold) {\n        _pointerMoveDuringKeyPress = true;\n      }\n\n      var next = (0, _target.getNavigableTarget)(target); // TODO: Consider encapsulating this work within focusElement\n\n      if (next !== current) {\n        if (next) {\n          focusElement(next, (0, _container.getContainersForNode)(next), true);\n          return true;\n        } else if (current) {\n          current.blur();\n          (0, _container.setLastContainerFromTarget)(current, target);\n        }\n      }\n    }\n  }\n\n  function onMouseOver(evt) {\n    if (shouldPreventNavigation()) return;\n    var target = evt.target;\n\n    if ((0, _pointer.getPointerMode)() && (0, _pointer.hasPointerMoved)(evt.clientX, evt.clientY)) {\n      var next = (0, _target.getNavigableTarget)(target); // account for child controls\n\n      if (next && next !== _getCurrent()) {\n        focusElement(next, (0, _container.getContainersForNode)(next), true);\n        return true;\n      }\n\n      preventDefault(evt);\n    }\n  }\n\n  function onTouchEnd(evt) {\n    var current = _getCurrent();\n\n    if (current && !current.contains(evt.target)) {\n      current.blur();\n    }\n  }\n  /*\n   * public methods\n   */\n\n\n  var exports =\n  /** @lends spotlight.Spotlight */\n  {\n    // eslint-disable-line no-shadow\n\n    /**\n     * Initializes Spotlight. This is generally handled by\n     * {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}.\n     *\n     * @param {Object} containerDefaults Default configuration for new spotlight containers\n     * @returns {undefined}\n     * @public\n     */\n    initialize: function initialize(containerDefaults) {\n      if (!_initialized) {\n        window.addEventListener('blur', onBlur);\n        window.addEventListener('focus', onFocus);\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n        window.addEventListener('mouseover', onMouseOver);\n        window.addEventListener('mousemove', onMouseMove);\n\n        if (_platform[\"default\"].touch) {\n          window.addEventListener('touchend', onTouchEnd);\n        }\n\n        if (_platform[\"default\"].webos) {\n          window.top.document.addEventListener('webOSMouse', handleWebOSMouseEvent);\n          window.top.document.addEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);\n        }\n\n        (0, _container.setLastContainer)(_container.rootContainerId);\n        (0, _container.configureDefaults)(containerDefaults);\n        (0, _container.configureContainer)(_container.rootContainerId); // by default, pointer mode is off but the platform's current state will override that\n\n        (0, _pointer.setPointerMode)(false);\n        setPlatformPointerMode();\n        _initialized = true;\n      }\n    },\n\n    /**\n     * Terminates Spotlight. This is generally handled by {@link spotlight.SpotlightRootDecorator}.\n     *\n     * @public\n     */\n    terminate: function terminate() {\n      window.removeEventListener('blur', onBlur);\n      window.removeEventListener('focus', onFocus);\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mousemove', onMouseMove);\n\n      if (_platform[\"default\"].touch) {\n        window.removeEventListener('touchend', onTouchEnd);\n      }\n\n      if (_platform[\"default\"].webos) {\n        window.top.document.removeEventListener('webOSMouse', handleWebOSMouseEvent);\n        window.top.document.removeEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);\n      }\n\n      Spotlight.clear();\n      _initialized = false;\n    },\n\n    /**\n     * Resets spotlight container information\n     *\n     * @private\n     */\n    clear: function clear() {\n      (0, _container.removeAllContainers)();\n      (0, _container.setDefaultContainer)();\n      (0, _container.setLastContainer)();\n      _duringFocusChange = false;\n    },\n    // set(<config>);\n    // set(<containerId>, <config>);\n\n    /**\n     * Sets the config for spotlight or the specified containerID\n     *\n     * @function\n     * @param {String|Object} containerIdOrConfig  Configuration object or container ID\n     * @param {Object}        [config]             Configuration object if container ID supplied\n     *                                             in `containerIdOrConfig`\n     * @returns {undefined}\n     * @public\n     */\n    set: _container.configureContainer,\n    // add(<config>);\n    // add(<containerId>, <config>);\n\n    /**\n     * Adds the config for a new container. The container ID may be passed in the configuration\n     * object. If no container ID is supplied, a new container ID will be generated.\n     *\n     * @function\n     * @param {String|Object} containerIdOrConfig  Configuration object or container ID\n     * @param {Object}        [config]             Configuration object if container ID supplied\n     *                                             in `containerIdOrConfig`\n     * @returns {String} The container ID of the container\n     * @public\n     */\n    add: _container.addContainer,\n    unmount: function unmount(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      (0, _container.unmountContainer)(containerId);\n    },\n\n    /**\n     * Removes a container from Spotlight\n     *\n     * @param {String} containerId Container ID to remove\n     * @returns {Boolean} `true` if container removed, `false` if container does not exist\n     * @public\n     */\n    remove: function remove(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      if ((0, _container.getContainerConfig)(containerId)) {\n        (0, _container.removeContainer)(containerId);\n\n        if ((0, _container.getLastContainer)() === containerId) {\n          Spotlight.setActiveContainer(null);\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Disables the selector rules of the specified container\n     *\n     * @param {String} containerId Container ID selector rules to disable\n     * @returns {Boolean} `true` if container's selector rules are disabled, `false` if container does not exist\n     * @public\n     */\n    disableSelector: function disableSelector(containerId) {\n      if ((0, _container.isContainer)(containerId)) {\n        (0, _container.configureContainer)(containerId, {\n          selectorDisabled: false\n        });\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Enables the selector rules of the specified container\n     *\n     * @param {String} containerId Container ID selector rules to enable\n     * @returns {Boolean} `true` if container's selector rules are enabled, `false` if container does not exist\n     * @public\n     */\n    enableSelector: function enableSelector(containerId) {\n      if ((0, _container.isContainer)(containerId)) {\n        (0, _container.configureContainer)(containerId, {\n          selectorDisabled: false\n        });\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Pauses Spotlight\n     *\n     * @function\n     * @returns {undefined}\n     * @public\n     */\n    pause: _Pause.pause,\n\n    /**\n     * Resumes Spotlight\n     *\n     * @function\n     * @returns {undefined}\n     * @public\n     */\n    resume: _Pause.resume,\n    // focus()\n    // focus(<containerId>)\n    // focus(<extSelector>)\n\n    /**\n     * Focuses the specified component ID, container ID, element selector, or the default\n     * container.\n     *\n     * If Spotlight is in pointer mode, focus is not changed but `elem` will be set as the last\n     * focused element of its spotlight containers.\n     *\n     * @param {String|Object|undefined} elem Component ID, container, ID or element selector.\n     *\tIf not supplied, the default container will be focused.\n     * @returns {Boolean} `true` if focus successful, `false` if not.\n     * @public\n     */\n    focus: function focus(elem) {\n      var target = elem;\n      var wasContainerId = false;\n\n      if (!elem) {\n        target = (0, _target.getTargetByContainer)();\n      } else if (typeof elem === 'string') {\n        if ((0, _container.getContainerConfig)(elem)) {\n          target = (0, _target.getTargetByContainer)(elem);\n          wasContainerId = true;\n        } else if (/^[\\w\\d-]+$/.test(elem)) {\n          // support component IDs consisting of alphanumeric, dash, or underscore\n          target = (0, _target.getTargetBySelector)(\"[data-spotlight-id=\".concat(elem, \"]\"));\n        } else {\n          target = (0, _target.getTargetBySelector)(elem);\n        }\n      }\n\n      var nextContainerIds = (0, _container.getContainersForNode)(target);\n      var nextContainerId = (0, _last[\"default\"])(nextContainerIds);\n\n      if ((0, _container.isNavigable)(target, nextContainerId, true)) {\n        var focused = focusElement(target, nextContainerIds);\n\n        if (!focused && wasContainerId) {\n          (0, _container.setLastContainer)(elem);\n        }\n\n        return focused;\n      } else if (wasContainerId) {\n        // if we failed to find a spottable target within the provided container, we'll set\n        // it as the active container to allow it to focus itself if its contents change\n        (0, _container.setLastContainer)(elem);\n      }\n\n      return false;\n    },\n    // move(<direction>)\n    // move(<direction>, <selector>)\n\n    /**\n     * Moves focus to the next spottable control in the direction specified. Optionally, a source\n     * element selector may be supplied as the starting point.\n     *\n     * @param {String} direction Direction to move, one of `'left'`, `'right'`, `'up'` or `'down'`\n     * @param {String|undefined} selector If supplied, the element to move from. If not supplied,\n     *\tthe currently focused item will be used.\n     * @returns {Boolean} `true` if focus successful, `false` if not.\n     * @public\n     */\n    move: function move(direction, selector) {\n      direction = direction.toLowerCase();\n\n      if (direction !== 'up' && direction !== 'down' && direction !== 'left' && direction !== 'right') {\n        return false;\n      }\n\n      var elem = selector ? (0, _utils.parseSelector)(selector)[0] : _getCurrent();\n\n      if (!elem) {\n        return false;\n      }\n\n      var containerIds = (0, _container.getContainersForNode)(elem);\n\n      if (!containerIds.length) {\n        return false;\n      }\n\n      return spotNext(direction, elem, containerIds);\n    },\n\n    /**\n     * Sets or clears the default container that will receive focus.\n     *\n     * @function\n     * @param {String} [containerId] The container ID or a falsy value to clear default\n     *                               container\n     * @returns {undefined}\n     * @public\n     */\n    setDefaultContainer: _container.setDefaultContainer,\n\n    /**\n     * Gets the currently active container.\n     *\n     * @returns {String} The id of the currently active container\n     * @public\n     */\n    getActiveContainer: function getActiveContainer() {\n      return (0, _container.getLastContainer)() || _container.rootContainerId;\n    },\n\n    /**\n     * Sets the currently active container.\n     *\n     * Note: If the current container is restricted to 'self-only' and `containerId` is not\n     * contained within the current container then the active container will not be updated.\n     *\n     * @param {String} [containerId] The id of the currently active container. If this is not\n     *\tprovided, the root container is set as the currently active container.\n     * @public\n     */\n    setActiveContainer: function setActiveContainer(containerId) {\n      if ((0, _container.mayActivateContainer)(containerId)) {\n        (0, _container.setLastContainer)(containerId || _container.rootContainerId);\n      }\n    },\n\n    /**\n     * Gets the current pointer mode\n     *\n     * @function\n     * @returns {Boolean} `true` if spotlight is in pointer mode\n     * @public\n     */\n    getPointerMode: _pointer.getPointerMode,\n\n    /**\n     * Sets the current pointer mode\n     *\n     * @function\n     * @param {Boolean} pointerMode The value of the pointer mode. This determines how\n     *\tspotlight manages focus change behaviors.\n     * @public\n     */\n    setPointerMode: _pointer.setPointerMode,\n\n    /**\n     * Gets the muted mode value of a spottable element.\n     *\n     * @param {Object} elem The dom element used to determine the muted status.\n     * @returns {Boolean} `true` if the passed-in control is in muted mode.\n     * @public\n     */\n    isMuted: function isMuted(elem) {\n      if (!elem) {\n        return false;\n      }\n\n      return (0, _utils.matchSelector)('[data-spotlight-container-muted=\"true\"] .' + _Spottable.spottableClass, elem);\n    },\n\n    /**\n     * Determines whether Spotlight is currently paused.\n     *\n     * @function\n     * @returns {Boolean} `true` if Spotlight is currently paused.\n     * @public\n     */\n    isPaused: _Pause.isPaused,\n\n    /**\n     * Determines whether an element is spottable.\n     *\n     * @param {Object} elem The dom element used to determine the spottable status.\n     * @returns {Boolean} `true` if the element being evaluated is currently spottable.\n     * @public\n     */\n    isSpottable: function isSpottable(elem) {\n      if (!elem) {\n        return false;\n      }\n\n      return (0, _target.isFocusable)(elem);\n    },\n\n    /**\n     * Returns the currently spotted control.\n     *\n     * @returns {Node} The control that currently has focus, if available\n     * @public\n     */\n    getCurrent: function getCurrent() {\n      return _getCurrent();\n    },\n\n    /**\n     * Returns a list of spottable elements wrapped by the supplied container.\n     *\n     * @param {String} containerId The id of the container used to determine the list of spottable elements\n     * @returns {Node[]} The spottable elements that are wrapped by the supplied container\n     * @public\n     */\n    getSpottableDescendants: function getSpottableDescendants(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      return (0, _container.getSpottableDescendants)(containerId);\n    }\n  };\n  return exports;\n}();\n\nexports.Spotlight = Spotlight;\nvar _default = Spotlight;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/spotlight/src/spotlight.js"],"names":["Object","defineProperty","exports","value","Spotlight","getDirection","_keymap","require","_snapshot","_platform","_interopRequireDefault","_last","_Accelerator","_Spottable","_Pause","_container","_pointer","_target","_utils","obj","__esModule","isDown","is","isEnter","isLeft","isRight","isUp","keyCode","SpotlightAccelerator","_initialized","_duringFocusChange","_5WayKeyHold","_spotOnWindowFocus","_pointerMoveDuringKeyPress","preventDefault","evt","stopPropagation","shouldPreventNavigation","isPaused","getAllContainerIds","length","_getCurrent","isWindowReady","activeElement","document","body","setPlatformPointerMode","palmSystem","window","PalmSystem","cursor","setPointerMode","visibility","focusElement","elem","containerIds","fromPointer","getPointerMode","setContainerLastFocusedElement","currentFocusedElement","focusOptions","isWithinOverflowContainer","preventScroll","silentFocus","focus","focusChanged","getContainersForNode","containerId","setLastContainer","process","env","NODE_ENV","assignFocusPreview","restoreFocus","lastContainerId","getLastContainer","next","rootContainerId","unshift","lastFocused","getContainerLastFocusedElement","reduce","focused","target","directions","nextClassBase","spottableClass","forEach","dir","nextClass","prevElems","parseSelector","prevElem","classList","remove","nextElem","getTargetByDirectionFromElement","add","spotNextFromPoint","direction","position","getActiveContainer","getTargetByDirectionFromPosition","setContainerPreviousTarget","spotNext","currentContainerIds","currentContainerId","nextContainerIds","indexOf","isContainer5WayHoldable","notifyLeaveContainer","notifyEnterContainer","notifyLeaveContainerFail","onAcceleratedKeyDown","onBlur","current","blur","handleWebOSMouseEvent","ev","detail","type","handleKeyboardStateChangeEvent","_ref","onFocus","lastFocusedElement","isContainer","_getContainerConfig","getContainerConfig","onKeyUp","reset","handlePointerHide","onKeyDown","notifyKeyDown","pointerHandled","processKey","getLastPointerPosition","onMouseMove","_ref2","clientX","clientY","notifyPointerMove","update","getNavigableTarget","setLastContainerFromTarget","onMouseOver","hasPointerMoved","onTouchEnd","contains","initialize","containerDefaults","addEventListener","touch","webos","top","configureDefaults","configureContainer","terminate","removeEventListener","clear","removeAllContainers","setDefaultContainer","set","addContainer","unmount","Error","unmountContainer","removeContainer","setActiveContainer","disableSelector","selectorDisabled","enableSelector","pause","resume","wasContainerId","getTargetByContainer","test","getTargetBySelector","concat","nextContainerId","isNavigable","move","selector","toLowerCase","mayActivateContainer","isMuted","matchSelector","isSpottable","isFocusable","getCurrent","getSpottableDescendants","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Spotlight = exports.getDirection = exports[\"default\"] = void 0;\n\nvar _keymap = require(\"@enact/core/keymap\");\n\nvar _snapshot = require(\"@enact/core/snapshot\");\n\nvar _platform = _interopRequireDefault(require(\"@enact/core/platform\"));\n\nvar _last = _interopRequireDefault(require(\"ramda/src/last\"));\n\nvar _Accelerator = _interopRequireDefault(require(\"../Accelerator\"));\n\nvar _Spottable = require(\"../Spottable\");\n\nvar _Pause = require(\"../Pause\");\n\nvar _container = require(\"./container\");\n\nvar _pointer = require(\"./pointer\");\n\nvar _target = require(\"./target\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*\n * A javascript-based implementation of Spatial Navigation.\n *\n * Copyright (c) 2016 Luke Chang.\n * https://github.com/luke-chang/js-spatial-navigation\n *\n * Licensed under the MPL license.\n */\n\n/**\n * Exports the {@link spotlight.Spotlight} object used for controlling spotlight behavior and the\n * {@link spotlight.Spotlight.getDirection} function for mapping a keycode to a spotlight direction.\n *\n * The default export is {@link spotlight.Spotlight}.\n *\n * @module spotlight\n */\nvar isDown = (0, _keymap.is)('down');\nvar isEnter = (0, _keymap.is)('enter');\nvar isLeft = (0, _keymap.is)('left');\nvar isRight = (0, _keymap.is)('right');\nvar isUp = (0, _keymap.is)('up');\n/**\n * Translates keyCodes into 5-way direction descriptions (e.g. `'down'`)\n *\n * @function\n * @memberof spotlight\n * @param {Number} keyCode - Key code to analyze\n * @returns {String|false} - One of `'up'`, `'down'`, `'left'`, `'right'` or `false` if not a direction key\n * @public\n */\n\nvar getDirection = function getDirection(keyCode) {\n  return isDown(keyCode) && 'down' || isLeft(keyCode) && 'left' || isRight(keyCode) && 'right' || isUp(keyCode) && 'up';\n};\n\nexports.getDirection = getDirection;\nvar SpotlightAccelerator = new _Accelerator[\"default\"]();\n/**\n * Provides 5-way navigation and focus support\n *\n * ```\n * import Spotlight from '@enact/Spotlight';\n *\n * // get the currently focused component\n * const current = Spotlight.getCurrent();\n *\n * // focus an element by CSS selector\n * Spotlight.focus('.my-custom-class');\n *\n * // is `current` focusable?\n * const isFocused = Spotlight.isSpottable(current);\n * ```\n *\n * @type {Object}\n * @memberof spotlight\n * @public\n */\n\nvar Spotlight = function () {\n  'use strict';\n  /*\n  /* private vars\n  */\n\n  var _initialized = false;\n  var _duringFocusChange = false;\n  /*\n   * Whether a 5-way directional key is being held.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _5WayKeyHold = false;\n  /*\n   * Whether to set focus during the next window focus event\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _spotOnWindowFocus = false;\n  /*\n   * `true` when a pointer move event occurs during a keypress. Used to short circuit key down\n   * handling until the next keyup occurs.\n   *\n   * @type {Boolean}\n   * @default false\n   */\n\n  var _pointerMoveDuringKeyPress = false;\n  /*\n  * protected methods\n  */\n\n  function preventDefault(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    return false;\n  }\n\n  function shouldPreventNavigation() {\n    return (0, _Pause.isPaused)() || (0, _container.getAllContainerIds)().length === 0;\n  }\n\n  function _getCurrent() {\n    if (!(0, _snapshot.isWindowReady)()) return;\n    var activeElement = document.activeElement;\n\n    if (activeElement && activeElement !== document.body) {\n      return activeElement;\n    }\n  } // An extension point for updating pointer mode based on the current platform.\n  // Currently only webOS\n\n\n  function setPlatformPointerMode() {\n    var palmSystem = window.PalmSystem;\n\n    if (palmSystem && palmSystem.cursor) {\n      (0, _pointer.setPointerMode)(palmSystem.cursor.visibility);\n    }\n  }\n\n  function focusElement(elem, containerIds, fromPointer) {\n    if (!elem) {\n      return false;\n    }\n\n    if ((0, _pointer.getPointerMode)() && !fromPointer) {\n      (0, _container.setContainerLastFocusedElement)(elem, containerIds);\n      return false;\n    }\n\n    var currentFocusedElement = _getCurrent();\n\n    if (elem === currentFocusedElement) {\n      return true;\n    }\n\n    var focusOptions = (0, _container.isWithinOverflowContainer)(elem, containerIds) ? {\n      preventScroll: true\n    } : null;\n\n    var silentFocus = function silentFocus() {\n      elem.focus(focusOptions);\n      focusChanged(elem, containerIds);\n    };\n\n    if (_duringFocusChange) {\n      silentFocus();\n      return true;\n    }\n\n    _duringFocusChange = true;\n\n    if ((0, _Pause.isPaused)()) {\n      silentFocus();\n      _duringFocusChange = false;\n      return true;\n    }\n\n    elem.focus(focusOptions);\n    _duringFocusChange = false;\n    focusChanged(elem, containerIds);\n    return true;\n  }\n\n  function focusChanged(elem, containerIds) {\n    if (!containerIds || !containerIds.length) {\n      containerIds = (0, _container.getContainersForNode)(elem);\n    }\n\n    var containerId = (0, _last[\"default\"])(containerIds);\n\n    if (containerId) {\n      (0, _container.setContainerLastFocusedElement)(elem, containerIds);\n      (0, _container.setLastContainer)(containerId);\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      assignFocusPreview(elem);\n    }\n  }\n\n  function restoreFocus() {\n    var lastContainerId = (0, _container.getLastContainer)();\n    var next = [_container.rootContainerId];\n\n    if (lastContainerId) {\n      next.unshift(lastContainerId); // only prepend last focused if it exists so that Spotlight.focus() doesn't receive\n      // a falsy target\n\n      var lastFocused = (0, _container.getContainerLastFocusedElement)(lastContainerId);\n\n      if (lastFocused) {\n        next.unshift(lastFocused);\n      }\n    } // attempt to find a target starting with the last focused element in the last\n    // container, followed by the last container, and finally the root container\n\n\n    return next.reduce(function (focused, target) {\n      return focused || Spotlight.focus(target);\n    }, false);\n  } // The below should be gated on non-production environment only.\n\n\n  function assignFocusPreview(elem) {\n    var directions = ['up', 'right', 'down', 'left'],\n        nextClassBase = _Spottable.spottableClass + '-next-'; // Remove all previous targets\n\n    directions.forEach(function (dir) {\n      var nextClass = nextClassBase + dir,\n          prevElems = (0, _utils.parseSelector)('.' + nextClass);\n\n      if (prevElems && prevElems.length !== 0) {\n        prevElems.forEach(function (prevElem) {\n          return prevElem.classList.remove(nextClass);\n        });\n      }\n    }); // Find all next targets and identify them\n\n    directions.forEach(function (dir) {\n      var nextElem = (0, _target.getTargetByDirectionFromElement)(dir, elem);\n\n      if (nextElem) {\n        nextElem.classList.add(nextClassBase + dir);\n      }\n    });\n  }\n\n  function spotNextFromPoint(direction, position) {\n    var containerId = Spotlight.getActiveContainer();\n    var next = (0, _target.getTargetByDirectionFromPosition)(direction, position, containerId);\n\n    if (next) {\n      (0, _container.setContainerPreviousTarget)(containerId, direction, next, (0, _container.getContainerLastFocusedElement)(containerId));\n      return focusElement(next, (0, _container.getContainersForNode)(next));\n    }\n\n    return false;\n  }\n\n  function spotNext(direction, currentFocusedElement, currentContainerIds) {\n    var next = (0, _target.getTargetByDirectionFromElement)(direction, currentFocusedElement);\n\n    if (next) {\n      var currentContainerId = (0, _last[\"default\"])(currentContainerIds);\n      var nextContainerIds = (0, _container.getContainersForNode)(next); // prevent focus if 5-way is being held and the next element isn't wrapped by\n      // the current element's immediate container\n\n      if (_5WayKeyHold && nextContainerIds.indexOf(currentContainerId) < 0 && !(0, _container.isContainer5WayHoldable)(currentContainerId)) {\n        return false;\n      }\n\n      (0, _container.notifyLeaveContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);\n      (0, _container.setContainerPreviousTarget)(currentContainerId, direction, next, currentFocusedElement);\n      var focused = focusElement(next, nextContainerIds);\n      (0, _container.notifyEnterContainer)(direction, currentFocusedElement, currentContainerIds, next, nextContainerIds);\n      return focused;\n    }\n\n    (0, _container.notifyLeaveContainerFail)(direction, currentFocusedElement, currentContainerIds);\n    return false;\n  }\n\n  function onAcceleratedKeyDown(evt) {\n    var direction = getDirection(evt.keyCode);\n    if (!direction) return;\n\n    var currentFocusedElement = _getCurrent();\n\n    var currentContainerIds = (0, _container.getContainersForNode)(currentFocusedElement);\n    spotNext(direction, currentFocusedElement, currentContainerIds);\n  }\n\n  function onBlur() {\n    var current = _getCurrent();\n\n    if (current) {\n      current.blur();\n    }\n\n    Spotlight.setPointerMode(false);\n    _spotOnWindowFocus = true;\n    _pointerMoveDuringKeyPress = false;\n  }\n\n  function handleWebOSMouseEvent(ev) {\n    if (!(0, _Pause.isPaused)() && ev && ev.detail && ev.detail.type === 'Leave') {\n      onBlur();\n    }\n  }\n\n  function handleKeyboardStateChangeEvent(_ref) {\n    var visibility = _ref.visibility;\n\n    if (!visibility) {\n      setPlatformPointerMode();\n    }\n  }\n\n  function onFocus() {\n    // Normally, there isn't focus here unless the window has been blurred above. On webOS, the\n    // platform may focus the window after the app has already focused a component so we prevent\n    // trying to focus something else (potentially) unless the window was previously blurred\n    if (_spotOnWindowFocus) {\n      setPlatformPointerMode(); // If the window was previously blurred while in pointer mode, the last active containerId may\n      // not have yet set focus to its spottable elements. For this reason we can't rely on setting focus\n      // to the last focused element of the last active containerId, so we use rootContainerId instead\n\n      var lastFocusedElement = (0, _container.getContainerLastFocusedElement)(_container.rootContainerId);\n\n      while ((0, _container.isContainer)(lastFocusedElement)) {\n        var _getContainerConfig = (0, _container.getContainerConfig)(lastFocusedElement);\n\n        lastFocusedElement = _getContainerConfig.lastFocusedElement;\n      }\n\n      if (!Spotlight.focus(lastFocusedElement)) {\n        // If the last focused element was previously also disabled (or no longer exists), we\n        // need to set focus somewhere\n        Spotlight.focus();\n      }\n\n      _spotOnWindowFocus = false;\n    }\n  }\n\n  function onKeyUp(evt) {\n    _pointerMoveDuringKeyPress = false;\n    var keyCode = evt.keyCode;\n\n    if (getDirection(keyCode) || isEnter(keyCode)) {\n      SpotlightAccelerator.reset();\n      _5WayKeyHold = false;\n    }\n  }\n\n  function handlePointerHide() {\n    if (!_getCurrent()) {\n      restoreFocus();\n    }\n  }\n\n  function onKeyDown(evt) {\n    if (shouldPreventNavigation()) {\n      (0, _pointer.notifyKeyDown)(evt.keyCode);\n      return;\n    }\n\n    var keyCode = evt.keyCode;\n    var direction = getDirection(keyCode);\n    var pointerHandled = (0, _pointer.notifyKeyDown)(keyCode, handlePointerHide);\n\n    if (pointerHandled || !(direction || isEnter(keyCode))) {\n      return;\n    }\n\n    if (!(0, _Pause.isPaused)() && !_pointerMoveDuringKeyPress) {\n      if (_getCurrent()) {\n        SpotlightAccelerator.processKey(evt, onAcceleratedKeyDown);\n      } else if (!spotNextFromPoint(direction, (0, _pointer.getLastPointerPosition)())) {\n        restoreFocus();\n      }\n\n      _5WayKeyHold = true;\n    }\n\n    if (direction) {\n      preventDefault(evt);\n    }\n  }\n\n  function onMouseMove(_ref2) {\n    var target = _ref2.target,\n        clientX = _ref2.clientX,\n        clientY = _ref2.clientY;\n\n    if (shouldPreventNavigation()) {\n      (0, _pointer.notifyPointerMove)(null, target, clientX, clientY);\n      return;\n    }\n\n    var current = _getCurrent();\n\n    var update = (0, _pointer.notifyPointerMove)(current, target, clientX, clientY);\n\n    if (update) {\n      if (_5WayKeyHold) {\n        _pointerMoveDuringKeyPress = true;\n      }\n\n      var next = (0, _target.getNavigableTarget)(target); // TODO: Consider encapsulating this work within focusElement\n\n      if (next !== current) {\n        if (next) {\n          focusElement(next, (0, _container.getContainersForNode)(next), true);\n          return true;\n        } else if (current) {\n          current.blur();\n          (0, _container.setLastContainerFromTarget)(current, target);\n        }\n      }\n    }\n  }\n\n  function onMouseOver(evt) {\n    if (shouldPreventNavigation()) return;\n    var target = evt.target;\n\n    if ((0, _pointer.getPointerMode)() && (0, _pointer.hasPointerMoved)(evt.clientX, evt.clientY)) {\n      var next = (0, _target.getNavigableTarget)(target); // account for child controls\n\n      if (next && next !== _getCurrent()) {\n        focusElement(next, (0, _container.getContainersForNode)(next), true);\n        return true;\n      }\n\n      preventDefault(evt);\n    }\n  }\n\n  function onTouchEnd(evt) {\n    var current = _getCurrent();\n\n    if (current && !current.contains(evt.target)) {\n      current.blur();\n    }\n  }\n  /*\n   * public methods\n   */\n\n\n  var exports =\n  /** @lends spotlight.Spotlight */\n  {\n    // eslint-disable-line no-shadow\n\n    /**\n     * Initializes Spotlight. This is generally handled by\n     * {@link spotlight/SpotlightRootDecorator.SpotlightRootDecorator}.\n     *\n     * @param {Object} containerDefaults Default configuration for new spotlight containers\n     * @returns {undefined}\n     * @public\n     */\n    initialize: function initialize(containerDefaults) {\n      if (!_initialized) {\n        window.addEventListener('blur', onBlur);\n        window.addEventListener('focus', onFocus);\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n        window.addEventListener('mouseover', onMouseOver);\n        window.addEventListener('mousemove', onMouseMove);\n\n        if (_platform[\"default\"].touch) {\n          window.addEventListener('touchend', onTouchEnd);\n        }\n\n        if (_platform[\"default\"].webos) {\n          window.top.document.addEventListener('webOSMouse', handleWebOSMouseEvent);\n          window.top.document.addEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);\n        }\n\n        (0, _container.setLastContainer)(_container.rootContainerId);\n        (0, _container.configureDefaults)(containerDefaults);\n        (0, _container.configureContainer)(_container.rootContainerId); // by default, pointer mode is off but the platform's current state will override that\n\n        (0, _pointer.setPointerMode)(false);\n        setPlatformPointerMode();\n        _initialized = true;\n      }\n    },\n\n    /**\n     * Terminates Spotlight. This is generally handled by {@link spotlight.SpotlightRootDecorator}.\n     *\n     * @public\n     */\n    terminate: function terminate() {\n      window.removeEventListener('blur', onBlur);\n      window.removeEventListener('focus', onFocus);\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mousemove', onMouseMove);\n\n      if (_platform[\"default\"].touch) {\n        window.removeEventListener('touchend', onTouchEnd);\n      }\n\n      if (_platform[\"default\"].webos) {\n        window.top.document.removeEventListener('webOSMouse', handleWebOSMouseEvent);\n        window.top.document.removeEventListener('keyboardStateChange', handleKeyboardStateChangeEvent);\n      }\n\n      Spotlight.clear();\n      _initialized = false;\n    },\n\n    /**\n     * Resets spotlight container information\n     *\n     * @private\n     */\n    clear: function clear() {\n      (0, _container.removeAllContainers)();\n      (0, _container.setDefaultContainer)();\n      (0, _container.setLastContainer)();\n      _duringFocusChange = false;\n    },\n    // set(<config>);\n    // set(<containerId>, <config>);\n\n    /**\n     * Sets the config for spotlight or the specified containerID\n     *\n     * @function\n     * @param {String|Object} containerIdOrConfig  Configuration object or container ID\n     * @param {Object}        [config]             Configuration object if container ID supplied\n     *                                             in `containerIdOrConfig`\n     * @returns {undefined}\n     * @public\n     */\n    set: _container.configureContainer,\n    // add(<config>);\n    // add(<containerId>, <config>);\n\n    /**\n     * Adds the config for a new container. The container ID may be passed in the configuration\n     * object. If no container ID is supplied, a new container ID will be generated.\n     *\n     * @function\n     * @param {String|Object} containerIdOrConfig  Configuration object or container ID\n     * @param {Object}        [config]             Configuration object if container ID supplied\n     *                                             in `containerIdOrConfig`\n     * @returns {String} The container ID of the container\n     * @public\n     */\n    add: _container.addContainer,\n    unmount: function unmount(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      (0, _container.unmountContainer)(containerId);\n    },\n\n    /**\n     * Removes a container from Spotlight\n     *\n     * @param {String} containerId Container ID to remove\n     * @returns {Boolean} `true` if container removed, `false` if container does not exist\n     * @public\n     */\n    remove: function remove(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      if ((0, _container.getContainerConfig)(containerId)) {\n        (0, _container.removeContainer)(containerId);\n\n        if ((0, _container.getLastContainer)() === containerId) {\n          Spotlight.setActiveContainer(null);\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Disables the selector rules of the specified container\n     *\n     * @param {String} containerId Container ID selector rules to disable\n     * @returns {Boolean} `true` if container's selector rules are disabled, `false` if container does not exist\n     * @public\n     */\n    disableSelector: function disableSelector(containerId) {\n      if ((0, _container.isContainer)(containerId)) {\n        (0, _container.configureContainer)(containerId, {\n          selectorDisabled: false\n        });\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Enables the selector rules of the specified container\n     *\n     * @param {String} containerId Container ID selector rules to enable\n     * @returns {Boolean} `true` if container's selector rules are enabled, `false` if container does not exist\n     * @public\n     */\n    enableSelector: function enableSelector(containerId) {\n      if ((0, _container.isContainer)(containerId)) {\n        (0, _container.configureContainer)(containerId, {\n          selectorDisabled: false\n        });\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Pauses Spotlight\n     *\n     * @function\n     * @returns {undefined}\n     * @public\n     */\n    pause: _Pause.pause,\n\n    /**\n     * Resumes Spotlight\n     *\n     * @function\n     * @returns {undefined}\n     * @public\n     */\n    resume: _Pause.resume,\n    // focus()\n    // focus(<containerId>)\n    // focus(<extSelector>)\n\n    /**\n     * Focuses the specified component ID, container ID, element selector, or the default\n     * container.\n     *\n     * If Spotlight is in pointer mode, focus is not changed but `elem` will be set as the last\n     * focused element of its spotlight containers.\n     *\n     * @param {String|Object|undefined} elem Component ID, container, ID or element selector.\n     *\tIf not supplied, the default container will be focused.\n     * @returns {Boolean} `true` if focus successful, `false` if not.\n     * @public\n     */\n    focus: function focus(elem) {\n      var target = elem;\n      var wasContainerId = false;\n\n      if (!elem) {\n        target = (0, _target.getTargetByContainer)();\n      } else if (typeof elem === 'string') {\n        if ((0, _container.getContainerConfig)(elem)) {\n          target = (0, _target.getTargetByContainer)(elem);\n          wasContainerId = true;\n        } else if (/^[\\w\\d-]+$/.test(elem)) {\n          // support component IDs consisting of alphanumeric, dash, or underscore\n          target = (0, _target.getTargetBySelector)(\"[data-spotlight-id=\".concat(elem, \"]\"));\n        } else {\n          target = (0, _target.getTargetBySelector)(elem);\n        }\n      }\n\n      var nextContainerIds = (0, _container.getContainersForNode)(target);\n      var nextContainerId = (0, _last[\"default\"])(nextContainerIds);\n\n      if ((0, _container.isNavigable)(target, nextContainerId, true)) {\n        var focused = focusElement(target, nextContainerIds);\n\n        if (!focused && wasContainerId) {\n          (0, _container.setLastContainer)(elem);\n        }\n\n        return focused;\n      } else if (wasContainerId) {\n        // if we failed to find a spottable target within the provided container, we'll set\n        // it as the active container to allow it to focus itself if its contents change\n        (0, _container.setLastContainer)(elem);\n      }\n\n      return false;\n    },\n    // move(<direction>)\n    // move(<direction>, <selector>)\n\n    /**\n     * Moves focus to the next spottable control in the direction specified. Optionally, a source\n     * element selector may be supplied as the starting point.\n     *\n     * @param {String} direction Direction to move, one of `'left'`, `'right'`, `'up'` or `'down'`\n     * @param {String|undefined} selector If supplied, the element to move from. If not supplied,\n     *\tthe currently focused item will be used.\n     * @returns {Boolean} `true` if focus successful, `false` if not.\n     * @public\n     */\n    move: function move(direction, selector) {\n      direction = direction.toLowerCase();\n\n      if (direction !== 'up' && direction !== 'down' && direction !== 'left' && direction !== 'right') {\n        return false;\n      }\n\n      var elem = selector ? (0, _utils.parseSelector)(selector)[0] : _getCurrent();\n\n      if (!elem) {\n        return false;\n      }\n\n      var containerIds = (0, _container.getContainersForNode)(elem);\n\n      if (!containerIds.length) {\n        return false;\n      }\n\n      return spotNext(direction, elem, containerIds);\n    },\n\n    /**\n     * Sets or clears the default container that will receive focus.\n     *\n     * @function\n     * @param {String} [containerId] The container ID or a falsy value to clear default\n     *                               container\n     * @returns {undefined}\n     * @public\n     */\n    setDefaultContainer: _container.setDefaultContainer,\n\n    /**\n     * Gets the currently active container.\n     *\n     * @returns {String} The id of the currently active container\n     * @public\n     */\n    getActiveContainer: function getActiveContainer() {\n      return (0, _container.getLastContainer)() || _container.rootContainerId;\n    },\n\n    /**\n     * Sets the currently active container.\n     *\n     * Note: If the current container is restricted to 'self-only' and `containerId` is not\n     * contained within the current container then the active container will not be updated.\n     *\n     * @param {String} [containerId] The id of the currently active container. If this is not\n     *\tprovided, the root container is set as the currently active container.\n     * @public\n     */\n    setActiveContainer: function setActiveContainer(containerId) {\n      if ((0, _container.mayActivateContainer)(containerId)) {\n        (0, _container.setLastContainer)(containerId || _container.rootContainerId);\n      }\n    },\n\n    /**\n     * Gets the current pointer mode\n     *\n     * @function\n     * @returns {Boolean} `true` if spotlight is in pointer mode\n     * @public\n     */\n    getPointerMode: _pointer.getPointerMode,\n\n    /**\n     * Sets the current pointer mode\n     *\n     * @function\n     * @param {Boolean} pointerMode The value of the pointer mode. This determines how\n     *\tspotlight manages focus change behaviors.\n     * @public\n     */\n    setPointerMode: _pointer.setPointerMode,\n\n    /**\n     * Gets the muted mode value of a spottable element.\n     *\n     * @param {Object} elem The dom element used to determine the muted status.\n     * @returns {Boolean} `true` if the passed-in control is in muted mode.\n     * @public\n     */\n    isMuted: function isMuted(elem) {\n      if (!elem) {\n        return false;\n      }\n\n      return (0, _utils.matchSelector)('[data-spotlight-container-muted=\"true\"] .' + _Spottable.spottableClass, elem);\n    },\n\n    /**\n     * Determines whether Spotlight is currently paused.\n     *\n     * @function\n     * @returns {Boolean} `true` if Spotlight is currently paused.\n     * @public\n     */\n    isPaused: _Pause.isPaused,\n\n    /**\n     * Determines whether an element is spottable.\n     *\n     * @param {Object} elem The dom element used to determine the spottable status.\n     * @returns {Boolean} `true` if the element being evaluated is currently spottable.\n     * @public\n     */\n    isSpottable: function isSpottable(elem) {\n      if (!elem) {\n        return false;\n      }\n\n      return (0, _target.isFocusable)(elem);\n    },\n\n    /**\n     * Returns the currently spotted control.\n     *\n     * @returns {Node} The control that currently has focus, if available\n     * @public\n     */\n    getCurrent: function getCurrent() {\n      return _getCurrent();\n    },\n\n    /**\n     * Returns a list of spottable elements wrapped by the supplied container.\n     *\n     * @param {String} containerId The id of the container used to determine the list of spottable elements\n     * @returns {Node[]} The spottable elements that are wrapped by the supplied container\n     * @public\n     */\n    getSpottableDescendants: function getSpottableDescendants(containerId) {\n      if (!containerId || typeof containerId !== 'string') {\n        throw new Error('Please assign the \"containerId\"!');\n      }\n\n      return (0, _container.getSpottableDescendants)(containerId);\n    }\n  };\n  return exports;\n}();\n\nexports.Spotlight = Spotlight;\nvar _default = Spotlight;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}