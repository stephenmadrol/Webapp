{"ast":null,"code":"\"use strict\";\n/*\n * ThaiSolarDate.js - Represent a date in the ThaiSolar calendar\n * \n * Copyright Â© 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nJSUtils.js\nGregorianDate.js\nThaiSolarCal.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar ThaiSolarCal = require(\"./ThaiSolarCal.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n/**\n * @class\n * Construct a new Thai solar date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this Thai solar date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * </ul>\n *\n * If the constructor is called with another Thai solar date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends GregorianDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date\n */\n\n\nvar ThaiSolarDate = function ThaiSolarDate(params) {\n  var p = {};\n\n  if (params) {\n    JSUtils.shallowCopy(params, p); // there is 198327 days difference between the Thai solar and\n    // Gregorian epochs which is equivalent to 543 years\n\n    if (typeof p.year !== 'undefined') {\n      p.year -= 543;\n    }\n\n    if (typeof p.rd !== 'undefined') {\n      p.rd -= 198327;\n    }\n  }\n\n  this.rd = null; // clear these out so that the GregorianDate constructor can set it\n\n  this.offset = undefined; //console.log(\"ThaiSolarDate.constructor: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\n  p.onLoad = ilib.bind(this, function (gd) {\n    this.cal = new ThaiSolarCal(); // make sure the year is set correctly from the original params\n\n    if (params && typeof params.year !== 'undefined') {\n      this.year = parseInt(params.year, 10);\n    }\n\n    if (params && typeof params.onLoad === \"function\") {\n      params.onLoad(gd);\n    }\n  });\n  GregorianDate.call(this, p);\n};\n\nThaiSolarDate.prototype = new GregorianDate({\n  noinstance: true\n});\nThaiSolarDate.prototype.parent = GregorianDate.prototype;\nThaiSolarDate.prototype.constructor = ThaiSolarDate;\n/**\n * the difference between a zero Julian day and the zero Thai Solar date.\n * This is some 543 years before the start of the Gregorian epoch. \n * @private\n * @type number\n */\n\nThaiSolarDate.epoch = 1523097.5;\n/**\n * Calculate the date components for the current time zone\n * @protected\n */\n\nThaiSolarDate.prototype._calcDateComponents = function () {\n  // there is 198327 days difference between the Thai solar and \n  // Gregorian epochs which is equivalent to 543 years\n  // console.log(\"ThaiSolarDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n  this.parent._calcDateComponents.call(this);\n\n  this.year += 543;\n};\n/**\n * Return the Rata Die (fixed day) number of this date.\n * \n * @protected\n * @return {number} the rd date as a number\n */\n\n\nThaiSolarDate.prototype.getRataDie = function () {\n  // there is 198327 days difference between the Thai solar and \n  // Gregorian epochs which is equivalent to 543 years\n  return this.rd.getRataDie() + 198327;\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week before the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.before = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.before(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week after the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.after = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.after(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or before the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.onOrBefore = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.onOrBefore(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or after the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.onOrAfter = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.onOrAfter(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nThaiSolarDate.prototype.getCalendar = function () {\n  return \"thaisolar\";\n}; //register with the factory method\n\n\nIDate._constructors[\"thaisolar\"] = ThaiSolarDate;\nmodule.exports = ThaiSolarDate;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/ilib/lib/ThaiSolarDate.js"],"names":["ilib","require","JSUtils","Calendar","IDate","ThaiSolarCal","GregorianDate","GregRataDie","ThaiSolarDate","params","p","shallowCopy","year","rd","offset","undefined","onLoad","bind","gd","cal","parseInt","call","prototype","noinstance","parent","constructor","epoch","_calcDateComponents","getRataDie","before","dow","timezone","after","onOrBefore","onOrAfter","getCalendar","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;AAOA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIG,KAAK,GAAGH,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAII,YAAY,GAAGJ,OAAO,CAAC,mBAAD,CAA1B;;AAEA,IAAIK,aAAa,GAAGL,OAAO,CAAC,oBAAD,CAA3B;;AAEA,IAAIM,WAAW,GAAGN,OAAO,CAAC,kBAAD,CAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA,IAAIO,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACjD,MAAIC,CAAC,GAAG,EAAR;;AAEA,MAAID,MAAJ,EAAY;AACVP,IAAAA,OAAO,CAACS,WAAR,CAAoBF,MAApB,EAA4BC,CAA5B,EADU,CACsB;AAChC;;AAEA,QAAI,OAAOA,CAAC,CAACE,IAAT,KAAkB,WAAtB,EAAmC;AACjCF,MAAAA,CAAC,CAACE,IAAF,IAAU,GAAV;AACD;;AAED,QAAI,OAAOF,CAAC,CAACG,EAAT,KAAgB,WAApB,EAAiC;AAC/BH,MAAAA,CAAC,CAACG,EAAF,IAAQ,MAAR;AACD;AACF;;AAED,OAAKA,EAAL,GAAU,IAAV,CAhBiD,CAgBjC;;AAEhB,OAAKC,MAAL,GAAcC,SAAd,CAlBiD,CAkBxB;;AAEzBL,EAAAA,CAAC,CAACM,MAAF,GAAWhB,IAAI,CAACiB,IAAL,CAAU,IAAV,EAAgB,UAAUC,EAAV,EAAc;AACvC,SAAKC,GAAL,GAAW,IAAId,YAAJ,EAAX,CADuC,CACR;;AAE/B,QAAII,MAAM,IAAI,OAAOA,MAAM,CAACG,IAAd,KAAuB,WAArC,EAAkD;AAChD,WAAKA,IAAL,GAAYQ,QAAQ,CAACX,MAAM,CAACG,IAAR,EAAc,EAAd,CAApB;AACD;;AAED,QAAIH,MAAM,IAAI,OAAOA,MAAM,CAACO,MAAd,KAAyB,UAAvC,EAAmD;AACjDP,MAAAA,MAAM,CAACO,MAAP,CAAcE,EAAd;AACD;AACF,GAVU,CAAX;AAWAZ,EAAAA,aAAa,CAACe,IAAd,CAAmB,IAAnB,EAAyBX,CAAzB;AACD,CAhCD;;AAkCAF,aAAa,CAACc,SAAd,GAA0B,IAAIhB,aAAJ,CAAkB;AAC1CiB,EAAAA,UAAU,EAAE;AAD8B,CAAlB,CAA1B;AAGAf,aAAa,CAACc,SAAd,CAAwBE,MAAxB,GAAiClB,aAAa,CAACgB,SAA/C;AACAd,aAAa,CAACc,SAAd,CAAwBG,WAAxB,GAAsCjB,aAAtC;AACA;;;;;;;AAOAA,aAAa,CAACkB,KAAd,GAAsB,SAAtB;AACA;;;;;AAKAlB,aAAa,CAACc,SAAd,CAAwBK,mBAAxB,GAA8C,YAAY;AACxD;AACA;AACA;AACA,OAAKH,MAAL,CAAYG,mBAAZ,CAAgCN,IAAhC,CAAqC,IAArC;;AAEA,OAAKT,IAAL,IAAa,GAAb;AACD,CAPD;AAQA;;;;;;;;AAQAJ,aAAa,CAACc,SAAd,CAAwBM,UAAxB,GAAqC,YAAY;AAC/C;AACA;AACA,SAAO,KAAKf,EAAL,CAAQe,UAAR,KAAuB,MAA9B;AACD,CAJD;AAKA;;;;;;;;;;AAUApB,aAAa,CAACc,SAAd,CAAwBO,MAAxB,GAAiC,UAAUC,GAAV,EAAe;AAC9C,SAAO,IAAItB,aAAJ,CAAkB;AACvBK,IAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQgB,MAAR,CAAeC,GAAf,EAAoB,KAAKhB,MAAzB,IAAmC,MADhB;AAEvBiB,IAAAA,QAAQ,EAAE,KAAKA;AAFQ,GAAlB,CAAP;AAID,CALD;AAMA;;;;;;;;;;AAUAvB,aAAa,CAACc,SAAd,CAAwBU,KAAxB,GAAgC,UAAUF,GAAV,EAAe;AAC7C,SAAO,IAAItB,aAAJ,CAAkB;AACvBK,IAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQmB,KAAR,CAAcF,GAAd,EAAmB,KAAKhB,MAAxB,IAAkC,MADf;AAEvBiB,IAAAA,QAAQ,EAAE,KAAKA;AAFQ,GAAlB,CAAP;AAID,CALD;AAMA;;;;;;;;;;AAUAvB,aAAa,CAACc,SAAd,CAAwBW,UAAxB,GAAqC,UAAUH,GAAV,EAAe;AAClD,SAAO,IAAItB,aAAJ,CAAkB;AACvBK,IAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQoB,UAAR,CAAmBH,GAAnB,EAAwB,KAAKhB,MAA7B,IAAuC,MADpB;AAEvBiB,IAAAA,QAAQ,EAAE,KAAKA;AAFQ,GAAlB,CAAP;AAID,CALD;AAMA;;;;;;;;;;AAUAvB,aAAa,CAACc,SAAd,CAAwBY,SAAxB,GAAoC,UAAUJ,GAAV,EAAe;AACjD,SAAO,IAAItB,aAAJ,CAAkB;AACvBK,IAAAA,EAAE,EAAE,KAAKA,EAAL,CAAQqB,SAAR,CAAkBJ,GAAlB,EAAuB,KAAKhB,MAA5B,IAAsC,MADnB;AAEvBiB,IAAAA,QAAQ,EAAE,KAAKA;AAFQ,GAAlB,CAAP;AAID,CALD;AAMA;;;;;;;AAOAvB,aAAa,CAACc,SAAd,CAAwBa,WAAxB,GAAsC,YAAY;AAChD,SAAO,WAAP;AACD,CAFD,C,CAEG;;;AAGH/B,KAAK,CAACgC,aAAN,CAAoB,WAApB,IAAmC5B,aAAnC;AACA6B,MAAM,CAACC,OAAP,GAAiB9B,aAAjB","sourcesContent":["\"use strict\";\n\n/*\n * ThaiSolarDate.js - Represent a date in the ThaiSolar calendar\n * \n * Copyright Â© 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nJSUtils.js\nGregorianDate.js\nThaiSolarCal.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar ThaiSolarCal = require(\"./ThaiSolarCal.js\");\n\nvar GregorianDate = require(\"./GregorianDate.js\");\n\nvar GregRataDie = require(\"./GregRataDie.js\");\n/**\n * @class\n * Construct a new Thai solar date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this Thai solar date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale. \n * </ul>\n *\n * If the constructor is called with another Thai solar date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends GregorianDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date\n */\n\n\nvar ThaiSolarDate = function ThaiSolarDate(params) {\n  var p = {};\n\n  if (params) {\n    JSUtils.shallowCopy(params, p); // there is 198327 days difference between the Thai solar and\n    // Gregorian epochs which is equivalent to 543 years\n\n    if (typeof p.year !== 'undefined') {\n      p.year -= 543;\n    }\n\n    if (typeof p.rd !== 'undefined') {\n      p.rd -= 198327;\n    }\n  }\n\n  this.rd = null; // clear these out so that the GregorianDate constructor can set it\n\n  this.offset = undefined; //console.log(\"ThaiSolarDate.constructor: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n\n  p.onLoad = ilib.bind(this, function (gd) {\n    this.cal = new ThaiSolarCal(); // make sure the year is set correctly from the original params\n\n    if (params && typeof params.year !== 'undefined') {\n      this.year = parseInt(params.year, 10);\n    }\n\n    if (params && typeof params.onLoad === \"function\") {\n      params.onLoad(gd);\n    }\n  });\n  GregorianDate.call(this, p);\n};\n\nThaiSolarDate.prototype = new GregorianDate({\n  noinstance: true\n});\nThaiSolarDate.prototype.parent = GregorianDate.prototype;\nThaiSolarDate.prototype.constructor = ThaiSolarDate;\n/**\n * the difference between a zero Julian day and the zero Thai Solar date.\n * This is some 543 years before the start of the Gregorian epoch. \n * @private\n * @type number\n */\n\nThaiSolarDate.epoch = 1523097.5;\n/**\n * Calculate the date components for the current time zone\n * @protected\n */\n\nThaiSolarDate.prototype._calcDateComponents = function () {\n  // there is 198327 days difference between the Thai solar and \n  // Gregorian epochs which is equivalent to 543 years\n  // console.log(\"ThaiSolarDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\n  this.parent._calcDateComponents.call(this);\n\n  this.year += 543;\n};\n/**\n * Return the Rata Die (fixed day) number of this date.\n * \n * @protected\n * @return {number} the rd date as a number\n */\n\n\nThaiSolarDate.prototype.getRataDie = function () {\n  // there is 198327 days difference between the Thai solar and \n  // Gregorian epochs which is equivalent to 543 years\n  return this.rd.getRataDie() + 198327;\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week before the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.before = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.before(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week after the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.after = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.after(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or before the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or before the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.onOrBefore = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.onOrBefore(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return a new Gregorian date instance that represents the first instance of the \n * given day of the week on or after the current date. The day of the week is encoded\n * as a number where 0 = Sunday, 1 = Monday, etc.\n * \n * @param {number} dow the day of the week on or after the current date that is being sought\n * @return {IDate} the date being sought\n */\n\n\nThaiSolarDate.prototype.onOrAfter = function (dow) {\n  return new ThaiSolarDate({\n    rd: this.rd.onOrAfter(dow, this.offset) + 198327,\n    timezone: this.timezone\n  });\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nThaiSolarDate.prototype.getCalendar = function () {\n  return \"thaisolar\";\n}; //register with the factory method\n\n\nIDate._constructors[\"thaisolar\"] = ThaiSolarDate;\nmodule.exports = ThaiSolarDate;"]},"metadata":{},"sourceType":"module"}