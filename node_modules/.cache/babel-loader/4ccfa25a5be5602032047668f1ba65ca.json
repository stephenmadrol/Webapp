{"ast":null,"code":"\"use strict\";\n/*\n * Currency.js - Currency definition\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Utils.js Locale.js LocaleInfo.js\n// !data currency\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar ResBundle = require(\"./ResBundle.js\");\n/**\n * @class\n * Create a new currency information instance. Instances of this class encode \n * information about a particular currency.<p>\n * \n * Note: that if you are looking to format currency for display, please see\n * the number formatting class {NumFmt}. This class only gives information\n * about currencies.<p> \n * \n * The options can contain any of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - specify the locale for this instance\n * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code \n * <li><i>sign</i> - search for a currency that uses this sign\n * <li><i>onLoad</i> - a callback function to call when the currency data is fully \n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two. \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * When searching for a currency by its sign, this class cannot guarantee \n * that it will return info about a specific currency. The reason is that currency \n * signs are sometimes shared between different currencies and the sign is \n * therefore ambiguous. If you need a \n * guarantee, find the currency using the code instead.<p>\n * \n * The way this class finds a currency by sign is the following. If the sign is \n * unambiguous, then\n * the currency is returned. If there are multiple currencies that use the same\n * sign, and the current locale uses that sign, then the default currency for\n * the current locale is returned. If there are multiple, but the current locale\n * does not use that sign, then the currency with the largest circulation is\n * returned. For example, if you are in the en-GB locale, and the sign is \"$\",\n * then this class will notice that there are multiple currencies with that\n * sign (USD, CAD, AUD, HKD, MXP, etc.) Since \"$\" is not used in en-GB, it will \n * pick the one with the largest circulation, which in this case is the US Dollar\n * (USD).<p>\n * \n * If neither the code or sign property is set, the currency that is most common \n * for the locale\n * will be used instead. If the locale is not set, the default locale will be used.\n * If the code is given, but it is not found in the list of known currencies, this\n * constructor will throw an exception. If the sign is given, but it is not found,\n * this constructor will default to the currency for the current locale. If both\n * the code and sign properties are given, then the sign property will be ignored\n * and only the code property used. If the locale is given, but it is not a known\n * locale, this class will default to the default locale instead.<p>\n * \n * \n * @constructor\n * @param options {Object} a set of properties to govern how this instance is constructed.\n * @throws \"currency xxx is unknown\" when the given currency code is not in the list of \n * known currencies. xxx is replaced with the requested code.\n */\n\n\nvar Currency = function Currency(options) {\n  if (options) {\n    if (options.code) {\n      this.code = options.code;\n    }\n\n    if (options.locale) {\n      this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    if (options.sign) {\n      this.sign = options.sign;\n    }\n\n    if (options.loadParams) {\n      this.loadParams = options.loadParams;\n    }\n  } else {\n    options = {\n      sync: true\n    };\n  }\n\n  if (typeof options.sync === 'undefined') {\n    options.sync = true;\n  }\n\n  this.locale = this.locale || new Locale();\n\n  if (typeof ilib.data.currency === 'undefined') {\n    Utils.loadData({\n      name: \"currency.json\",\n      object: \"Currency\",\n      locale: \"-\",\n      sync: this.sync,\n      loadParams: this.loadParams,\n      callback: ilib.bind(this, function (currency) {\n        ilib.data.currency = currency;\n\n        this._loadLocinfo(options);\n      })\n    });\n  } else {\n    this._loadLocinfo(options);\n  }\n};\n/**\n * Return an array of the ids for all ISO 4217 currencies that\n * this copy of ilib knows about.\n * \n * @static\n * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.\n */\n\n\nCurrency.getAvailableCurrencies = function () {\n  var ret = [],\n      cur,\n      currencies = new ResBundle({\n    name: \"currency\"\n  }).getResObj();\n\n  for (cur in currencies) {\n    if (cur && currencies[cur]) {\n      ret.push(cur);\n    }\n  }\n\n  return ret;\n};\n\nCurrency.prototype = {\n  /**\n   * @private\n   */\n  _loadLocinfo: function _loadLocinfo(options) {\n    new LocaleInfo(this.locale, {\n      sync: options.sync,\n      loadParams: options.loadParams,\n      onLoad: ilib.bind(this, function (li) {\n        var currInfo;\n        this.locinfo = li;\n\n        if (this.code) {\n          currInfo = ilib.data.currency[this.code];\n\n          if (!currInfo) {\n            if (options.sync) {\n              throw \"currency \" + this.code + \" is unknown\";\n            } else if (typeof options.onLoad === \"function\") {\n              options.onLoad(undefined);\n              return;\n            }\n          }\n        } else if (this.sign) {\n          currInfo = ilib.data.currency[this.sign]; // maybe it is really a code...\n\n          if (typeof currInfo !== 'undefined') {\n            this.code = this.sign;\n          } else {\n            this.code = this.locinfo.getCurrency();\n            currInfo = ilib.data.currency[this.code];\n\n            if (currInfo.sign !== this.sign) {\n              // current locale does not use the sign, so search for it\n              for (var cur in ilib.data.currency) {\n                if (cur && ilib.data.currency[cur]) {\n                  currInfo = ilib.data.currency[cur];\n\n                  if (currInfo.sign === this.sign) {\n                    // currency data is already ordered so that the currency with the\n                    // largest circulation is at the beginning, so all we have to do\n                    // is take the first one in the list that matches\n                    this.code = cur;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!currInfo || !this.code) {\n          this.code = this.locinfo.getCurrency();\n          currInfo = ilib.data.currency[this.code];\n        }\n\n        this.name = currInfo.name;\n        this.fractionDigits = currInfo.decimals;\n        this.sign = currInfo.sign;\n\n        if (typeof options.onLoad === 'function') {\n          options.onLoad(this);\n        }\n      })\n    });\n  },\n\n  /**\n   * Return the ISO 4217 currency code for this instance.\n   * @return {string} the ISO 4217 currency code for this instance\n   */\n  getCode: function getCode() {\n    return this.code;\n  },\n\n  /**\n   * Return the default number of fraction digits that is typically used\n   * with this type of currency.\n   * @return {number} the number of fraction digits for this currency\n   */\n  getFractionDigits: function getFractionDigits() {\n    return this.fractionDigits;\n  },\n\n  /**\n   * Return the sign commonly used to represent this currency.\n   * @return {string} the sign commonly used to represent this currency\n   */\n  getSign: function getSign() {\n    return this.sign;\n  },\n\n  /**\n   * Return the name of the currency in English.\n   * @return {string} the name of the currency in English\n   */\n  getName: function getName() {\n    return this.name;\n  },\n\n  /**\n   * Return the locale for this currency. If the options to the constructor \n   * included a locale property in order to find the currency that is appropriate\n   * for that locale, then the locale is returned here. If the options did not\n   * include a locale, then this method returns undefined.\n   * @return {Locale} the locale used in the constructor of this instance,\n   * or undefined if no locale was given in the constructor\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  }\n};\nmodule.exports = Currency;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/ilib/lib/Currency.js"],"names":["ilib","require","Utils","Locale","LocaleInfo","ResBundle","Currency","options","code","locale","sign","loadParams","sync","data","currency","loadData","name","object","callback","bind","_loadLocinfo","getAvailableCurrencies","ret","cur","currencies","getResObj","push","prototype","onLoad","li","currInfo","locinfo","undefined","getCurrency","fractionDigits","decimals","getCode","getFractionDigits","getSign","getName","getLocale","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * Currency.js - Currency definition\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Utils.js Locale.js LocaleInfo.js\n// !data currency\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar ResBundle = require(\"./ResBundle.js\");\n/**\n * @class\n * Create a new currency information instance. Instances of this class encode \n * information about a particular currency.<p>\n * \n * Note: that if you are looking to format currency for display, please see\n * the number formatting class {NumFmt}. This class only gives information\n * about currencies.<p> \n * \n * The options can contain any of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - specify the locale for this instance\n * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code \n * <li><i>sign</i> - search for a currency that uses this sign\n * <li><i>onLoad</i> - a callback function to call when the currency data is fully \n * loaded. When the onLoad option is given, this class will attempt to\n * load any missing locale data using the ilib loader callback.\n * When the constructor is done (even if the data is already preassembled), the \n * onLoad function is called with the current instance as a parameter, so this\n * callback can be used with preassembled or dynamic loading or a mix of the two. \n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\n * callback must be given, as the instance returned from this constructor will\n * not be usable for a while.\n * <li><i>loadParams</i> - an object containing parameters to pass to the \n * loader callback function when locale data is missing. The parameters are not\n * interpretted or modified in any way. They are simply passed along. The object \n * may contain any property/value pairs as long as the calling code is in\n * agreement with the loader callback function as to what those parameters mean.\n * </ul>\n * \n * When searching for a currency by its sign, this class cannot guarantee \n * that it will return info about a specific currency. The reason is that currency \n * signs are sometimes shared between different currencies and the sign is \n * therefore ambiguous. If you need a \n * guarantee, find the currency using the code instead.<p>\n * \n * The way this class finds a currency by sign is the following. If the sign is \n * unambiguous, then\n * the currency is returned. If there are multiple currencies that use the same\n * sign, and the current locale uses that sign, then the default currency for\n * the current locale is returned. If there are multiple, but the current locale\n * does not use that sign, then the currency with the largest circulation is\n * returned. For example, if you are in the en-GB locale, and the sign is \"$\",\n * then this class will notice that there are multiple currencies with that\n * sign (USD, CAD, AUD, HKD, MXP, etc.) Since \"$\" is not used in en-GB, it will \n * pick the one with the largest circulation, which in this case is the US Dollar\n * (USD).<p>\n * \n * If neither the code or sign property is set, the currency that is most common \n * for the locale\n * will be used instead. If the locale is not set, the default locale will be used.\n * If the code is given, but it is not found in the list of known currencies, this\n * constructor will throw an exception. If the sign is given, but it is not found,\n * this constructor will default to the currency for the current locale. If both\n * the code and sign properties are given, then the sign property will be ignored\n * and only the code property used. If the locale is given, but it is not a known\n * locale, this class will default to the default locale instead.<p>\n * \n * \n * @constructor\n * @param options {Object} a set of properties to govern how this instance is constructed.\n * @throws \"currency xxx is unknown\" when the given currency code is not in the list of \n * known currencies. xxx is replaced with the requested code.\n */\n\n\nvar Currency = function Currency(options) {\n  if (options) {\n    if (options.code) {\n      this.code = options.code;\n    }\n\n    if (options.locale) {\n      this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    if (options.sign) {\n      this.sign = options.sign;\n    }\n\n    if (options.loadParams) {\n      this.loadParams = options.loadParams;\n    }\n  } else {\n    options = {\n      sync: true\n    };\n  }\n\n  if (typeof options.sync === 'undefined') {\n    options.sync = true;\n  }\n\n  this.locale = this.locale || new Locale();\n\n  if (typeof ilib.data.currency === 'undefined') {\n    Utils.loadData({\n      name: \"currency.json\",\n      object: \"Currency\",\n      locale: \"-\",\n      sync: this.sync,\n      loadParams: this.loadParams,\n      callback: ilib.bind(this, function (currency) {\n        ilib.data.currency = currency;\n\n        this._loadLocinfo(options);\n      })\n    });\n  } else {\n    this._loadLocinfo(options);\n  }\n};\n/**\n * Return an array of the ids for all ISO 4217 currencies that\n * this copy of ilib knows about.\n * \n * @static\n * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.\n */\n\n\nCurrency.getAvailableCurrencies = function () {\n  var ret = [],\n      cur,\n      currencies = new ResBundle({\n    name: \"currency\"\n  }).getResObj();\n\n  for (cur in currencies) {\n    if (cur && currencies[cur]) {\n      ret.push(cur);\n    }\n  }\n\n  return ret;\n};\n\nCurrency.prototype = {\n  /**\n   * @private\n   */\n  _loadLocinfo: function _loadLocinfo(options) {\n    new LocaleInfo(this.locale, {\n      sync: options.sync,\n      loadParams: options.loadParams,\n      onLoad: ilib.bind(this, function (li) {\n        var currInfo;\n        this.locinfo = li;\n\n        if (this.code) {\n          currInfo = ilib.data.currency[this.code];\n\n          if (!currInfo) {\n            if (options.sync) {\n              throw \"currency \" + this.code + \" is unknown\";\n            } else if (typeof options.onLoad === \"function\") {\n              options.onLoad(undefined);\n              return;\n            }\n          }\n        } else if (this.sign) {\n          currInfo = ilib.data.currency[this.sign]; // maybe it is really a code...\n\n          if (typeof currInfo !== 'undefined') {\n            this.code = this.sign;\n          } else {\n            this.code = this.locinfo.getCurrency();\n            currInfo = ilib.data.currency[this.code];\n\n            if (currInfo.sign !== this.sign) {\n              // current locale does not use the sign, so search for it\n              for (var cur in ilib.data.currency) {\n                if (cur && ilib.data.currency[cur]) {\n                  currInfo = ilib.data.currency[cur];\n\n                  if (currInfo.sign === this.sign) {\n                    // currency data is already ordered so that the currency with the\n                    // largest circulation is at the beginning, so all we have to do\n                    // is take the first one in the list that matches\n                    this.code = cur;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!currInfo || !this.code) {\n          this.code = this.locinfo.getCurrency();\n          currInfo = ilib.data.currency[this.code];\n        }\n\n        this.name = currInfo.name;\n        this.fractionDigits = currInfo.decimals;\n        this.sign = currInfo.sign;\n\n        if (typeof options.onLoad === 'function') {\n          options.onLoad(this);\n        }\n      })\n    });\n  },\n\n  /**\n   * Return the ISO 4217 currency code for this instance.\n   * @return {string} the ISO 4217 currency code for this instance\n   */\n  getCode: function getCode() {\n    return this.code;\n  },\n\n  /**\n   * Return the default number of fraction digits that is typically used\n   * with this type of currency.\n   * @return {number} the number of fraction digits for this currency\n   */\n  getFractionDigits: function getFractionDigits() {\n    return this.fractionDigits;\n  },\n\n  /**\n   * Return the sign commonly used to represent this currency.\n   * @return {string} the sign commonly used to represent this currency\n   */\n  getSign: function getSign() {\n    return this.sign;\n  },\n\n  /**\n   * Return the name of the currency in English.\n   * @return {string} the name of the currency in English\n   */\n  getName: function getName() {\n    return this.name;\n  },\n\n  /**\n   * Return the locale for this currency. If the options to the constructor \n   * included a locale property in order to find the currency that is appropriate\n   * for that locale, then the locale is returned here. If the options did not\n   * include a locale, then this method returns undefined.\n   * @return {Locale} the locale used in the constructor of this instance,\n   * or undefined if no locale was given in the constructor\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  }\n};\nmodule.exports = Currency;"]},"metadata":{},"sourceType":"module"}