{"ast":null,"code":"\"use strict\";\n/*\n * PersianAlgoDate.js - Represent a date in the Persian algorithmic calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nPersianAlgoCal.js \nSearchUtils.js\nMathUtils.js\nPersAlgoRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\n\nvar PersAlgoRataDie = require(\"./PersAlgoRataDie.js\");\n/**\n * @class\n * \n * Construct a new Persian date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this persian date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\n\n\nvar PersianAlgoDate = function PersianAlgoDate(params) {\n  this.cal = new PersianAlgoCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n};\n\nPersianAlgoDate.prototype = new IDate({\n  noinstance: true\n});\nPersianAlgoDate.prototype.parent = IDate;\nPersianAlgoDate.prototype.constructor = PersianAlgoDate;\n/**\n * Initialize this date\n * @private\n */\n\nPersianAlgoDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Persian calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 to 12\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 366.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nPersianAlgoDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nPersianAlgoDate.prototype.newRd = function (params) {\n  return new PersAlgoRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nPersianAlgoDate.prototype._calcYear = function (rd) {\n  var shiftedRd = rd - 173126;\n  var numberOfCycles = Math.floor(shiftedRd / 1029983);\n  var shiftedDayInCycle = MathUtils.mod(shiftedRd, 1029983);\n  var yearInCycle = shiftedDayInCycle === 1029982 ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);\n  var year = 474 + 2820 * numberOfCycles + yearInCycle;\n  return year > 0 ? year : year - 1;\n};\n/**\n * @private\n * Calculate date components for the given RD date.\n */\n\n\nPersianAlgoDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"PersAlgoDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"PersAlgoDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"PersAlgoDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(remainder, PersAlgoRataDie.cumMonthLengths);\n  remainder -= PersAlgoRataDie.cumMonthLengths[this.month - 1]; //console.log(\"PersAlgoDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"PersAlgoDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nPersianAlgoDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.getRataDie());\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nPersianAlgoDate.prototype.getDayOfYear = function () {\n  return PersAlgoRataDie.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Persian \n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \n * persico or AP). \n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\n\n\nPersianAlgoDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nPersianAlgoDate.prototype.getCalendar = function () {\n  return \"persian-algo\";\n}; // register with the factory method\n\n\nIDate._constructors[\"persian-algo\"] = PersianAlgoDate;\nmodule.exports = PersianAlgoDate;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/PersianAlgoDate.js"],"names":["ilib","require","SearchUtils","MathUtils","Locale","LocaleInfo","TimeZone","IDate","Calendar","PersianAlgoCal","PersAlgoRataDie","PersianAlgoDate","params","cal","timezone","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","rd","newRd","_calcDateComponents","prototype","noinstance","parent","constructor","year","month","day","hour","minute","second","millisecond","parseInt","dayOfYear","dst","id","tz","offset","_getOffsetMillisWallTime","getRataDie","_init2","_calcYear","shiftedRd","numberOfCycles","Math","floor","shiftedDayInCycle","mod","yearInCycle","remainder","getOffsetMillis","yearStart","bsearch","cumMonthLengths","round","getDayOfWeek","getDayOfYear","getEra","getCalendar","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * PersianAlgoDate.js - Represent a date in the Persian algorithmic calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nLocale.js\nLocaleInfo.js\nTimeZone.js\nIDate.js\nPersianAlgoCal.js \nSearchUtils.js\nMathUtils.js\nPersAlgoRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar SearchUtils = require(\"./SearchUtils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\n\nvar PersAlgoRataDie = require(\"./PersAlgoRataDie.js\");\n/**\n * @class\n * \n * Construct a new Persian date object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \n * of this persian date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * \n * <li><i>locale</i> - locale for this persian date. If the time zone is not \n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that \n * represents the locale.\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Persian date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above \n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \n * components are \n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the \n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \n * Mean Time\").<p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\n */\n\n\nvar PersianAlgoDate = function PersianAlgoDate(params) {\n  this.cal = new PersianAlgoCal();\n  params = params || {};\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n};\n\nPersianAlgoDate.prototype = new IDate({\n  noinstance: true\n});\nPersianAlgoDate.prototype.parent = IDate;\nPersianAlgoDate.prototype.constructor = PersianAlgoDate;\n/**\n * Initialize this date\n * @private\n */\n\nPersianAlgoDate.prototype._init = function (params) {\n  if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n    /**\n     * Year in the Persian calendar.\n     * @type number\n     */\n    this.year = parseInt(params.year, 10) || 0;\n    /**\n     * The month number, ranging from 1 to 12\n     * @type number\n     */\n\n    this.month = parseInt(params.month, 10) || 1;\n    /**\n     * The day of the month. This ranges from 1 to 31.\n     * @type number\n     */\n\n    this.day = parseInt(params.day, 10) || 1;\n    /**\n     * The hour of the day. This can be a number from 0 to 23, as times are\n     * stored unambiguously in the 24-hour clock.\n     * @type number\n     */\n\n    this.hour = parseInt(params.hour, 10) || 0;\n    /**\n     * The minute of the hours. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.minute = parseInt(params.minute, 10) || 0;\n    /**\n     * The second of the minute. Ranges from 0 to 59.\n     * @type number\n     */\n\n    this.second = parseInt(params.second, 10) || 0;\n    /**\n     * The millisecond of the second. Ranges from 0 to 999.\n     * @type number\n     */\n\n    this.millisecond = parseInt(params.millisecond, 10) || 0;\n    /**\n     * The day of the year. Ranges from 1 to 366.\n     * @type number\n     */\n\n    this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n    if (typeof params.dst === 'boolean') {\n      this.dst = params.dst;\n    }\n\n    this.rd = this.newRd(this);\n    new TimeZone({\n      id: this.timezone,\n      sync: params.sync,\n      loadParams: params.loadParams,\n      onLoad: ilib.bind(this, function (tz) {\n        this.tz = tz; // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst \n        // are set in order to figure out which time zone rules apply and \n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n\n        this._init2(params);\n      })\n    });\n  } else {\n    this._init2(params);\n  }\n};\n/**\n * @private\n * Finish initializing this date object\n */\n\n\nPersianAlgoDate.prototype._init2 = function (params) {\n  if (!this.rd) {\n    this.rd = this.newRd(params);\n\n    this._calcDateComponents();\n  }\n\n  if (typeof params.onLoad === \"function\") {\n    params.onLoad(this);\n  }\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nPersianAlgoDate.prototype.newRd = function (params) {\n  return new PersAlgoRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from \n * @returns {number} the year for the RD\n */\n\n\nPersianAlgoDate.prototype._calcYear = function (rd) {\n  var shiftedRd = rd - 173126;\n  var numberOfCycles = Math.floor(shiftedRd / 1029983);\n  var shiftedDayInCycle = MathUtils.mod(shiftedRd, 1029983);\n  var yearInCycle = shiftedDayInCycle === 1029982 ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);\n  var year = 474 + 2820 * numberOfCycles + yearInCycle;\n  return year > 0 ? year : year - 1;\n};\n/**\n * @private\n * Calculate date components for the given RD date.\n */\n\n\nPersianAlgoDate.prototype._calcDateComponents = function () {\n  var remainder,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    // now offset the RD by the time zone, then recalculate in case we were \n    // near the year boundary\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  } //console.log(\"PersAlgoDate.calcComponent: calculating for rd \" + rd);\n  //console.log(\"PersAlgoDate.calcComponent: year is \" + ret.year);\n\n\n  var yearStart = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd - yearStart.getRataDie() + 1;\n  this.dayOfYear = remainder; //console.log(\"PersAlgoDate.calcComponent: remainder is \" + remainder);\n\n  this.month = SearchUtils.bsearch(remainder, PersAlgoRataDie.cumMonthLengths);\n  remainder -= PersAlgoRataDie.cumMonthLengths[this.month - 1]; //console.log(\"PersAlgoDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\n\n  this.day = Math.floor(remainder);\n  remainder -= this.day; //console.log(\"PersAlgoDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\n  // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n * \n * @return {number} the day of the week\n */\n\n\nPersianAlgoDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.getRataDie());\n  return MathUtils.mod(rd - 3, 7);\n};\n/**\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \n * December 31st is 365 in regular years, or 366 in leap years.\n * @return {number} the ordinal day of the year\n */\n\n\nPersianAlgoDate.prototype.getDayOfYear = function () {\n  return PersAlgoRataDie.cumMonthLengths[this.month - 1] + this.day;\n};\n/**\n * Return the era for this date as a number. The value for the era for Persian \n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \n * persico or AP). \n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \n * there is a year 0, so any years that are negative or zero are BP.\n * @return {number} 1 if this date is in the common era, -1 if it is before the \n * common era \n */\n\n\nPersianAlgoDate.prototype.getEra = function () {\n  return this.year < 1 ? -1 : 1;\n};\n/**\n * Return the name of the calendar that governs this date.\n * \n * @return {string} a string giving the name of the calendar\n */\n\n\nPersianAlgoDate.prototype.getCalendar = function () {\n  return \"persian-algo\";\n}; // register with the factory method\n\n\nIDate._constructors[\"persian-algo\"] = PersianAlgoDate;\nmodule.exports = PersianAlgoDate;"]},"metadata":{},"sourceType":"module"}