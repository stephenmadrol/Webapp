{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeAll = exports.remove = exports.is = exports.addAll = exports.add = void 0;\n\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/*\n * The singleton map of names to keyCodes. If a name doesn't have any keyCodes mapped to it, it will\n * not exist in this map. If it does, its value will be an array of its keyCodes.\n *\n * @type {Object}\n * @private\n */\n\n\nvar map = {};\n/*\n * Safely converts keymap name to lowercase.\n *\n * @function\n * @param   {String} name  Name for keyCode\n *\n * @returns {String}       Name for keyCode in lowercase\n * @memberof core/keymap\n * @private\n */\n\nvar toLowerCase = function toLowerCase(name) {\n  return name ? name.toLowerCase() : '';\n};\n/*\n * Iterates over `set` and invokes `fn` with the key and value of each item.\n *\n * @function\n * @param   {Function}  fn   Function to invoke\n * @param   {Object}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\n\nvar forEachObj = (0, _curry[\"default\"])(function (fn, set) {\n  Object.keys(set).forEach(function (name) {\n    return fn(name, set[name]);\n  });\n});\n/*\n * Invokes `fn` with `name` and `keyCode` for each key code provided.\n *\n * @function\n * @param   {Function}        fn       Function to invoke\n * @param   {String}          name     Name for the key codes\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar oneOrArray = (0, _curry[\"default\"])(function (fn, name, keyCode) {\n  if (Array.isArray(keyCode)) {\n    keyCode.forEach(fn(name));\n  } else {\n    fn(name, keyCode);\n  }\n});\n/*\n * Adds `keyCode` to `name`.\n *\n * @function\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar addOne = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n\n  if (name in map) {\n    var index = map[name].indexOf(keyCode);\n\n    if (index === -1) {\n      map[name].push(keyCode);\n    }\n  } else if (name) {\n    map[name] = [keyCode];\n  }\n});\n/*\n * Removes `keyCode` from `name`.\n *\n * @function\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar removeOne = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n\n  if (name in map) {\n    var keys = map[name];\n    var index = keys.indexOf(keyCode);\n\n    if (index === -1) {\n      delete map[name];\n    } else {\n      keys.splice(index, 1);\n    }\n  }\n});\n/**\n * Registers `keyCode` for `name`.\n *\n * @function add\n * @param   {String}          name     Name for the key code\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nvar add = oneOrArray(addOne);\n/**\n * Registers a set of key codes.\n *\n * @function addAll\n * @param   {Object<String,Number|Number[]>}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.add = add;\nvar addAll = forEachObj(add);\n/**\n * Unregisters `keyCode` from `name`.\n *\n * @function remove\n * @param   {String}          name     Name for the key code\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.addAll = addAll;\nvar remove = oneOrArray(removeOne);\n/**\n * Unregisters a set of key codes.\n *\n * @function removeAll\n * @param   {Object}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.remove = remove;\nvar removeAll = forEachObj(remove);\n/**\n * Determines if `keyCode` is mapped to `name`.\n *\n * @function is\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {Boolean}            `true` if `keyCode` is mapped to `name`\n * @memberof core/keymap\n * @public\n */\n\nexports.removeAll = removeAll;\nvar is = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n  return name in map && map[name].indexOf(keyCode) >= 0;\n});\nexports.is = is;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/core/keymap/keymap.js"],"names":["Object","defineProperty","exports","value","removeAll","remove","is","addAll","add","_curry","_interopRequireDefault","require","obj","__esModule","map","toLowerCase","name","forEachObj","fn","set","keys","forEach","oneOrArray","keyCode","Array","isArray","addOne","index","indexOf","push","removeOne","splice"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeAll = exports.remove = exports.is = exports.addAll = exports.add = void 0;\n\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*\n * The singleton map of names to keyCodes. If a name doesn't have any keyCodes mapped to it, it will\n * not exist in this map. If it does, its value will be an array of its keyCodes.\n *\n * @type {Object}\n * @private\n */\nvar map = {};\n/*\n * Safely converts keymap name to lowercase.\n *\n * @function\n * @param   {String} name  Name for keyCode\n *\n * @returns {String}       Name for keyCode in lowercase\n * @memberof core/keymap\n * @private\n */\n\nvar toLowerCase = function toLowerCase(name) {\n  return name ? name.toLowerCase() : '';\n};\n/*\n * Iterates over `set` and invokes `fn` with the key and value of each item.\n *\n * @function\n * @param   {Function}  fn   Function to invoke\n * @param   {Object}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\n\nvar forEachObj = (0, _curry[\"default\"])(function (fn, set) {\n  Object.keys(set).forEach(function (name) {\n    return fn(name, set[name]);\n  });\n});\n/*\n * Invokes `fn` with `name` and `keyCode` for each key code provided.\n *\n * @function\n * @param   {Function}        fn       Function to invoke\n * @param   {String}          name     Name for the key codes\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar oneOrArray = (0, _curry[\"default\"])(function (fn, name, keyCode) {\n  if (Array.isArray(keyCode)) {\n    keyCode.forEach(fn(name));\n  } else {\n    fn(name, keyCode);\n  }\n});\n/*\n * Adds `keyCode` to `name`.\n *\n * @function\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar addOne = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n\n  if (name in map) {\n    var index = map[name].indexOf(keyCode);\n\n    if (index === -1) {\n      map[name].push(keyCode);\n    }\n  } else if (name) {\n    map[name] = [keyCode];\n  }\n});\n/*\n * Removes `keyCode` from `name`.\n *\n * @function\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @private\n */\n\nvar removeOne = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n\n  if (name in map) {\n    var keys = map[name];\n    var index = keys.indexOf(keyCode);\n\n    if (index === -1) {\n      delete map[name];\n    } else {\n      keys.splice(index, 1);\n    }\n  }\n});\n/**\n * Registers `keyCode` for `name`.\n *\n * @function add\n * @param   {String}          name     Name for the key code\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nvar add = oneOrArray(addOne);\n/**\n * Registers a set of key codes.\n *\n * @function addAll\n * @param   {Object<String,Number|Number[]>}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.add = add;\nvar addAll = forEachObj(add);\n/**\n * Unregisters `keyCode` from `name`.\n *\n * @function remove\n * @param   {String}          name     Name for the key code\n * @param   {Number|Number[]} keyCode  A key code or array of key codes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.addAll = addAll;\nvar remove = oneOrArray(removeOne);\n/**\n * Unregisters a set of key codes.\n *\n * @function removeAll\n * @param   {Object}    set  A map of names to keyCodes\n *\n * @returns {undefined}\n * @memberof core/keymap\n * @public\n */\n\nexports.remove = remove;\nvar removeAll = forEachObj(remove);\n/**\n * Determines if `keyCode` is mapped to `name`.\n *\n * @function is\n * @param   {String}    name     Name for the key code\n * @param   {Number}    keyCode  A key code\n *\n * @returns {Boolean}            `true` if `keyCode` is mapped to `name`\n * @memberof core/keymap\n * @public\n */\n\nexports.removeAll = removeAll;\nvar is = (0, _curry[\"default\"])(function (name, keyCode) {\n  name = toLowerCase(name);\n  return name in map && map[name].indexOf(keyCode) >= 0;\n});\nexports.is = is;"]},"metadata":{},"sourceType":"module"}