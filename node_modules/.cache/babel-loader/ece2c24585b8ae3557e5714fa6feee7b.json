{"ast":null,"code":"\"use strict\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar fontMap = {};\nvar currentLocale = null; // Generate a single font-face rule\n\nvar buildFont = function buildFont(inOptions) {\n  if (!inOptions && !inOptions.name) {\n    return '';\n  }\n\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(inOptions.name, \"\\\";\\n\") + \"  font-weight: \".concat(inOptions.weight || 'normal', \";\\n\");\n\n  if (inOptions.localName) {\n    strOut += \"  src: local(\\\"\".concat(inOptions.localName, \"\\\");\\n\");\n  }\n\n  if (inOptions.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(inOptions.unicodeRange, \";\\n\");\n  }\n\n  strOut += '} \\n';\n  return strOut;\n}; // Generate a collection of font-face rules, in multiple font-variants\n\n\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n      name = bitDefault ? fontName : fontName + ' ' + strLang;\n\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      weight: 400,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Bold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      // fallback to regular\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Light\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      // fallback to regular\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n\n  return strOut;\n};\n\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n      language = matchLang && matchLang[1],\n      matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n      region = matchReg && matchReg[1];\n  var fontDefinitionCss = ''; // Build all the fonts so they could be explicitly called\n\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, re = region; `la-RE`\n        var _lang$split = lang.split('-'),\n            _lang$split2 = _slicedToArray(_lang$split, 2),\n            la = _lang$split2[0],\n            re = _lang$split2[1];\n\n        if (la === language) {\n          if (!re || re && re === region) {\n            fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n          }\n        }\n      }\n    }\n  }\n\n  return fontDefinitionCss;\n};\n\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\"); // We're rendering without the DOM; return the font definition stylesheet element string.\n\n    return tag;\n  }\n};\n\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\n\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\n\n\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\n\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n\n  return fontOverrideGenerator(locale);\n}\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\n\n\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\n\n\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\ui\\internal\\localized-fonts\\localized-fonts.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","fontMap","currentLocale","buildFont","inOptions","name","strOut","concat","weight","localName","unicodeRange","buildFontSet","fontName","fonts","strLang","bitDefault","regular","bold","light","buildFontDefinitionCss","locale","buildOverrides","matchLang","match","language","matchReg","region","fontDefinitionCss","lang","_lang$split","split","_lang$split2","la","re","insertFontDefinitionCss","styleId","document","styleElem","getElementById","createElement","setAttribute","head","appendChild","innerHTML","tag","fontGenerator","fontOverrideGenerator","generateFontRules","generateFontOverrideRules","addLocalizedFont","removeLocalizedFont","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar fontMap = {};\nvar currentLocale = null; // Generate a single font-face rule\n\nvar buildFont = function buildFont(inOptions) {\n  if (!inOptions && !inOptions.name) {\n    return '';\n  }\n\n  var strOut = '@font-face { \\n' + \"  font-family: \\\"\".concat(inOptions.name, \"\\\";\\n\") + \"  font-weight: \".concat(inOptions.weight || 'normal', \";\\n\");\n\n  if (inOptions.localName) {\n    strOut += \"  src: local(\\\"\".concat(inOptions.localName, \"\\\");\\n\");\n  }\n\n  if (inOptions.unicodeRange) {\n    strOut += \"  unicode-range: \".concat(inOptions.unicodeRange, \";\\n\");\n  }\n\n  strOut += '} \\n';\n  return strOut;\n}; // Generate a collection of font-face rules, in multiple font-variants\n\n\nvar buildFontSet = function buildFontSet(fontName, fonts, strLang, bitDefault) {\n  var strOut = '',\n      name = bitDefault ? fontName : fontName + ' ' + strLang;\n\n  if (fonts[strLang].regular) {\n    // Build Regular\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].regular,\n      weight: 400,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Bold\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].bold || fonts[strLang].regular,\n      // fallback to regular\n      weight: 700,\n      unicodeRange: fonts[strLang].unicodeRange\n    }); // Build Light\n\n    strOut += buildFont({\n      name: name,\n      localName: fonts[strLang].light || fonts[strLang].regular,\n      // fallback to regular\n      weight: 300,\n      unicodeRange: fonts[strLang].unicodeRange\n    });\n  }\n\n  return strOut;\n};\n\nvar buildFontDefinitionCss = function buildFontDefinitionCss(locale, buildOverrides) {\n  var matchLang = locale.match(/\\b([a-z]{2})\\b/),\n      language = matchLang && matchLang[1],\n      matchReg = locale.match(/\\b([A-Z]{2}|[0-9]{3})\\b/),\n      region = matchReg && matchReg[1];\n  var fontDefinitionCss = ''; // Build all the fonts so they could be explicitly called\n\n  for (var fontName in fontMap) {\n    var fonts = fontMap[fontName];\n\n    for (var lang in fonts) {\n      if (!buildOverrides) {\n        fontDefinitionCss += buildFontSet(fontName, fonts, lang);\n      } else {\n        // Set up the override for locale-specific font.\n        // la = language, re = region; `la-RE`\n        var _lang$split = lang.split('-'),\n            _lang$split2 = _slicedToArray(_lang$split, 2),\n            la = _lang$split2[0],\n            re = _lang$split2[1];\n\n        if (la === language) {\n          if (!re || re && re === region) {\n            fontDefinitionCss += buildFontSet(fontName, fonts, lang, true);\n          }\n        }\n      }\n    }\n  }\n\n  return fontDefinitionCss;\n};\n\nvar insertFontDefinitionCss = function insertFontDefinitionCss(styleId, fontDefinitionCss) {\n  if (typeof document !== 'undefined') {\n    // Normal execution in a browser window\n    var styleElem = document.getElementById(styleId);\n\n    if (!styleElem) {\n      styleElem = document.createElement('style');\n      styleElem.setAttribute('id', styleId);\n      styleElem.setAttribute('type', 'text/css');\n      document.head.appendChild(styleElem);\n    }\n\n    styleElem.innerHTML = fontDefinitionCss;\n  } else {\n    var tag = \"<style type=\\\"text/css\\\" id=\\\"\".concat(styleId, \"\\\">\").concat(fontDefinitionCss, \"</style>\"); // We're rendering without the DOM; return the font definition stylesheet element string.\n\n    return tag;\n  }\n};\n\nfunction fontGenerator(locale) {\n  var styleId = 'localized-fonts';\n\n  if (typeof document !== 'undefined' && document.getElementById(styleId)) {\n    return;\n  }\n\n  return insertFontDefinitionCss(styleId, buildFontDefinitionCss(locale));\n}\n\nfunction fontOverrideGenerator(locale) {\n  return insertFontDefinitionCss('localized-fonts-override', buildFontDefinitionCss(locale, true));\n}\n/**\n * Generates locale-specific font rules allowing any locale to have its own custom font. Each\n * locale-font from the configuration block (defined in this file) is generated at run-time. If the\n * locale you're currently in is in the locale-font list an additional `@font-face` rule will be\n * generated that will override the standard font.\n *\n * In addition to the standard override-font being generated, named region-specific fonts are also\n * generated. This lets you incorporate language specific fonts when you're outside of one of those\n * regions; useful in a language list context where you want the name of each language to be\n * represented by that language's designated font.\n *\n * Below is example genarated-output of the Urdu (\"ur\") locale-font.\n *\n * ```css\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur';\n * \tfont-weight: 500;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Bold';\n * \tfont-weight: 700;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * &#64;font-face {\n * \tfont-family: 'Custom Font ur Light';\n * \tfont-weight: 300;\n * \tsrc: local('CustomFont_Urdu');\n * \tunicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;\n * }\n * ```\n *\n * @param {String} locale Locale string in the format\n * @returns {String} An HTML fragment of the `<style>` when prerendering\n *\n * @public\n */\n\n\nfunction generateFontRules(locale) {\n  if (!locale || locale === currentLocale) {\n    return;\n  }\n\n  currentLocale = locale;\n  return fontGenerator(locale);\n}\n\nfunction generateFontOverrideRules(locale) {\n  if (!locale) {\n    return;\n  }\n\n  return fontOverrideGenerator(locale);\n}\n/**\n * Adds a localed font to the font map\n *\n * ```\n * addLocalizedFont('My Theme Font', {\n *   'ur': {\n *      regular: 'My Theme Urdu',\n *      unicodeRange:\n *        'U+600-6FF,' +\n *        'U+FE70-FEFE,' +\n *        'U+FB50-FDFF'\n *    }\n * })\n * ```\n *\n * @param {String} name  Name of the font\n * @param {Object} fonts Object mapping font names and unicode ranges to locales\n *\n * @public\n */\n\n\nfunction addLocalizedFont(name, fonts) {\n  fontMap[name] = fonts;\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n/**\n * Removes a localized font from the font map\n *\n * @param   {String} name Name of the font\n *\n * @public\n */\n\n\nfunction removeLocalizedFont(name) {\n  delete fontMap[name];\n\n  if (currentLocale) {\n    fontGenerator(currentLocale);\n  }\n}\n\nmodule.exports = generateFontRules;\nmodule.exports.generateFontRules = generateFontRules;\nmodule.exports.generateFontOverrideRules = generateFontOverrideRules;\nmodule.exports.addLocalizedFont = addLocalizedFont;\nmodule.exports.removeLocalizedFont = removeLocalizedFont;"]},"metadata":{},"sourceType":"module"}