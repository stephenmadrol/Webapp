{"ast":null,"code":"\"use strict\";\n/*\n * SearchUtils.js - Misc search utility routines\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar SearchUtils = {};\n/**\n * Binary search a sorted array for a particular target value.\n * If the exact value is not found, it returns the index of the smallest \n * entry that is greater than the given target value.<p> \n * \n * The comparator\n * parameter is a function that knows how to compare elements of the \n * array and the target. The function should return a value greater than 0\n * if the array element is greater than the target, a value less than 0 if\n * the array element is less than the target, and 0 if the array element \n * and the target are equivalent.<p>\n * \n * If the comparator function is not specified, this function assumes\n * the array and the target are numeric values and should be compared \n * as such.<p>\n * \n * \n * @static\n * @param {*} target element being sought \n * @param {Array} arr the array being searched\n * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries\n * in the array  \n * @return the index of the array into which the value would fit if \n * inserted, or -1 if given array is not an array or the target is not \n * a number\n */\n\nSearchUtils.bsearch = function (target, arr, comparator) {\n  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined') {\n    return -1;\n  }\n\n  var high = arr.length - 1,\n      low = 0,\n      mid = 0,\n      value,\n      cmp = comparator || SearchUtils.bsearch.numbers;\n\n  while (low <= high) {\n    mid = Math.floor((high + low) / 2);\n    value = cmp(arr[mid], target);\n\n    if (value > 0) {\n      high = mid - 1;\n    } else if (value < 0) {\n      low = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return low;\n};\n/**\n * Returns whether or not the given element is greater than, less than,\n * or equal to the given target.<p>\n * \n * @private\n * @static\n * @param {number} element the element being tested\n * @param {number} target the target being sought\n */\n\n\nSearchUtils.bsearch.numbers = function (element, target) {\n  return element - target;\n};\n/**\n * Do a bisection search of a function for a particular target value.<p> \n * \n * The function to search is a function that takes a numeric parameter, \n * does calculations, and returns gives a numeric result. The \n * function should should be smooth and not have any discontinuities \n * between the low and high values of the parameter.\n *  \n * \n * @static\n * @param {number} target value being sought\n * @param {number} low the lower bounds to start searching\n * @param {number} high the upper bounds to start searching\n * @param {number} precision minimum precision to support. Use 0 if you want to use the default.\n * @param {?function(number)=} func function to search \n * @return an approximation of the input value to the function that gives the desired\n * target output value, correct to within the error range of Javascript floating point \n * arithmetic, or NaN if there was some error\n */\n\n\nSearchUtils.bisectionSearch = function (target, low, high, precision, func) {\n  if (typeof target !== 'number' || typeof low !== 'number' || typeof high !== 'number' || typeof func !== 'function') {\n    return NaN;\n  }\n\n  var mid = 0,\n      value,\n      pre = precision > 0 ? precision : 1e-13;\n\n  do {\n    mid = (high + low) / 2;\n    value = func(mid);\n\n    if (value > target) {\n      high = mid;\n    } else if (value < target) {\n      low = mid;\n    }\n  } while (high - low > pre);\n\n  return mid;\n};\n\nmodule.exports = SearchUtils;","map":{"version":3,"sources":["/home/cdi/stephen/node_modules/@enact/i18n/ilib/lib/SearchUtils.js"],"names":["SearchUtils","bsearch","target","arr","comparator","high","length","low","mid","value","cmp","numbers","Math","floor","element","bisectionSearch","precision","func","NaN","pre","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIA,WAAW,GAAG,EAAlB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAA,WAAW,CAACC,OAAZ,GAAsB,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,UAAvB,EAAmC;AACvD,MAAI,OAAOD,GAAP,KAAe,WAAf,IAA8B,CAACA,GAA/B,IAAsC,OAAOD,MAAP,KAAkB,WAA5D,EAAyE;AACvE,WAAO,CAAC,CAAR;AACD;;AAED,MAAIG,IAAI,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAxB;AAAA,MACIC,GAAG,GAAG,CADV;AAAA,MAEIC,GAAG,GAAG,CAFV;AAAA,MAGIC,KAHJ;AAAA,MAIIC,GAAG,GAAGN,UAAU,IAAIJ,WAAW,CAACC,OAAZ,CAAoBU,OAJ5C;;AAMA,SAAOJ,GAAG,IAAIF,IAAd,EAAoB;AAClBG,IAAAA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAW,CAACR,IAAI,GAAGE,GAAR,IAAe,CAA1B,CAAN;AACAE,IAAAA,KAAK,GAAGC,GAAG,CAACP,GAAG,CAACK,GAAD,CAAJ,EAAWN,MAAX,CAAX;;AAEA,QAAIO,KAAK,GAAG,CAAZ,EAAe;AACbJ,MAAAA,IAAI,GAAGG,GAAG,GAAG,CAAb;AACD,KAFD,MAEO,IAAIC,KAAK,GAAG,CAAZ,EAAe;AACpBF,MAAAA,GAAG,GAAGC,GAAG,GAAG,CAAZ;AACD,KAFM,MAEA;AACL,aAAOA,GAAP;AACD;AACF;;AAED,SAAOD,GAAP;AACD,CAzBD;AA0BA;;;;;;;;;;;AAWAP,WAAW,CAACC,OAAZ,CAAoBU,OAApB,GAA8B,UAAUG,OAAV,EAAmBZ,MAAnB,EAA2B;AACvD,SAAOY,OAAO,GAAGZ,MAAjB;AACD,CAFD;AAGA;;;;;;;;;;;;;;;;;;;;;AAqBAF,WAAW,CAACe,eAAZ,GAA8B,UAAUb,MAAV,EAAkBK,GAAlB,EAAuBF,IAAvB,EAA6BW,SAA7B,EAAwCC,IAAxC,EAA8C;AAC1E,MAAI,OAAOf,MAAP,KAAkB,QAAlB,IAA8B,OAAOK,GAAP,KAAe,QAA7C,IAAyD,OAAOF,IAAP,KAAgB,QAAzE,IAAqF,OAAOY,IAAP,KAAgB,UAAzG,EAAqH;AACnH,WAAOC,GAAP;AACD;;AAED,MAAIV,GAAG,GAAG,CAAV;AAAA,MACIC,KADJ;AAAA,MAEIU,GAAG,GAAGH,SAAS,GAAG,CAAZ,GAAgBA,SAAhB,GAA4B,KAFtC;;AAIA,KAAG;AACDR,IAAAA,GAAG,GAAG,CAACH,IAAI,GAAGE,GAAR,IAAe,CAArB;AACAE,IAAAA,KAAK,GAAGQ,IAAI,CAACT,GAAD,CAAZ;;AAEA,QAAIC,KAAK,GAAGP,MAAZ,EAAoB;AAClBG,MAAAA,IAAI,GAAGG,GAAP;AACD,KAFD,MAEO,IAAIC,KAAK,GAAGP,MAAZ,EAAoB;AACzBK,MAAAA,GAAG,GAAGC,GAAN;AACD;AACF,GATD,QASSH,IAAI,GAAGE,GAAP,GAAaY,GATtB;;AAWA,SAAOX,GAAP;AACD,CArBD;;AAuBAY,MAAM,CAACC,OAAP,GAAiBrB,WAAjB","sourcesContent":["\"use strict\";\n\n/*\n * SearchUtils.js - Misc search utility routines\n * \n * Copyright © 2013-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SearchUtils = {};\n/**\n * Binary search a sorted array for a particular target value.\n * If the exact value is not found, it returns the index of the smallest \n * entry that is greater than the given target value.<p> \n * \n * The comparator\n * parameter is a function that knows how to compare elements of the \n * array and the target. The function should return a value greater than 0\n * if the array element is greater than the target, a value less than 0 if\n * the array element is less than the target, and 0 if the array element \n * and the target are equivalent.<p>\n * \n * If the comparator function is not specified, this function assumes\n * the array and the target are numeric values and should be compared \n * as such.<p>\n * \n * \n * @static\n * @param {*} target element being sought \n * @param {Array} arr the array being searched\n * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries\n * in the array  \n * @return the index of the array into which the value would fit if \n * inserted, or -1 if given array is not an array or the target is not \n * a number\n */\n\nSearchUtils.bsearch = function (target, arr, comparator) {\n  if (typeof arr === 'undefined' || !arr || typeof target === 'undefined') {\n    return -1;\n  }\n\n  var high = arr.length - 1,\n      low = 0,\n      mid = 0,\n      value,\n      cmp = comparator || SearchUtils.bsearch.numbers;\n\n  while (low <= high) {\n    mid = Math.floor((high + low) / 2);\n    value = cmp(arr[mid], target);\n\n    if (value > 0) {\n      high = mid - 1;\n    } else if (value < 0) {\n      low = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return low;\n};\n/**\n * Returns whether or not the given element is greater than, less than,\n * or equal to the given target.<p>\n * \n * @private\n * @static\n * @param {number} element the element being tested\n * @param {number} target the target being sought\n */\n\n\nSearchUtils.bsearch.numbers = function (element, target) {\n  return element - target;\n};\n/**\n * Do a bisection search of a function for a particular target value.<p> \n * \n * The function to search is a function that takes a numeric parameter, \n * does calculations, and returns gives a numeric result. The \n * function should should be smooth and not have any discontinuities \n * between the low and high values of the parameter.\n *  \n * \n * @static\n * @param {number} target value being sought\n * @param {number} low the lower bounds to start searching\n * @param {number} high the upper bounds to start searching\n * @param {number} precision minimum precision to support. Use 0 if you want to use the default.\n * @param {?function(number)=} func function to search \n * @return an approximation of the input value to the function that gives the desired\n * target output value, correct to within the error range of Javascript floating point \n * arithmetic, or NaN if there was some error\n */\n\n\nSearchUtils.bisectionSearch = function (target, low, high, precision, func) {\n  if (typeof target !== 'number' || typeof low !== 'number' || typeof high !== 'number' || typeof func !== 'function') {\n    return NaN;\n  }\n\n  var mid = 0,\n      value,\n      pre = precision > 0 ? precision : 1e-13;\n\n  do {\n    mid = (high + low) / 2;\n    value = func(mid);\n\n    if (value > target) {\n      high = mid;\n    } else if (value < target) {\n      low = mid;\n    }\n  } while (high - low > pre);\n\n  return mid;\n};\n\nmodule.exports = SearchUtils;"]},"metadata":{},"sourceType":"module"}