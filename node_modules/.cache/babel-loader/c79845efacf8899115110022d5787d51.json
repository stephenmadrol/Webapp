{"ast":null,"code":"\"use strict\";\n/*\n * HebrewRataDie.js - Represent an RD date in the Hebrew calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nMathUtils.js\nHebrewCal.js\nRataDie.js\n*/\n\nvar HebrewCal = require(\"./HebrewCal.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Hebrew RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Hebrew date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date\n */\n\n\nvar HebrewRataDie = function HebrewRataDie(params) {\n  this.cal = params && params.cal || new HebrewCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nHebrewRataDie.prototype = new RataDie();\nHebrewRataDie.prototype.parent = RataDie;\nHebrewRataDie.prototype.constructor = HebrewRataDie;\n/**\n * The difference between a zero Julian day and the first day of the Hebrew \n * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25\n * @private\n * @type number\n */\n\nHebrewRataDie.prototype.epoch = 347997.25;\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections\n * @private\n * @const\n * @type Array.<number>\n */\n\nHebrewRataDie.cumMonthLengths = [176,\n/* Nisan */\n206,\n/* Iyyar */\n235,\n/* Sivan */\n265,\n/* Tammuz */\n294,\n/* Av */\n324,\n/* Elul */\n0,\n/* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n30,\n/* Heshvan */\n59,\n/* Kislev */\n88,\n/* Teveth */\n117,\n/* Shevat */\n147\n/* Adar I */\n];\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections \n * @private\n * @const\n * @type Array.<number>\n */\n\nHebrewRataDie.cumMonthLengthsLeap = [206,\n/* Nisan */\n236,\n/* Iyyar */\n265,\n/* Sivan */\n295,\n/* Tammuz */\n324,\n/* Av */\n354,\n/* Elul */\n0,\n/* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n30,\n/* Heshvan */\n59,\n/* Kislev */\n88,\n/* Teveth */\n117,\n/* Shevat */\n147,\n/* Adar I */\n177\n/* Adar II */\n];\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\n\nHebrewRataDie.prototype._setDateComponents = function (date) {\n  var elapsed = HebrewCal.elapsedDays(date.year);\n  var days = elapsed + HebrewCal.newYearsCorrection(date.year, elapsed) + date.day - 1;\n  var sum = 0,\n      table; //console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n  //console.log(\"getRataDie: days is \" +  days);\n  //console.log(\"getRataDie: new years correction is \" +  HebrewCal.newYearsCorrection(date.year, elapsed));\n\n  table = this.cal.isLeapYear(date.year) ? HebrewRataDie.cumMonthLengthsLeap : HebrewRataDie.cumMonthLengths;\n  sum = table[date.month - 1]; // gets cumulative without correction, so now add in the correction\n\n  if ((date.month < 7 || date.month > 8) && HebrewCal.longHeshvan(date.year)) {\n    sum++;\n  }\n\n  if ((date.month < 7 || date.month > 9) && HebrewCal.longKislev(date.year)) {\n    sum++;\n  } // console.log(\"getRataDie: cum days is now \" +  sum);\n\n\n  days += sum; // the date starts at sunset, which we take as 18:00, so the hours from\n  // midnight to 18:00 are on the current Gregorian day, and the hours from\n  // 18:00 to midnight are on the previous Gregorian day. So to calculate the \n  // number of hours into the current day that this time represents, we have\n  // to count from 18:00 to midnight first, and add in 6 hours if the time is\n  // less than 18:00\n\n  var minute, second, millisecond;\n\n  if (typeof date.parts !== 'undefined') {\n    // The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n    var parts = parseInt(date.parts, 10);\n    var seconds = parseInt(parts, 10) * 3.333333333333;\n    minute = Math.floor(seconds / 60);\n    seconds -= minute * 60;\n    second = Math.floor(seconds);\n    millisecond = seconds - second;\n  } else {\n    minute = parseInt(date.minute, 10) || 0;\n    second = parseInt(date.second, 10) || 0;\n    millisecond = parseInt(date.millisecond, 10) || 0;\n  }\n\n  var time;\n\n  if (date.hour >= 18) {\n    time = ((date.hour - 18 || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;\n  } else {\n    time = 0.25 + // 6 hours from 18:00 to midnight on the previous gregorian day\n    ((date.hour || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;\n  } //console.log(\"getRataDie: rd is \" +  (days + time));\n\n\n  this.rd = days + time;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nHebrewRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek + 1, 7);\n};\n\nmodule.exports = HebrewRataDie;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\HebrewRataDie.js"],"names":["HebrewCal","require","MathUtils","RataDie","HebrewRataDie","params","cal","rd","NaN","call","prototype","parent","constructor","epoch","cumMonthLengths","cumMonthLengthsLeap","_setDateComponents","date","elapsed","elapsedDays","year","days","newYearsCorrection","day","sum","table","isLeapYear","month","longHeshvan","longKislev","minute","second","millisecond","parts","parseInt","seconds","Math","floor","time","hour","_onOrBefore","dayOfWeek","mod","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * HebrewRataDie.js - Represent an RD date in the Hebrew calendar\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nMathUtils.js\nHebrewCal.js\nRataDie.js\n*/\nvar HebrewCal = require(\"./HebrewCal.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * @class\n * Construct a new Hebrew RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \n * the parts or specify the minutes, seconds, and milliseconds, but not both. \n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Hebrew date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date\n */\n\n\nvar HebrewRataDie = function HebrewRataDie(params) {\n  this.cal = params && params.cal || new HebrewCal();\n  this.rd = NaN;\n  RataDie.call(this, params);\n};\n\nHebrewRataDie.prototype = new RataDie();\nHebrewRataDie.prototype.parent = RataDie;\nHebrewRataDie.prototype.constructor = HebrewRataDie;\n/**\n * The difference between a zero Julian day and the first day of the Hebrew \n * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25\n * @private\n * @type number\n */\n\nHebrewRataDie.prototype.epoch = 347997.25;\n/**\n * the cumulative lengths of each month for a non-leap year, without new years corrections\n * @private\n * @const\n * @type Array.<number>\n */\n\nHebrewRataDie.cumMonthLengths = [176,\n/* Nisan */\n206,\n/* Iyyar */\n235,\n/* Sivan */\n265,\n/* Tammuz */\n294,\n/* Av */\n324,\n/* Elul */\n0,\n/* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n30,\n/* Heshvan */\n59,\n/* Kislev */\n88,\n/* Teveth */\n117,\n/* Shevat */\n147\n/* Adar I */\n];\n/**\n * the cumulative lengths of each month for a leap year, without new years corrections \n * @private\n * @const\n * @type Array.<number>\n */\n\nHebrewRataDie.cumMonthLengthsLeap = [206,\n/* Nisan */\n236,\n/* Iyyar */\n265,\n/* Sivan */\n295,\n/* Tammuz */\n324,\n/* Av */\n354,\n/* Elul */\n0,\n/* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\n30,\n/* Heshvan */\n59,\n/* Kislev */\n88,\n/* Teveth */\n117,\n/* Shevat */\n147,\n/* Adar I */\n177\n/* Adar II */\n];\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n * \n * @private\n * @param {Object} date the date components to calculate the RD from\n */\n\nHebrewRataDie.prototype._setDateComponents = function (date) {\n  var elapsed = HebrewCal.elapsedDays(date.year);\n  var days = elapsed + HebrewCal.newYearsCorrection(date.year, elapsed) + date.day - 1;\n  var sum = 0,\n      table; //console.log(\"getRataDie: converting \" +  JSON.stringify(date));\n  //console.log(\"getRataDie: days is \" +  days);\n  //console.log(\"getRataDie: new years correction is \" +  HebrewCal.newYearsCorrection(date.year, elapsed));\n\n  table = this.cal.isLeapYear(date.year) ? HebrewRataDie.cumMonthLengthsLeap : HebrewRataDie.cumMonthLengths;\n  sum = table[date.month - 1]; // gets cumulative without correction, so now add in the correction\n\n  if ((date.month < 7 || date.month > 8) && HebrewCal.longHeshvan(date.year)) {\n    sum++;\n  }\n\n  if ((date.month < 7 || date.month > 9) && HebrewCal.longKislev(date.year)) {\n    sum++;\n  } // console.log(\"getRataDie: cum days is now \" +  sum);\n\n\n  days += sum; // the date starts at sunset, which we take as 18:00, so the hours from\n  // midnight to 18:00 are on the current Gregorian day, and the hours from\n  // 18:00 to midnight are on the previous Gregorian day. So to calculate the \n  // number of hours into the current day that this time represents, we have\n  // to count from 18:00 to midnight first, and add in 6 hours if the time is\n  // less than 18:00\n\n  var minute, second, millisecond;\n\n  if (typeof date.parts !== 'undefined') {\n    // The parts (halaqim) of the hour. This can be a number from 0 to 1079.\n    var parts = parseInt(date.parts, 10);\n    var seconds = parseInt(parts, 10) * 3.333333333333;\n    minute = Math.floor(seconds / 60);\n    seconds -= minute * 60;\n    second = Math.floor(seconds);\n    millisecond = seconds - second;\n  } else {\n    minute = parseInt(date.minute, 10) || 0;\n    second = parseInt(date.second, 10) || 0;\n    millisecond = parseInt(date.millisecond, 10) || 0;\n  }\n\n  var time;\n\n  if (date.hour >= 18) {\n    time = ((date.hour - 18 || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;\n  } else {\n    time = 0.25 + // 6 hours from 18:00 to midnight on the previous gregorian day\n    ((date.hour || 0) * 3600000 + (minute || 0) * 60000 + (second || 0) * 1000 + (millisecond || 0)) / 86400000;\n  } //console.log(\"getRataDie: rd is \" +  (days + time));\n\n\n  this.rd = days + time;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nHebrewRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek + 1, 7);\n};\n\nmodule.exports = HebrewRataDie;"]},"metadata":{},"sourceType":"module"}