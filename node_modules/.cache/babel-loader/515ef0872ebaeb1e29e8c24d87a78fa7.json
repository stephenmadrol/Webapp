{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPaused = isPaused;\nexports.pause = pause;\nexports.resume = _resume;\nexports.Pause = exports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Provides a class which allows consumers to safely pause and resume spotlight without resuming\n * another consumer's pause.\n *\n * When multiple components attempt to pause and resume spotlight at overlapping times using\n * [Spotlight.pause()]{@link spotlight.Spotlight.pause} and\n * [Spotlight.resume()]{@link spotlight.Spotlight.resume}, one component might resume spotlight when\n * another expected it to still be paused.\n *\n * `Pause` helps to address this by setting a \"soft lock\" on the pause which informs other instances\n * that the spotlight pause state is being controlled. When pause is locked, it can only be resumed\n * by the instance that locked it. Subsequent calls to `pause` and `resume` on another instance of\n * `Pause` have no effect.\n *\n * *Note:* The top-level [Spotlight.pause()]{@link spotlight.Spotlight.pause} and\n * [Spotlight.resume()]{@link spotlight.Spotlight.resume} do not respect the pause locks and act as\n * a user-space escape hatch.\n *\n * ```\n * import Pause from '@enact/spotlight/Pause';\n *\n * const paused1 = new Pause('paused 1');\n * const paused2 = new Pause('paused 2');\n *\n * // pauses spotlight\n * paused1.pause();\n *\n * // has no effect because pause1 is in control\n * paused2.pause();\n *\n * // has no effect because pause1 is in control\n * paused2.resume();\n *\n * // resumes spotlight\n * paused1.resume();\n *\n * ```\n *\n * @module spotlight/Pause\n */\n\n\nvar paused = false; // Private, exported methods used by Spotlight to set and query the pause state from its public API\n\nfunction pause() {\n  paused = true;\n}\n\nfunction _resume() {\n  paused = false;\n}\n\nfunction isPaused() {\n  return paused !== false;\n}\n/**\n * Acts as a semaphore for Spotlight pause state ensuring that only the last Pause instance can\n * resume Spotlight.\n *\n * *Note* {@link spotlight/Spotlight.resume} will always resume spotlight regardless of what last\n * paused spotlight and can be used as an escape hatch to force resumption.\n *\n * @class Pause\n * @memberof spotlight/Pause\n * @public\n */\n\n\nvar Pause =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Accepts a name for the instance\n   *\n   * The `name` is not used but may be useful for debugging which instance has currently paused\n   * Spotlight.\n   *\n   * @param {String} name The name of the pause instance\n   * @memberof spotlight/Pause.Pause.prototype\n   * @constructor\n   * @public\n   */\n  function Pause(name) {\n    _classCallCheck(this, Pause);\n\n    this.name = name;\n  }\n\n  _createClass(Pause, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Pause<\".concat(this.name, \">\");\n    }\n    /**\n     * Returns `true` when Spotlight is paused by this instance\n     *\n     * @returns {Boolean}\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return paused === this;\n    }\n    /**\n     * Pauses spotlight if not currently paused\n     *\n     * @returns {undefined}\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!isPaused()) {\n        paused = this;\n      }\n    }\n    /**\n     * Resumes spotlight if this instance was the last to pause spotlight\n     *\n     * @returns {Boolean} `true` if spotlight was resumed\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.isPaused()) {\n        _resume();\n\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Pause;\n}();\n\nexports.Pause = Pause;\nvar _default = Pause;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/spotlight/Pause/Pause.js"],"names":["Object","defineProperty","exports","value","isPaused","pause","resume","_resume","Pause","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","prototype","paused","name","toString","concat","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPaused = isPaused;\nexports.pause = pause;\nexports.resume = _resume;\nexports.Pause = exports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Provides a class which allows consumers to safely pause and resume spotlight without resuming\n * another consumer's pause.\n *\n * When multiple components attempt to pause and resume spotlight at overlapping times using\n * [Spotlight.pause()]{@link spotlight.Spotlight.pause} and\n * [Spotlight.resume()]{@link spotlight.Spotlight.resume}, one component might resume spotlight when\n * another expected it to still be paused.\n *\n * `Pause` helps to address this by setting a \"soft lock\" on the pause which informs other instances\n * that the spotlight pause state is being controlled. When pause is locked, it can only be resumed\n * by the instance that locked it. Subsequent calls to `pause` and `resume` on another instance of\n * `Pause` have no effect.\n *\n * *Note:* The top-level [Spotlight.pause()]{@link spotlight.Spotlight.pause} and\n * [Spotlight.resume()]{@link spotlight.Spotlight.resume} do not respect the pause locks and act as\n * a user-space escape hatch.\n *\n * ```\n * import Pause from '@enact/spotlight/Pause';\n *\n * const paused1 = new Pause('paused 1');\n * const paused2 = new Pause('paused 2');\n *\n * // pauses spotlight\n * paused1.pause();\n *\n * // has no effect because pause1 is in control\n * paused2.pause();\n *\n * // has no effect because pause1 is in control\n * paused2.resume();\n *\n * // resumes spotlight\n * paused1.resume();\n *\n * ```\n *\n * @module spotlight/Pause\n */\nvar paused = false; // Private, exported methods used by Spotlight to set and query the pause state from its public API\n\nfunction pause() {\n  paused = true;\n}\n\nfunction _resume() {\n  paused = false;\n}\n\nfunction isPaused() {\n  return paused !== false;\n}\n/**\n * Acts as a semaphore for Spotlight pause state ensuring that only the last Pause instance can\n * resume Spotlight.\n *\n * *Note* {@link spotlight/Spotlight.resume} will always resume spotlight regardless of what last\n * paused spotlight and can be used as an escape hatch to force resumption.\n *\n * @class Pause\n * @memberof spotlight/Pause\n * @public\n */\n\n\nvar Pause =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Accepts a name for the instance\n   *\n   * The `name` is not used but may be useful for debugging which instance has currently paused\n   * Spotlight.\n   *\n   * @param {String} name The name of the pause instance\n   * @memberof spotlight/Pause.Pause.prototype\n   * @constructor\n   * @public\n   */\n  function Pause(name) {\n    _classCallCheck(this, Pause);\n\n    this.name = name;\n  }\n\n  _createClass(Pause, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Pause<\".concat(this.name, \">\");\n    }\n    /**\n     * Returns `true` when Spotlight is paused by this instance\n     *\n     * @returns {Boolean}\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"isPaused\",\n    value: function isPaused() {\n      return paused === this;\n    }\n    /**\n     * Pauses spotlight if not currently paused\n     *\n     * @returns {undefined}\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (!isPaused()) {\n        paused = this;\n      }\n    }\n    /**\n     * Resumes spotlight if this instance was the last to pause spotlight\n     *\n     * @returns {Boolean} `true` if spotlight was resumed\n     * @memberof spotlight/Pause.Pause.prototype\n     * @public\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.isPaused()) {\n        _resume();\n\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Pause;\n}();\n\nexports.Pause = Pause;\nvar _default = Pause;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}