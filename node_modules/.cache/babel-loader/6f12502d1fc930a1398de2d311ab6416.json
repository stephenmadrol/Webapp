{"ast":null,"code":"\"use strict\";\n/*\n * EthiopicDate.js - Represent a date in the Ethiopic calendar\n *\n * Copyright Â© 2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nEthiopicCal.js \nMathUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar EthiopicCal = require(\"./EthiopicCal.js\");\n/**\n * @class\n * Construct a new date object for the Ethiopic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string\n * of this ethiopic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Ethiopic date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date\n */\n\n\nvar EthiopicDate = function EthiopicDate(params) {\n  this.cal = new EthiopicCal();\n  params = params || {};\n\n  if (typeof params.noinstance === 'boolean' && params.noinstance) {\n    // for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n    return;\n  }\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nEthiopicDate.prototype = new IDate({\n  noinstance: true\n});\nEthiopicDate.prototype.parent = IDate;\nEthiopicDate.prototype.constructor = EthiopicDate;\n/**\n * Initialize this instance\n * @private\n */\n\nEthiopicDate.prototype._init = function (params) {\n  new TimeZone({\n    id: this.timezone,\n    sync: params.sync,\n    loadParams: params.loadParams,\n    onLoad: ilib.bind(this, function (tz) {\n      this.tz = tz;\n\n      if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n        /**\n         * Year in the Ethiopic calendar.\n         * @type number\n         */\n        this.year = parseInt(params.year, 10) || 0;\n        /**\n         * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).\n         * @type number\n         */\n\n        this.month = parseInt(params.month, 10) || 1;\n        /**\n         * The day of the month. This ranges from 1 to 30.\n         * @type number\n         */\n\n        this.day = parseInt(params.day, 10) || 1;\n        /**\n         * The hour of the day. This can be a number from 0 to 23, as times are\n         * stored unambiguously in the 24-hour clock.\n         * @type number\n         */\n\n        this.hour = parseInt(params.hour, 10) || 0;\n        /**\n         * The minute of the hours. Ranges from 0 to 59.\n         * @type number\n         */\n\n        this.minute = parseInt(params.minute, 10) || 0;\n        /**\n         * The second of the minute. Ranges from 0 to 59.\n         * @type number\n         */\n\n        this.second = parseInt(params.second, 10) || 0;\n        /**\n         * The millisecond of the second. Ranges from 0 to 999.\n         * @type number\n         */\n\n        this.millisecond = parseInt(params.millisecond, 10) || 0;\n        /**\n         * The day of the year. Ranges from 1 to 366.\n         * @type number\n         */\n\n        this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n        if (typeof params.dst === 'boolean') {\n          this.dst = params.dst;\n        }\n\n        this.rd = this.newRd(this); // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst\n        // are set in order to figure out which time zone rules apply and\n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n      }\n\n      if (!this.rd) {\n        this.rd = this.newRd(params);\n\n        this._calcDateComponents();\n      }\n\n      if (typeof params.onLoad === \"function\") {\n        params.onLoad(this);\n      }\n    })\n  });\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nEthiopicDate.prototype.newRd = function (params) {\n  return new EthiopicRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\n\n\nEthiopicDate.prototype._calcYear = function (rd) {\n  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1463) / 1461);\n  return year;\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nEthiopicDate.prototype._calcDateComponents = function () {\n  var remainder,\n      cumulative,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were\n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  }\n\n  var jan1 = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd + 1 - jan1.getRataDie();\n  this.month = Math.floor((remainder - 1) / 30) + 1;\n  remainder = remainder - (this.month - 1) * 30;\n  this.day = Math.floor(remainder);\n  remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nEthiopicDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 4, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nEthiopicDate.prototype.getCalendar = function () {\n  return \"ethiopic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"ethiopic\"] = EthiopicDate;\nmodule.exports = EthiopicDate;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/EthiopicDate.js"],"names":["ilib","require","MathUtils","EthiopicRataDie","Locale","LocaleInfo","IDate","TimeZone","Calendar","EthiopicCal","EthiopicDate","params","cal","noinstance","timezone","locale","sync","loadParams","onLoad","bind","li","getTimeZone","_init","prototype","parent","constructor","id","tz","year","month","day","hour","minute","second","millisecond","parseInt","dayOfYear","dst","rd","newRd","offset","_getOffsetMillisWallTime","getRataDie","_calcDateComponents","_calcYear","Math","floor","remainder","cumulative","getOffsetMillis","jan1","round","getDayOfWeek","mod","getCalendar","_constructors","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * EthiopicDate.js - Represent a date in the Ethiopic calendar\n *\n * Copyright Â© 2015, 2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nilib.js\nIDate.js \nEthiopicCal.js \nMathUtils.js\nLocale.js\nLocaleInfo.js \nTimeZone.js\nEthiopicRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar LocaleInfo = require(\"./LocaleInfo.js\");\n\nvar IDate = require(\"./IDate.js\");\n\nvar TimeZone = require(\"./TimeZone.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar EthiopicCal = require(\"./EthiopicCal.js\");\n/**\n * @class\n * Construct a new date object for the Ethiopic Calendar. The constructor can be called\n * with a parameter object that contains any of the following properties:\n *\n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\n * <li><i>julianday</i> - the Julian Day to set into this date\n * <li><i>year</i> - any integer\n * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\n * <li><i>day</i> - 1 to 30\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation\n * is always done with an unambiguous 24 hour representation\n * <li><i>minute</i> - 0 to 59\n * <li><i>second</i> - 0 to 59\n * <li><i>millisecond<i> - 0 to 999\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string\n * of this ethiopic date. The date/time is kept in the local time. The time zone\n * is used later if this date is formatted according to a different time zone and\n * the difference has to be calculated, or when the date format has a time zone\n * component in it.\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not\n * given, it can be inferred from this locale. For locales that span multiple\n * time zones, the one with the largest population is chosen as the one that\n * represents the locale.\n *\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If called with another Ethiopic date argument, the date components of the given\n * date are copied into the current one.<p>\n *\n * If the constructor is called with no arguments at all or if none of the\n * properties listed above\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date\n * components are\n * filled in with the current date at the time of instantiation. Note that if\n * you do not give the time zone when defaulting to the current time and the\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich\n * Mean Time\").<p>\n *\n *\n * @constructor\n * @extends IDate\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date\n */\n\n\nvar EthiopicDate = function EthiopicDate(params) {\n  this.cal = new EthiopicCal();\n  params = params || {};\n\n  if (typeof params.noinstance === 'boolean' && params.noinstance) {\n    // for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\n    return;\n  }\n\n  if (params.timezone) {\n    this.timezone = params.timezone;\n  }\n\n  if (params.locale) {\n    this.locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (!this.timezone) {\n    if (this.locale) {\n      new LocaleInfo(this.locale, {\n        sync: params.sync,\n        loadParams: params.loadParams,\n        onLoad: ilib.bind(this, function (li) {\n          this.li = li;\n          this.timezone = li.getTimeZone();\n\n          this._init(params);\n        })\n      });\n    } else {\n      this.timezone = \"local\";\n\n      this._init(params);\n    }\n  } else {\n    this._init(params);\n  }\n};\n\nEthiopicDate.prototype = new IDate({\n  noinstance: true\n});\nEthiopicDate.prototype.parent = IDate;\nEthiopicDate.prototype.constructor = EthiopicDate;\n/**\n * Initialize this instance\n * @private\n */\n\nEthiopicDate.prototype._init = function (params) {\n  new TimeZone({\n    id: this.timezone,\n    sync: params.sync,\n    loadParams: params.loadParams,\n    onLoad: ilib.bind(this, function (tz) {\n      this.tz = tz;\n\n      if (params.year || params.month || params.day || params.hour || params.minute || params.second || params.millisecond) {\n        /**\n         * Year in the Ethiopic calendar.\n         * @type number\n         */\n        this.year = parseInt(params.year, 10) || 0;\n        /**\n         * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).\n         * @type number\n         */\n\n        this.month = parseInt(params.month, 10) || 1;\n        /**\n         * The day of the month. This ranges from 1 to 30.\n         * @type number\n         */\n\n        this.day = parseInt(params.day, 10) || 1;\n        /**\n         * The hour of the day. This can be a number from 0 to 23, as times are\n         * stored unambiguously in the 24-hour clock.\n         * @type number\n         */\n\n        this.hour = parseInt(params.hour, 10) || 0;\n        /**\n         * The minute of the hours. Ranges from 0 to 59.\n         * @type number\n         */\n\n        this.minute = parseInt(params.minute, 10) || 0;\n        /**\n         * The second of the minute. Ranges from 0 to 59.\n         * @type number\n         */\n\n        this.second = parseInt(params.second, 10) || 0;\n        /**\n         * The millisecond of the second. Ranges from 0 to 999.\n         * @type number\n         */\n\n        this.millisecond = parseInt(params.millisecond, 10) || 0;\n        /**\n         * The day of the year. Ranges from 1 to 366.\n         * @type number\n         */\n\n        this.dayOfYear = parseInt(params.dayOfYear, 10);\n\n        if (typeof params.dst === 'boolean') {\n          this.dst = params.dst;\n        }\n\n        this.rd = this.newRd(this); // add the time zone offset to the rd to convert to UTC\n        // getOffsetMillis requires that this.year, this.rd, and this.dst\n        // are set in order to figure out which time zone rules apply and\n        // what the offset is at that point in the year\n\n        this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\n\n        if (this.offset !== 0) {\n          this.rd = this.newRd({\n            rd: this.rd.getRataDie() - this.offset\n          });\n        }\n      }\n\n      if (!this.rd) {\n        this.rd = this.newRd(params);\n\n        this._calcDateComponents();\n      }\n\n      if (typeof params.onLoad === \"function\") {\n        params.onLoad(this);\n      }\n    })\n  });\n};\n/**\n * Return a new RD for this date type using the given params.\n * @protected\n * @param {Object=} params the parameters used to create this rata die instance\n * @returns {RataDie} the new RD instance for the given params\n */\n\n\nEthiopicDate.prototype.newRd = function (params) {\n  return new EthiopicRataDie(params);\n};\n/**\n * Return the year for the given RD\n * @protected\n * @param {number} rd RD to calculate from\n * @returns {number} the year for the RD\n */\n\n\nEthiopicDate.prototype._calcYear = function (rd) {\n  var year = Math.floor((4 * (Math.floor(rd) - 1) + 1463) / 1461);\n  return year;\n};\n/**\n * Calculate date components for the given RD date.\n * @protected\n */\n\n\nEthiopicDate.prototype._calcDateComponents = function () {\n  var remainder,\n      cumulative,\n      rd = this.rd.getRataDie();\n  this.year = this._calcYear(rd);\n\n  if (typeof this.offset === \"undefined\") {\n    this.year = this._calcYear(rd); // now offset the RD by the time zone, then recalculate in case we were\n    // near the year boundary\n\n    if (!this.tz) {\n      this.tz = new TimeZone({\n        id: this.timezone\n      });\n    }\n\n    this.offset = this.tz.getOffsetMillis(this) / 86400000;\n  }\n\n  if (this.offset !== 0) {\n    rd += this.offset;\n    this.year = this._calcYear(rd);\n  }\n\n  var jan1 = this.newRd({\n    year: this.year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  remainder = rd + 1 - jan1.getRataDie();\n  this.month = Math.floor((remainder - 1) / 30) + 1;\n  remainder = remainder - (this.month - 1) * 30;\n  this.day = Math.floor(remainder);\n  remainder -= this.day; // now convert to milliseconds for the rest of the calculation\n\n  remainder = Math.round(remainder * 86400000);\n  this.hour = Math.floor(remainder / 3600000);\n  remainder -= this.hour * 3600000;\n  this.minute = Math.floor(remainder / 60000);\n  remainder -= this.minute * 60000;\n  this.second = Math.floor(remainder / 1000);\n  remainder -= this.second * 1000;\n  this.millisecond = remainder;\n};\n/**\n * Return the day of the week of this date. The day of the week is encoded\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\n *\n * @return {number} the day of the week\n */\n\n\nEthiopicDate.prototype.getDayOfWeek = function () {\n  var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\n  return MathUtils.mod(rd - 4, 7);\n};\n/**\n * Return the name of the calendar that governs this date.\n *\n * @return {string} a string giving the name of the calendar\n */\n\n\nEthiopicDate.prototype.getCalendar = function () {\n  return \"ethiopic\";\n}; //register with the factory method\n\n\nIDate._constructors[\"ethiopic\"] = EthiopicDate;\nmodule.exports = EthiopicDate;"]},"metadata":{},"sourceType":"module"}