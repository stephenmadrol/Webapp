{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * Utils.js - Core utility routines\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js JSUtils.js\n\n\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Utils = {};\n/**\n * Find and merge all the locale data for a particular prefix in the given locale\n * and return it as a single javascript object. This merges the data in the \n * correct order:\n * \n * <ol>\n * <li>shared data (usually English)\n * <li>data for language\n * <li>data for language + region\n * <li>data for language + region + script\n * <li>data for language + region + script + variant\n * </ol>\n * \n * It is okay for any of the above to be missing. This function will just skip the \n * missing data. However, if everything except the shared data is missing, this \n * function returns undefined, allowing the caller to go and dynamically load the\n * data instead.\n * \n * @static\n * @param {string} prefix prefix under ilib.data of the data to merge\n * @param {Locale} locale locale of the data being sought\n * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,\n * merge all the relevant locale data together.\n * @return {Object?} the merged locale data\n */\n\nUtils.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {\n  var data = undefined;\n  var loc = locale || new Locale();\n  var foundLocaleData = false;\n  var property = prefix;\n  var mostSpecific;\n  data = ilib.data[prefix] || {};\n  mostSpecific = data;\n\n  if (loc.getLanguage()) {\n    property = prefix + '_' + loc.getLanguage();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getRegion()) {\n    property = prefix + '_' + loc.getRegion();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage()) {\n    property = prefix + '_' + loc.getLanguage();\n\n    if (loc.getScript()) {\n      property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();\n\n      if (ilib.data[property]) {\n        foundLocaleData = true;\n        data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n        mostSpecific = ilib.data[property];\n      }\n    }\n\n    if (loc.getRegion()) {\n      property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();\n\n      if (ilib.data[property]) {\n        foundLocaleData = true;\n        data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n        mostSpecific = ilib.data[property];\n      }\n    }\n  }\n\n  if (loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  return foundLocaleData ? returnOne ? mostSpecific : data : undefined;\n};\n/**\n * Return an array of relative path names for the\n * files that represent the data for the given locale.<p>\n * \n * Note that to prevent the situation where a directory for\n * a language exists next to the directory for a region where\n * the language code and region code differ only by case, the \n * plain region directories are located under the special \n * \"undefined\" language directory which has the ISO code \"und\".\n * The reason is that some platforms have case-insensitive \n * file systems, and you cannot have 2 directories with the \n * same name which only differ by case. For example, \"es\" is\n * the ISO 639 code for the language \"Spanish\" and \"ES\" is\n * the ISO 3166 code for the region \"Spain\", so both the\n * directories cannot exist underneath \"locale\". The region\n * therefore will be loaded from \"und/ES\" instead.<p>  \n * \n * <h4>Variations</h4>\n * \n * With only language and region specified, the following\n * sequence of paths will be generated:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * </pre>\n * \n * With only language and script specified:<p>\n * \n * <pre>\n * language\n * language/script\n * </pre>\n * \n * With only script and region specified:<p>\n * \n * <pre>\n * und/region  \n * </pre>\n * \n * With only region and variant specified:<p>\n * \n * <pre>\n * und/region\n * region/variant\n * </pre>\n * \n * With only language, script, and region specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * language/script/region\n * </pre>\n * \n * With only language, region, and variant specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * region/variant\n * language/region/variant\n * </pre>\n * \n * With all parts specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * region/variant\n * language/script/region\n * language/region/variant\n * language/script/region/variant\n * </pre>\n * \n * @static\n * @param {Locale} locale load the files for this locale\n * @param {string?} name the file name of each file to load without\n * any path\n * @return {Array.<string>} An array of relative path names\n * for the files that contain the locale data\n */\n\n\nUtils.getLocFiles = function (locale, name) {\n  var dir = \"\";\n  var files = [];\n  var filename = name || \"resources.json\";\n  var loc = locale || new Locale();\n  var language = loc.getLanguage();\n  var region = loc.getRegion();\n  var script = loc.getScript();\n  var variant = loc.getVariant();\n  files.push(filename); // generic shared file\n\n  if (language) {\n    dir = language + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (region) {\n    dir = \"und/\" + region + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language) {\n    if (script) {\n      dir = language + \"/\" + script + \"/\";\n      files.push(dir + filename);\n    }\n\n    if (region) {\n      dir = language + \"/\" + region + \"/\";\n      files.push(dir + filename);\n    }\n  }\n\n  if (region && variant) {\n    dir = \"und/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && script && region) {\n    dir = language + \"/\" + script + \"/\" + region + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && region && variant) {\n    dir = language + \"/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && script && region && variant) {\n    dir = language + \"/\" + script + \"/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  return files;\n};\n/**\n * Load data using the new loader object or via the old function callback.\n * @static\n * @private\n */\n\n\nUtils._callLoadData = function (files, sync, params, callback) {\n  // console.log(\"Utils._callLoadData called\");\n  if (typeof ilib._load === 'function') {\n    // console.log(\"Utils._callLoadData: calling as a regular function\");\n    return ilib._load(files, sync, params, callback);\n  } else if (_typeof(ilib._load) === 'object' && typeof ilib._load.loadFiles === 'function') {\n    // console.log(\"Utils._callLoadData: calling as an object\");\n    return ilib._load.loadFiles(files, sync, params, callback);\n  } // console.log(\"Utils._callLoadData: not calling. Type is \" + typeof(ilib._load) + \" and instanceof says \" + (ilib._load instanceof Loader));\n\n\n  return undefined;\n};\n/**\n * Find locale data or load it in. If the data with the given name is preassembled, it will\n * find the data in ilib.data. If the data is not preassembled but there is a loader function,\n * this function will call it to load the data. Otherwise, the callback will be called with\n * undefined as the data. This function will create a cache under the given class object.\n * If data was successfully loaded, it will be set into the cache so that future access to \n * the same data for the same locale is much quicker.<p>\n * \n * The parameters can specify any of the following properties:<p>\n * \n * <ul>\n * <li><i>name</i> - String. The name of the file being loaded. Default: ResBundle.json\n * <li><i>object</i> - String. The name of the class attempting to load data. This is used to differentiate parts of the cache.\n * <li><i>locale</i> - Locale. The locale for which data is loaded. Default is the current locale.\n * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.\n * <li><i>type</i> - String. Type of file to load. This can be \"json\" or \"other\" type. Default: \"json\" \n * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays\n * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent \n * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  \n * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function\n * <li><i>sync</i> - boolean. Whether or not to load the data synchronously\n * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.\n * Data is not returned from this method, so a callback function is mandatory.\n * </ul>\n * \n * @static\n * @param {Object} params Parameters configuring how to load the files (see above)\n */\n\n\nUtils.loadData = function (params) {\n  var name = \"resources.json\",\n      object = \"generic\",\n      locale = new Locale(ilib.getLocale()),\n      sync = false,\n      type = undefined,\n      loadParams = {},\n      callback = undefined,\n      nonlocale = false,\n      replace = false,\n      basename;\n\n  if (!params || typeof params.callback !== 'function') {\n    return;\n  }\n\n  if (params.name) {\n    name = params.name;\n  }\n\n  if (params.object) {\n    object = params.object;\n  }\n\n  if (params.locale) {\n    locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (params.type) {\n    type = params.type;\n  }\n\n  if (params.loadParams) {\n    loadParams = params.loadParams;\n  }\n\n  if (params.sync) {\n    sync = params.sync;\n  }\n\n  if (params.nonlocale) {\n    nonlocale = !!params.nonlocale;\n  }\n\n  if (typeof params.replace === 'boolean') {\n    replace = params.replace;\n  }\n\n  callback = params.callback;\n\n  if (object && !ilib.data.cache[object]) {\n    ilib.data.cache[object] = {};\n  }\n\n  if (!type) {\n    var dot = name.lastIndexOf(\".\");\n    type = dot !== -1 ? name.substring(dot + 1) : \"text\";\n  }\n\n  var spec = (!nonlocale && locale.getSpec().replace(/-/g, '_') || \"root\") + \",\" + name + \",\" + String(JSUtils.hashCode(loadParams));\n\n  if (!object || !ilib.data.cache[object] || typeof ilib.data.cache[object][spec] === 'undefined') {\n    var data,\n        returnOne = loadParams && loadParams.returnOne;\n\n    if (type === \"json\") {\n      // console.log(\"type is json\");\n      basename = name.substring(0, name.lastIndexOf(\".\"));\n\n      if (nonlocale) {\n        basename = basename.replace(/[\\.:\\(\\)\\/\\\\\\+\\-]/g, \"_\");\n        data = ilib.data[basename];\n      } else {\n        data = Utils.mergeLocData(basename, locale, replace, returnOne);\n      }\n\n      if (data) {\n        // console.log(\"found assembled data\");\n        if (object) {\n          ilib.data.cache[object][spec] = data;\n        }\n\n        callback(data);\n        return;\n      }\n    } // console.log(\"ilib._load is \" + typeof(ilib._load));\n\n\n    if (typeof ilib._load !== 'undefined') {\n      // the data is not preassembled, so attempt to load it dynamically\n      var files = nonlocale ? [name || \"resources.json\"] : Utils.getLocFiles(locale, name);\n\n      if (type !== \"json\") {\n        loadParams.returnOne = true;\n      }\n\n      Utils._callLoadData(files, sync, loadParams, ilib.bind(this, function (arr) {\n        if (type === \"json\") {\n          data = ilib.data[basename] || {};\n\n          for (var i = 0; i < arr.length; i++) {\n            if (typeof arr[i] !== 'undefined') {\n              if (loadParams.returnOne) {\n                data = arr[i];\n                break;\n              }\n\n              data = JSUtils.merge(data, arr[i], replace);\n            }\n          }\n\n          if (object) {\n            ilib.data.cache[object][spec] = data;\n          }\n\n          callback(data);\n        } else {\n          var i = arr.length - 1;\n\n          while (i > -1 && !arr[i]) {\n            i--;\n          }\n\n          if (i > -1) {\n            if (object) {\n              ilib.data.cache[object][spec] = arr[i];\n            }\n\n            callback(arr[i]);\n          } else {\n            callback(undefined);\n          }\n        }\n      }));\n    } else {\n      // no data other than the generic shared data\n      if (type === \"json\") {\n        data = ilib.data[basename];\n      }\n\n      if (object && data) {\n        ilib.data.cache[object][spec] = data;\n      }\n\n      callback(data);\n    }\n  } else {\n    callback(ilib.data.cache && ilib.data.cache[object] && ilib.data.cache[object][spec]);\n  }\n};\n\nmodule.exports = Utils;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/Utils.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","ilib","require","Locale","JSUtils","Utils","mergeLocData","prefix","locale","replaceArrays","returnOne","data","undefined","loc","foundLocaleData","property","mostSpecific","getLanguage","merge","getRegion","getScript","getVariant","getLocFiles","name","dir","files","filename","language","region","script","variant","push","_callLoadData","sync","params","callback","_load","loadFiles","loadData","object","getLocale","type","loadParams","nonlocale","replace","basename","cache","dot","lastIndexOf","substring","spec","getSpec","String","hashCode","bind","arr","i","length","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Utils.js - Core utility routines\n * \n * Copyright Â© 2012-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends ilib.js Locale.js JSUtils.js\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar JSUtils = require(\"./JSUtils.js\");\n\nvar Utils = {};\n/**\n * Find and merge all the locale data for a particular prefix in the given locale\n * and return it as a single javascript object. This merges the data in the \n * correct order:\n * \n * <ol>\n * <li>shared data (usually English)\n * <li>data for language\n * <li>data for language + region\n * <li>data for language + region + script\n * <li>data for language + region + script + variant\n * </ol>\n * \n * It is okay for any of the above to be missing. This function will just skip the \n * missing data. However, if everything except the shared data is missing, this \n * function returns undefined, allowing the caller to go and dynamically load the\n * data instead.\n * \n * @static\n * @param {string} prefix prefix under ilib.data of the data to merge\n * @param {Locale} locale locale of the data being sought\n * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.\n * If false, concatenate array elements in object1 with items in object2.\n * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,\n * merge all the relevant locale data together.\n * @return {Object?} the merged locale data\n */\n\nUtils.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {\n  var data = undefined;\n  var loc = locale || new Locale();\n  var foundLocaleData = false;\n  var property = prefix;\n  var mostSpecific;\n  data = ilib.data[prefix] || {};\n  mostSpecific = data;\n\n  if (loc.getLanguage()) {\n    property = prefix + '_' + loc.getLanguage();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getRegion()) {\n    property = prefix + '_' + loc.getRegion();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage()) {\n    property = prefix + '_' + loc.getLanguage();\n\n    if (loc.getScript()) {\n      property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();\n\n      if (ilib.data[property]) {\n        foundLocaleData = true;\n        data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n        mostSpecific = ilib.data[property];\n      }\n    }\n\n    if (loc.getRegion()) {\n      property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();\n\n      if (ilib.data[property]) {\n        foundLocaleData = true;\n        data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n        mostSpecific = ilib.data[property];\n      }\n    }\n  }\n\n  if (loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {\n    property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();\n\n    if (ilib.data[property]) {\n      foundLocaleData = true;\n      data = JSUtils.merge(data, ilib.data[property], replaceArrays);\n      mostSpecific = ilib.data[property];\n    }\n  }\n\n  return foundLocaleData ? returnOne ? mostSpecific : data : undefined;\n};\n/**\n * Return an array of relative path names for the\n * files that represent the data for the given locale.<p>\n * \n * Note that to prevent the situation where a directory for\n * a language exists next to the directory for a region where\n * the language code and region code differ only by case, the \n * plain region directories are located under the special \n * \"undefined\" language directory which has the ISO code \"und\".\n * The reason is that some platforms have case-insensitive \n * file systems, and you cannot have 2 directories with the \n * same name which only differ by case. For example, \"es\" is\n * the ISO 639 code for the language \"Spanish\" and \"ES\" is\n * the ISO 3166 code for the region \"Spain\", so both the\n * directories cannot exist underneath \"locale\". The region\n * therefore will be loaded from \"und/ES\" instead.<p>  \n * \n * <h4>Variations</h4>\n * \n * With only language and region specified, the following\n * sequence of paths will be generated:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * </pre>\n * \n * With only language and script specified:<p>\n * \n * <pre>\n * language\n * language/script\n * </pre>\n * \n * With only script and region specified:<p>\n * \n * <pre>\n * und/region  \n * </pre>\n * \n * With only region and variant specified:<p>\n * \n * <pre>\n * und/region\n * region/variant\n * </pre>\n * \n * With only language, script, and region specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * language/script/region\n * </pre>\n * \n * With only language, region, and variant specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/region\n * region/variant\n * language/region/variant\n * </pre>\n * \n * With all parts specified:<p>\n * \n * <pre>\n * language\n * und/region\n * language/script\n * language/region\n * region/variant\n * language/script/region\n * language/region/variant\n * language/script/region/variant\n * </pre>\n * \n * @static\n * @param {Locale} locale load the files for this locale\n * @param {string?} name the file name of each file to load without\n * any path\n * @return {Array.<string>} An array of relative path names\n * for the files that contain the locale data\n */\n\n\nUtils.getLocFiles = function (locale, name) {\n  var dir = \"\";\n  var files = [];\n  var filename = name || \"resources.json\";\n  var loc = locale || new Locale();\n  var language = loc.getLanguage();\n  var region = loc.getRegion();\n  var script = loc.getScript();\n  var variant = loc.getVariant();\n  files.push(filename); // generic shared file\n\n  if (language) {\n    dir = language + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (region) {\n    dir = \"und/\" + region + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language) {\n    if (script) {\n      dir = language + \"/\" + script + \"/\";\n      files.push(dir + filename);\n    }\n\n    if (region) {\n      dir = language + \"/\" + region + \"/\";\n      files.push(dir + filename);\n    }\n  }\n\n  if (region && variant) {\n    dir = \"und/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && script && region) {\n    dir = language + \"/\" + script + \"/\" + region + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && region && variant) {\n    dir = language + \"/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  if (language && script && region && variant) {\n    dir = language + \"/\" + script + \"/\" + region + \"/\" + variant + \"/\";\n    files.push(dir + filename);\n  }\n\n  return files;\n};\n/**\n * Load data using the new loader object or via the old function callback.\n * @static\n * @private\n */\n\n\nUtils._callLoadData = function (files, sync, params, callback) {\n  // console.log(\"Utils._callLoadData called\");\n  if (typeof ilib._load === 'function') {\n    // console.log(\"Utils._callLoadData: calling as a regular function\");\n    return ilib._load(files, sync, params, callback);\n  } else if (_typeof(ilib._load) === 'object' && typeof ilib._load.loadFiles === 'function') {\n    // console.log(\"Utils._callLoadData: calling as an object\");\n    return ilib._load.loadFiles(files, sync, params, callback);\n  } // console.log(\"Utils._callLoadData: not calling. Type is \" + typeof(ilib._load) + \" and instanceof says \" + (ilib._load instanceof Loader));\n\n\n  return undefined;\n};\n/**\n * Find locale data or load it in. If the data with the given name is preassembled, it will\n * find the data in ilib.data. If the data is not preassembled but there is a loader function,\n * this function will call it to load the data. Otherwise, the callback will be called with\n * undefined as the data. This function will create a cache under the given class object.\n * If data was successfully loaded, it will be set into the cache so that future access to \n * the same data for the same locale is much quicker.<p>\n * \n * The parameters can specify any of the following properties:<p>\n * \n * <ul>\n * <li><i>name</i> - String. The name of the file being loaded. Default: ResBundle.json\n * <li><i>object</i> - String. The name of the class attempting to load data. This is used to differentiate parts of the cache.\n * <li><i>locale</i> - Locale. The locale for which data is loaded. Default is the current locale.\n * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.\n * <li><i>type</i> - String. Type of file to load. This can be \"json\" or \"other\" type. Default: \"json\" \n * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays\n * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent \n * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  \n * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function\n * <li><i>sync</i> - boolean. Whether or not to load the data synchronously\n * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.\n * Data is not returned from this method, so a callback function is mandatory.\n * </ul>\n * \n * @static\n * @param {Object} params Parameters configuring how to load the files (see above)\n */\n\n\nUtils.loadData = function (params) {\n  var name = \"resources.json\",\n      object = \"generic\",\n      locale = new Locale(ilib.getLocale()),\n      sync = false,\n      type = undefined,\n      loadParams = {},\n      callback = undefined,\n      nonlocale = false,\n      replace = false,\n      basename;\n\n  if (!params || typeof params.callback !== 'function') {\n    return;\n  }\n\n  if (params.name) {\n    name = params.name;\n  }\n\n  if (params.object) {\n    object = params.object;\n  }\n\n  if (params.locale) {\n    locale = typeof params.locale === 'string' ? new Locale(params.locale) : params.locale;\n  }\n\n  if (params.type) {\n    type = params.type;\n  }\n\n  if (params.loadParams) {\n    loadParams = params.loadParams;\n  }\n\n  if (params.sync) {\n    sync = params.sync;\n  }\n\n  if (params.nonlocale) {\n    nonlocale = !!params.nonlocale;\n  }\n\n  if (typeof params.replace === 'boolean') {\n    replace = params.replace;\n  }\n\n  callback = params.callback;\n\n  if (object && !ilib.data.cache[object]) {\n    ilib.data.cache[object] = {};\n  }\n\n  if (!type) {\n    var dot = name.lastIndexOf(\".\");\n    type = dot !== -1 ? name.substring(dot + 1) : \"text\";\n  }\n\n  var spec = (!nonlocale && locale.getSpec().replace(/-/g, '_') || \"root\") + \",\" + name + \",\" + String(JSUtils.hashCode(loadParams));\n\n  if (!object || !ilib.data.cache[object] || typeof ilib.data.cache[object][spec] === 'undefined') {\n    var data,\n        returnOne = loadParams && loadParams.returnOne;\n\n    if (type === \"json\") {\n      // console.log(\"type is json\");\n      basename = name.substring(0, name.lastIndexOf(\".\"));\n\n      if (nonlocale) {\n        basename = basename.replace(/[\\.:\\(\\)\\/\\\\\\+\\-]/g, \"_\");\n        data = ilib.data[basename];\n      } else {\n        data = Utils.mergeLocData(basename, locale, replace, returnOne);\n      }\n\n      if (data) {\n        // console.log(\"found assembled data\");\n        if (object) {\n          ilib.data.cache[object][spec] = data;\n        }\n\n        callback(data);\n        return;\n      }\n    } // console.log(\"ilib._load is \" + typeof(ilib._load));\n\n\n    if (typeof ilib._load !== 'undefined') {\n      // the data is not preassembled, so attempt to load it dynamically\n      var files = nonlocale ? [name || \"resources.json\"] : Utils.getLocFiles(locale, name);\n\n      if (type !== \"json\") {\n        loadParams.returnOne = true;\n      }\n\n      Utils._callLoadData(files, sync, loadParams, ilib.bind(this, function (arr) {\n        if (type === \"json\") {\n          data = ilib.data[basename] || {};\n\n          for (var i = 0; i < arr.length; i++) {\n            if (typeof arr[i] !== 'undefined') {\n              if (loadParams.returnOne) {\n                data = arr[i];\n                break;\n              }\n\n              data = JSUtils.merge(data, arr[i], replace);\n            }\n          }\n\n          if (object) {\n            ilib.data.cache[object][spec] = data;\n          }\n\n          callback(data);\n        } else {\n          var i = arr.length - 1;\n\n          while (i > -1 && !arr[i]) {\n            i--;\n          }\n\n          if (i > -1) {\n            if (object) {\n              ilib.data.cache[object][spec] = arr[i];\n            }\n\n            callback(arr[i]);\n          } else {\n            callback(undefined);\n          }\n        }\n      }));\n    } else {\n      // no data other than the generic shared data\n      if (type === \"json\") {\n        data = ilib.data[basename];\n      }\n\n      if (object && data) {\n        ilib.data.cache[object][spec] = data;\n      }\n\n      callback(data);\n    }\n  } else {\n    callback(ilib.data.cache && ilib.data.cache[object] && ilib.data.cache[object][spec]);\n  }\n};\n\nmodule.exports = Utils;"]},"metadata":{},"sourceType":"module"}