{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = void 0;\n\nvar _handle = require(\"@enact/core/handle\");\n/**\n * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;\n *\n * @type {Function[]}\n * @private\n */\n\n\nvar cancelHandlers = [// always support the Escape key\n(0, _handle.forKey)('cancel')];\n/**\n * Event handler compatible with {@link core/handle} that allows the handler chain to\n * continue for any cancel event. A cancel event is an Escape key press by default but can be\n * extended adding additional handlers using\n * {@link ui/Cancelable/cancelHandler.addCancelHandler}.\n *\n * @function\n * @memberof ui/Cancelable\n * @param  {Object} ev Event object\n * @returns {Boolean} `true` to stop the handler chain\n * @private\n */\n\nvar forCancel = function forCancel(ev) {\n  var ok = false;\n  cancelHandlers.forEach(function (fn) {\n    // if any handler returns true, we don't need to call any more\n    ok = ok || fn(ev);\n  });\n  return ok;\n};\n/**\n * Adds an event handler to filter cancel events.\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler\tFunction that will receive the event and should return `true` if\n *\t\t\t\t\t\t\t\tthe event is a cancel event.\n * @returns {undefined}\n * @public\n */\n\n\nexports.forCancel = forCancel;\n\nvar addCancelHandler = function addCancelHandler(handler) {\n  if (cancelHandlers.indexOf(handler) < 0) {\n    cancelHandlers.push(handler);\n  }\n};\n/**\n * Removes an event handler to filter cancel events\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler A previously added filter function\n * @returns {undefined}\n * @public\n */\n\n\nexports.addCancelHandler = addCancelHandler;\n\nvar removeCancelHandler = function removeCancelHandler(handler) {\n  var index = cancelHandlers.indexOf(handler);\n\n  if (index >= 0) {\n    cancelHandlers.splice(index, 1);\n  }\n};\n\nexports.removeCancelHandler = removeCancelHandler;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteAPp\\node_modules\\@enact\\ui\\Cancelable\\cancelHandler.js"],"names":["Object","defineProperty","exports","value","removeCancelHandler","forCancel","addCancelHandler","_handle","require","cancelHandlers","forKey","ev","ok","forEach","fn","handler","indexOf","push","index","splice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,gBAAR,GAA2B,KAAK,CAAlF;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;AAEA;;;;;;;;AAMA,IAAIC,cAAc,GAAG,CAAC;AACtB,CAAC,GAAGF,OAAO,CAACG,MAAZ,EAAoB,QAApB,CADqB,CAArB;AAEA;;;;;;;;;;;;;AAaA,IAAIL,SAAS,GAAG,SAASA,SAAT,CAAmBM,EAAnB,EAAuB;AACrC,MAAIC,EAAE,GAAG,KAAT;AACAH,EAAAA,cAAc,CAACI,OAAf,CAAuB,UAAUC,EAAV,EAAc;AACnC;AACAF,IAAAA,EAAE,GAAGA,EAAE,IAAIE,EAAE,CAACH,EAAD,CAAb;AACD,GAHD;AAIA,SAAOC,EAAP;AACD,CAPD;AAQA;;;;;;;;;;;;AAYAV,OAAO,CAACG,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BS,OAA1B,EAAmC;AACxD,MAAIN,cAAc,CAACO,OAAf,CAAuBD,OAAvB,IAAkC,CAAtC,EAAyC;AACvCN,IAAAA,cAAc,CAACQ,IAAf,CAAoBF,OAApB;AACD;AACF,CAJD;AAKA;;;;;;;;;;;AAWAb,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIF,mBAAmB,GAAG,SAASA,mBAAT,CAA6BW,OAA7B,EAAsC;AAC9D,MAAIG,KAAK,GAAGT,cAAc,CAACO,OAAf,CAAuBD,OAAvB,CAAZ;;AAEA,MAAIG,KAAK,IAAI,CAAb,EAAgB;AACdT,IAAAA,cAAc,CAACU,MAAf,CAAsBD,KAAtB,EAA6B,CAA7B;AACD;AACF,CAND;;AAQAhB,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeCancelHandler = exports.forCancel = exports.addCancelHandler = void 0;\n\nvar _handle = require(\"@enact/core/handle\");\n\n/**\n * Array of cancel handlers. If any of these returns `false`, `forCancel` will return `false`;\n *\n * @type {Function[]}\n * @private\n */\nvar cancelHandlers = [// always support the Escape key\n(0, _handle.forKey)('cancel')];\n/**\n * Event handler compatible with {@link core/handle} that allows the handler chain to\n * continue for any cancel event. A cancel event is an Escape key press by default but can be\n * extended adding additional handlers using\n * {@link ui/Cancelable/cancelHandler.addCancelHandler}.\n *\n * @function\n * @memberof ui/Cancelable\n * @param  {Object} ev Event object\n * @returns {Boolean} `true` to stop the handler chain\n * @private\n */\n\nvar forCancel = function forCancel(ev) {\n  var ok = false;\n  cancelHandlers.forEach(function (fn) {\n    // if any handler returns true, we don't need to call any more\n    ok = ok || fn(ev);\n  });\n  return ok;\n};\n/**\n * Adds an event handler to filter cancel events.\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler\tFunction that will receive the event and should return `true` if\n *\t\t\t\t\t\t\t\tthe event is a cancel event.\n * @returns {undefined}\n * @public\n */\n\n\nexports.forCancel = forCancel;\n\nvar addCancelHandler = function addCancelHandler(handler) {\n  if (cancelHandlers.indexOf(handler) < 0) {\n    cancelHandlers.push(handler);\n  }\n};\n/**\n * Removes an event handler to filter cancel events\n *\n * @function\n * @memberof ui/Cancelable\n * @param {Function} handler A previously added filter function\n * @returns {undefined}\n * @public\n */\n\n\nexports.addCancelHandler = addCancelHandler;\n\nvar removeCancelHandler = function removeCancelHandler(handler) {\n  var index = cancelHandlers.indexOf(handler);\n\n  if (index >= 0) {\n    cancelHandlers.splice(index, 1);\n  }\n};\n\nexports.removeCancelHandler = removeCancelHandler;"]},"metadata":{},"sourceType":"module"}