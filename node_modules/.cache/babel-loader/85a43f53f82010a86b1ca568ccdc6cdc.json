{"ast":null,"code":"\"use strict\";\n/*\n * gregorian.js - Represent a Gregorian calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\n\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Gregorian calendar object. This class encodes information about\n * a Gregorian calendar.<p>\n * \n * \n * @constructor\n * @param {{noinstance:boolean}=} options\n * @extends Calendar\n */\n\n\nvar GregorianCal = function GregorianCal(options) {\n  if (!options || !options.noinstance) {\n    this.type = \"gregorian\";\n  }\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number> \n */\n\n\nGregorianCal.monthLengths = [31,\n/* Jan */\n28,\n/* Feb */\n31,\n/* Mar */\n30,\n/* Apr */\n31,\n/* May */\n30,\n/* Jun */\n31,\n/* Jul */\n31,\n/* Aug */\n30,\n/* Sep */\n31,\n/* Oct */\n30,\n/* Nov */\n31\n/* Dec */\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nGregorianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nGregorianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 2 || !this.isLeapYear(year)) {\n    return GregorianCal.monthLengths[month - 1];\n  } else {\n    return 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Gregorian calendar.\n * The year parameter may be given as a number, or as a GregDate object.\n * @param {number|GregorianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nGregorianCal.prototype.isLeapYear = function (year) {\n  var y = typeof year === 'number' ? year : year.getYears();\n  var centuries = MathUtils.mod(y, 400);\n  return MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nGregorianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"gregorian\"] = GregorianCal;\nmodule.exports = GregorianCal;","map":{"version":3,"sources":["/home/cdi/final/SteApp/node_modules/@enact/i18n/ilib/lib/GregorianCal.js"],"names":["ilib","require","Utils","MathUtils","Calendar","GregorianCal","options","noinstance","type","onLoad","monthLengths","prototype","getNumMonths","year","getMonLength","month","isLeapYear","y","getYears","centuries","mod","getType","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,eAAD,CAAtB;AACA;;;;;;;;;;;;AAYA,IAAII,YAAY,GAAG,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAChD,MAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,UAAzB,EAAqC;AACnC,SAAKC,IAAL,GAAY,WAAZ;AACD;;AAED,MAAIF,OAAO,IAAI,OAAOA,OAAO,CAACG,MAAf,KAA0B,UAAzC,EAAqD;AACnDH,IAAAA,OAAO,CAACG,MAAR,CAAe,IAAf;AACD;AACF,CARD;AASA;;;;;;;;AAQAJ,YAAY,CAACK,YAAb,GAA4B,CAAC,EAAD;AAC5B;AACA,EAF4B;AAG5B;AACA,EAJ4B;AAK5B;AACA,EAN4B;AAO5B;AACA,EAR4B;AAS5B;AACA,EAV4B;AAW5B;AACA,EAZ4B;AAa5B;AACA,EAd4B;AAe5B;AACA,EAhB4B;AAiB5B;AACA,EAlB4B;AAmB5B;AACA,EApB4B;AAqB5B;AACA;AACA;AAvB4B,CAA5B;AAyBA;;;;;;;;;;AAUAL,YAAY,CAACM,SAAb,CAAuBC,YAAvB,GAAsC,UAAUC,IAAV,EAAgB;AACpD,SAAO,EAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAR,YAAY,CAACM,SAAb,CAAuBG,YAAvB,GAAsC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AAC3D,MAAIE,KAAK,KAAK,CAAV,IAAe,CAAC,KAAKC,UAAL,CAAgBH,IAAhB,CAApB,EAA2C;AACzC,WAAOR,YAAY,CAACK,YAAb,CAA0BK,KAAK,GAAG,CAAlC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAND;AAOA;;;;;;;;AAQAV,YAAY,CAACM,SAAb,CAAuBK,UAAvB,GAAoC,UAAUH,IAAV,EAAgB;AAClD,MAAII,CAAC,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACK,QAAL,EAA1C;AACA,MAAIC,SAAS,GAAGhB,SAAS,CAACiB,GAAV,CAAcH,CAAd,EAAiB,GAAjB,CAAhB;AACA,SAAOd,SAAS,CAACiB,GAAV,CAAcH,CAAd,EAAiB,CAAjB,MAAwB,CAAxB,IAA6BE,SAAS,KAAK,GAA3C,IAAkDA,SAAS,KAAK,GAAhE,IAAuEA,SAAS,KAAK,GAA5F;AACD,CAJD;AAKA;;;;;;;AAOAd,YAAY,CAACM,SAAb,CAAuBU,OAAvB,GAAiC,YAAY;AAC3C,SAAO,KAAKb,IAAZ;AACD,CAFD;AAGA;;;AAGAJ,QAAQ,CAACkB,aAAT,CAAuB,WAAvB,IAAsCjB,YAAtC;AACAkB,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["\"use strict\";\n\n/*\n * gregorian.js - Represent a Gregorian calendar object.\n * \n * Copyright © 2012-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\nvar ilib = require(\"./ilib.js\");\n\nvar Utils = require(\"./Utils.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n/**\n * @class\n * Construct a new Gregorian calendar object. This class encodes information about\n * a Gregorian calendar.<p>\n * \n * \n * @constructor\n * @param {{noinstance:boolean}=} options\n * @extends Calendar\n */\n\n\nvar GregorianCal = function GregorianCal(options) {\n  if (!options || !options.noinstance) {\n    this.type = \"gregorian\";\n  }\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * the lengths of each month \n * @private\n * @const\n * @type Array.<number> \n */\n\n\nGregorianCal.monthLengths = [31,\n/* Jan */\n28,\n/* Feb */\n31,\n/* Mar */\n30,\n/* Apr */\n31,\n/* May */\n30,\n/* Jun */\n31,\n/* Jul */\n31,\n/* Aug */\n30,\n/* Sep */\n31,\n/* Oct */\n30,\n/* Nov */\n31\n/* Dec */\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nGregorianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nGregorianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 2 || !this.isLeapYear(year)) {\n    return GregorianCal.monthLengths[month - 1];\n  } else {\n    return 29;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Gregorian calendar.\n * The year parameter may be given as a number, or as a GregDate object.\n * @param {number|GregorianDate} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nGregorianCal.prototype.isLeapYear = function (year) {\n  var y = typeof year === 'number' ? year : year.getYears();\n  var centuries = MathUtils.mod(y, 400);\n  return MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nGregorianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"gregorian\"] = GregorianCal;\nmodule.exports = GregorianCal;"]},"metadata":{},"sourceType":"module"}