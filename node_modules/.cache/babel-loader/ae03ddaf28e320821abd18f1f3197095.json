{"ast":null,"code":"\"use strict\";\n/*\n * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.\n * \n * Copyright © 2014-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nCalendar.js \nPersRataDie.js \nilib.js\nMathUtils.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersRataDie = require(\"./PersRataDie.js\");\n/**\n * @class\n * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes \n * information about a Persian calendar. This class differs from the \n * Persian calendar in that the leap years are calculated based on the\n * astronomical observations of the sun in Teheran, instead of calculating\n * the leap years based on a regular cyclical rhythm algorithm.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar PersianCal = function PersianCal(options) {\n  this.type = \"persian\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\n\n\nPersianCal.monthLengths = [31, // Farvardin\n31, // Ordibehesht\n31, // Khordad\n31, // Tir\n31, // Mordad\n31, // Shahrivar\n30, // Mehr\n30, // Aban\n30, // Azar\n30, // Dey\n30, // Bahman\n29 // Esfand\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nPersianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nPersianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12 || !this.isLeapYear(year)) {\n    return PersianCal.monthLengths[month - 1];\n  } else {\n    // Month 12, Esfand, has 30 days instead of 29 in leap years\n    return 30;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Persian astronomical calendar.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nPersianCal.prototype.isLeapYear = function (year) {\n  var rdNextYear = new PersRataDie({\n    cal: this,\n    year: year + 1,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  var rdThisYear = new PersRataDie({\n    cal: this,\n    year: year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  return rdNextYear.getRataDie() - rdThisYear.getRataDie() > 365;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nPersianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"persian\"] = PersianCal;\nmodule.exports = PersianCal;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\i18n\\ilib\\lib\\PersianCal.js"],"names":["ilib","require","MathUtils","Calendar","PersRataDie","PersianCal","options","type","onLoad","monthLengths","prototype","getNumMonths","year","getMonLength","month","isLeapYear","rdNextYear","cal","day","hour","minute","second","millisecond","rdThisYear","getRataDie","getType","_constructors","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,kBAAD,CAAzB;AACA;;;;;;;;;;;;;;AAcA,IAAII,UAAU,GAAG,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC5C,OAAKC,IAAL,GAAY,SAAZ;;AAEA,MAAID,OAAO,IAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,UAAzC,EAAqD;AACnDF,IAAAA,OAAO,CAACE,MAAR,CAAe,IAAf;AACD;AACF,CAND;AAOA;;;;;;;;AAQAH,UAAU,CAACI,YAAX,GAA0B,CAAC,EAAD,EAAK;AAC/B,EAD0B,EACtB;AACJ,EAF0B,EAEtB;AACJ,EAH0B,EAGtB;AACJ,EAJ0B,EAItB;AACJ,EAL0B,EAKtB;AACJ,EAN0B,EAMtB;AACJ,EAP0B,EAOtB;AACJ,EAR0B,EAQtB;AACJ,EAT0B,EAStB;AACJ,EAV0B,EAUtB;AACJ,EAX0B,CAWvB;AAXuB,CAA1B;AAaA;;;;;;;;;;AAUAJ,UAAU,CAACK,SAAX,CAAqBC,YAArB,GAAoC,UAAUC,IAAV,EAAgB;AAClD,SAAO,EAAP;AACD,CAFD;AAGA;;;;;;;;;;;AAWAP,UAAU,CAACK,SAAX,CAAqBG,YAArB,GAAoC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AACzD,MAAIE,KAAK,KAAK,EAAV,IAAgB,CAAC,KAAKC,UAAL,CAAgBH,IAAhB,CAArB,EAA4C;AAC1C,WAAOP,UAAU,CAACI,YAAX,CAAwBK,KAAK,GAAG,CAAhC,CAAP;AACD,GAFD,MAEO;AACL;AACA,WAAO,EAAP;AACD;AACF,CAPD;AAQA;;;;;;;AAOAT,UAAU,CAACK,SAAX,CAAqBK,UAArB,GAAkC,UAAUH,IAAV,EAAgB;AAChD,MAAII,UAAU,GAAG,IAAIZ,WAAJ,CAAgB;AAC/Ba,IAAAA,GAAG,EAAE,IAD0B;AAE/BL,IAAAA,IAAI,EAAEA,IAAI,GAAG,CAFkB;AAG/BE,IAAAA,KAAK,EAAE,CAHwB;AAI/BI,IAAAA,GAAG,EAAE,CAJ0B;AAK/BC,IAAAA,IAAI,EAAE,CALyB;AAM/BC,IAAAA,MAAM,EAAE,CANuB;AAO/BC,IAAAA,MAAM,EAAE,CAPuB;AAQ/BC,IAAAA,WAAW,EAAE;AARkB,GAAhB,CAAjB;AAUA,MAAIC,UAAU,GAAG,IAAInB,WAAJ,CAAgB;AAC/Ba,IAAAA,GAAG,EAAE,IAD0B;AAE/BL,IAAAA,IAAI,EAAEA,IAFyB;AAG/BE,IAAAA,KAAK,EAAE,CAHwB;AAI/BI,IAAAA,GAAG,EAAE,CAJ0B;AAK/BC,IAAAA,IAAI,EAAE,CALyB;AAM/BC,IAAAA,MAAM,EAAE,CANuB;AAO/BC,IAAAA,MAAM,EAAE,CAPuB;AAQ/BC,IAAAA,WAAW,EAAE;AARkB,GAAhB,CAAjB;AAUA,SAAON,UAAU,CAACQ,UAAX,KAA0BD,UAAU,CAACC,UAAX,EAA1B,GAAoD,GAA3D;AACD,CAtBD;AAuBA;;;;;;;AAOAnB,UAAU,CAACK,SAAX,CAAqBe,OAArB,GAA+B,YAAY;AACzC,SAAO,KAAKlB,IAAZ;AACD,CAFD;AAGA;;;AAGAJ,QAAQ,CAACuB,aAAT,CAAuB,SAAvB,IAAoCrB,UAApC;AACAsB,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["\"use strict\";\n\n/*\n * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.\n * \n * Copyright © 2014-2015,2018, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends \nCalendar.js \nPersRataDie.js \nilib.js\nMathUtils.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar Calendar = require(\"./Calendar.js\");\n\nvar PersRataDie = require(\"./PersRataDie.js\");\n/**\n * @class\n * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes \n * information about a Persian calendar. This class differs from the \n * Persian calendar in that the leap years are calculated based on the\n * astronomical observations of the sun in Teheran, instead of calculating\n * the leap years based on a regular cyclical rhythm algorithm.<p>\n * \n * @param {Object=} options Options governing the construction of this instance\n * @constructor\n * @extends Calendar\n */\n\n\nvar PersianCal = function PersianCal(options) {\n  this.type = \"persian\";\n\n  if (options && typeof options.onLoad === \"function\") {\n    options.onLoad(this);\n  }\n};\n/**\n * @private\n * @const\n * @type Array.<number> \n * the lengths of each month \n */\n\n\nPersianCal.monthLengths = [31, // Farvardin\n31, // Ordibehesht\n31, // Khordad\n31, // Tir\n31, // Mordad\n31, // Shahrivar\n30, // Mehr\n30, // Aban\n30, // Azar\n30, // Dey\n30, // Bahman\n29 // Esfand\n];\n/**\n * Return the number of months in the given year. The number of months in a year varies\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \n * days in a year to an entire solar year. The month is represented as a 1-based number\n * where 1=first month, 2=second month, etc.\n * \n * @param {number} year a year for which the number of months is sought\n * @return {number} The number of months in the given year\n */\n\nPersianCal.prototype.getNumMonths = function (year) {\n  return 12;\n};\n/**\n * Return the number of days in a particular month in a particular year. This function\n * can return a different number for a month depending on the year because of things\n * like leap years.\n * \n * @param {number} month the month for which the length is sought\n * @param {number} year the year within which that month can be found\n * @return {number} the number of days within the given month in the given year\n */\n\n\nPersianCal.prototype.getMonLength = function (month, year) {\n  if (month !== 12 || !this.isLeapYear(year)) {\n    return PersianCal.monthLengths[month - 1];\n  } else {\n    // Month 12, Esfand, has 30 days instead of 29 in leap years\n    return 30;\n  }\n};\n/**\n * Return true if the given year is a leap year in the Persian astronomical calendar.\n * @param {number} year the year for which the leap year information is being sought\n * @return {boolean} true if the given year is a leap year\n */\n\n\nPersianCal.prototype.isLeapYear = function (year) {\n  var rdNextYear = new PersRataDie({\n    cal: this,\n    year: year + 1,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  var rdThisYear = new PersRataDie({\n    cal: this,\n    year: year,\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  });\n  return rdNextYear.getRataDie() - rdThisYear.getRataDie() > 365;\n};\n/**\n * Return the type of this calendar.\n * \n * @return {string} the name of the type of this calendar \n */\n\n\nPersianCal.prototype.getType = function () {\n  return this.type;\n};\n/* register this calendar for the factory method */\n\n\nCalendar._constructors[\"persian\"] = PersianCal;\nmodule.exports = PersianCal;"]},"metadata":{},"sourceType":"module"}