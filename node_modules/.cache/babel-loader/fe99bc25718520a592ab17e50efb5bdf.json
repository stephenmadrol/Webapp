{"ast":null,"code":"\"use strict\";\n/*\n * caseMapper.js - define upper- and lower-case mapper\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends Locale.js IString.js\n\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * @class\n * Create a new string mapper instance that maps strings to upper or\n * lower case. This mapping will work for any string as characters \n * that have no case will be returned unchanged.<p>\n * \n * The options may contain any of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - locale to use when loading the mapper. Some maps are \n * locale-dependent, and this locale selects the right one. Default if this is\n * not specified is the current locale.\n * \n * <li><i>direction</i> - \"toupper\" for upper-casing, or \"tolower\" for lower-casing.\n * Default if not specified is \"toupper\".\n * </ul>\n * \n * \n * @constructor\n * @param {Object=} options options to initialize this mapper \n */\n\n\nvar CaseMapper = function CaseMapper(options) {\n  this.up = true;\n  this.locale = new Locale();\n\n  if (options) {\n    if (typeof options.locale !== 'undefined') {\n      this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    this.up = !options.direction || options.direction === \"toupper\";\n  }\n\n  this.mapData = this.up ? {\n    \"ß\": \"SS\",\n    // German\n    'ΐ': 'Ι',\n    // Greek\n    'ά': 'Α',\n    'έ': 'Ε',\n    'ή': 'Η',\n    'ί': 'Ι',\n    'ΰ': 'Υ',\n    'ϊ': 'Ι',\n    'ϋ': 'Υ',\n    'ό': 'Ο',\n    'ύ': 'Υ',\n    'ώ': 'Ω',\n    'Ӏ': 'Ӏ',\n    // Russian and slavic languages\n    'ӏ': 'Ӏ'\n  } : {\n    'Ӏ': 'Ӏ' // Russian and slavic languages\n\n  };\n\n  switch (this.locale.getLanguage()) {\n    case \"az\":\n    case \"tr\":\n    case \"crh\":\n    case \"kk\":\n    case \"krc\":\n    case \"tt\":\n      var lower = \"iı\";\n      var upper = \"İI\";\n\n      this._setUpMap(lower, upper);\n\n      break;\n  }\n\n  if (ilib._getBrowser() === \"ie\" || ilib._getBrowser() === \"Edge\") {\n    // IE is missing these mappings for some reason\n    if (this.up) {\n      this.mapData['ς'] = 'Σ';\n    }\n\n    this._setUpMap(\"ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ\", \"ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ\"); // Coptic\n    // Georgian Nuskhuri <-> Asomtavruli\n\n\n    this._setUpMap(\"ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\", \"ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\");\n  }\n};\n\nCaseMapper.prototype = {\n  /** \n   * @private \n   */\n  _charMapper: function _charMapper(string) {\n    if (!string) {\n      return string;\n    }\n\n    var input = typeof string === 'string' ? new IString(string) : string.toString();\n    var ret = \"\";\n    var it = input.charIterator();\n    var c;\n\n    while (it.hasNext()) {\n      c = it.next();\n\n      if (!this.up && c === 'Σ') {\n        if (it.hasNext()) {\n          c = it.next();\n          var code = c.charCodeAt(0); // if the next char is not a greek letter, this is the end of the word so use the\n          // final form of sigma. Otherwise, use the mid-word form.\n\n          ret += code < 0x0388 && code !== 0x0386 || code > 0x03CE ? 'ς' : 'σ';\n          ret += c.toLowerCase();\n        } else {\n          // no next char means this is the end of the word, so use the final form of sigma\n          ret += 'ς';\n        }\n      } else {\n        if (this.mapData[c]) {\n          ret += this.mapData[c];\n        } else {\n          ret += this.up ? c.toUpperCase() : c.toLowerCase();\n        }\n      }\n    }\n\n    return ret;\n  },\n\n  /** @private */\n  _setUpMap: function _setUpMap(lower, upper) {\n    var from, to;\n\n    if (this.up) {\n      from = lower;\n      to = upper;\n    } else {\n      from = upper;\n      to = lower;\n    }\n\n    for (var i = 0; i < upper.length; i++) {\n      this.mapData[from[i]] = to[i];\n    }\n  },\n\n  /**\n   * Return the locale that this mapper was constructed with. \n   * @returns {Locale} the locale that this mapper was constructed with\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /**\n   * Map a string to lower case in a locale-sensitive manner.\n   * \n   * @param {string|undefined} string\n   * @return {string|undefined}\n   */\n  map: function map(string) {\n    return this._charMapper(string);\n  }\n};\nmodule.exports = CaseMapper;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/CaseMapper.js"],"names":["ilib","require","Locale","IString","CaseMapper","options","up","locale","direction","mapData","getLanguage","lower","upper","_setUpMap","_getBrowser","prototype","_charMapper","string","input","toString","ret","it","charIterator","c","hasNext","next","code","charCodeAt","toLowerCase","toUpperCase","from","to","i","length","getLocale","map","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * caseMapper.js - define upper- and lower-case mapper\n * \n * Copyright © 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// !depends Locale.js IString.js\nvar ilib = require(\"./ilib.js\");\n\nvar Locale = require(\"./Locale.js\");\n\nvar IString = require(\"./IString.js\");\n/**\n * @class\n * Create a new string mapper instance that maps strings to upper or\n * lower case. This mapping will work for any string as characters \n * that have no case will be returned unchanged.<p>\n * \n * The options may contain any of the following properties:\n * \n * <ul>\n * <li><i>locale</i> - locale to use when loading the mapper. Some maps are \n * locale-dependent, and this locale selects the right one. Default if this is\n * not specified is the current locale.\n * \n * <li><i>direction</i> - \"toupper\" for upper-casing, or \"tolower\" for lower-casing.\n * Default if not specified is \"toupper\".\n * </ul>\n * \n * \n * @constructor\n * @param {Object=} options options to initialize this mapper \n */\n\n\nvar CaseMapper = function CaseMapper(options) {\n  this.up = true;\n  this.locale = new Locale();\n\n  if (options) {\n    if (typeof options.locale !== 'undefined') {\n      this.locale = typeof options.locale === 'string' ? new Locale(options.locale) : options.locale;\n    }\n\n    this.up = !options.direction || options.direction === \"toupper\";\n  }\n\n  this.mapData = this.up ? {\n    \"ß\": \"SS\",\n    // German\n    'ΐ': 'Ι',\n    // Greek\n    'ά': 'Α',\n    'έ': 'Ε',\n    'ή': 'Η',\n    'ί': 'Ι',\n    'ΰ': 'Υ',\n    'ϊ': 'Ι',\n    'ϋ': 'Υ',\n    'ό': 'Ο',\n    'ύ': 'Υ',\n    'ώ': 'Ω',\n    'Ӏ': 'Ӏ',\n    // Russian and slavic languages\n    'ӏ': 'Ӏ'\n  } : {\n    'Ӏ': 'Ӏ' // Russian and slavic languages\n\n  };\n\n  switch (this.locale.getLanguage()) {\n    case \"az\":\n    case \"tr\":\n    case \"crh\":\n    case \"kk\":\n    case \"krc\":\n    case \"tt\":\n      var lower = \"iı\";\n      var upper = \"İI\";\n\n      this._setUpMap(lower, upper);\n\n      break;\n  }\n\n  if (ilib._getBrowser() === \"ie\" || ilib._getBrowser() === \"Edge\") {\n    // IE is missing these mappings for some reason\n    if (this.up) {\n      this.mapData['ς'] = 'Σ';\n    }\n\n    this._setUpMap(\"ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ\", \"ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ\"); // Coptic\n    // Georgian Nuskhuri <-> Asomtavruli\n\n\n    this._setUpMap(\"ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\", \"ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\");\n  }\n};\n\nCaseMapper.prototype = {\n  /** \n   * @private \n   */\n  _charMapper: function _charMapper(string) {\n    if (!string) {\n      return string;\n    }\n\n    var input = typeof string === 'string' ? new IString(string) : string.toString();\n    var ret = \"\";\n    var it = input.charIterator();\n    var c;\n\n    while (it.hasNext()) {\n      c = it.next();\n\n      if (!this.up && c === 'Σ') {\n        if (it.hasNext()) {\n          c = it.next();\n          var code = c.charCodeAt(0); // if the next char is not a greek letter, this is the end of the word so use the\n          // final form of sigma. Otherwise, use the mid-word form.\n\n          ret += code < 0x0388 && code !== 0x0386 || code > 0x03CE ? 'ς' : 'σ';\n          ret += c.toLowerCase();\n        } else {\n          // no next char means this is the end of the word, so use the final form of sigma\n          ret += 'ς';\n        }\n      } else {\n        if (this.mapData[c]) {\n          ret += this.mapData[c];\n        } else {\n          ret += this.up ? c.toUpperCase() : c.toLowerCase();\n        }\n      }\n    }\n\n    return ret;\n  },\n\n  /** @private */\n  _setUpMap: function _setUpMap(lower, upper) {\n    var from, to;\n\n    if (this.up) {\n      from = lower;\n      to = upper;\n    } else {\n      from = upper;\n      to = lower;\n    }\n\n    for (var i = 0; i < upper.length; i++) {\n      this.mapData[from[i]] = to[i];\n    }\n  },\n\n  /**\n   * Return the locale that this mapper was constructed with. \n   * @returns {Locale} the locale that this mapper was constructed with\n   */\n  getLocale: function getLocale() {\n    return this.locale;\n  },\n\n  /**\n   * Map a string to lower case in a locale-sensitive manner.\n   * \n   * @param {string|undefined} string\n   * @return {string|undefined}\n   */\n  map: function map(string) {\n    return this._charMapper(string);\n  }\n};\nmodule.exports = CaseMapper;"]},"metadata":{},"sourceType":"module"}