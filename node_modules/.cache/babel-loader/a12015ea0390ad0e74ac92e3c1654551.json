{"ast":null,"code":"\"use strict\";\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlwaysViewingPanels = exports[\"default\"] = void 0;\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Viewport = _interopRequireDefault(require(\"./Viewport\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * Calculates the number of breadcrumbs that would fit in half of the viewport\n *\n * @param {Number} viewportWidth inner width of the viewport (usually the window)\n * @param {Number} width         width of a breadcrumb\n *\n * @returns {Number} Number of breadcrumbs that can completely fit in that space\n * @private\n */\n\n\nvar calcMax = function calcMax() {\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object') {\n    return Math.floor(window.innerWidth / 2 / (0, _resolution.scale)(_Breadcrumb.breadcrumbWidth));\n  }\n};\n/**\n * An instance of [`Panels`]{@link moonstone/Panels.Panels} which restricts the `Panel` to the right\n * half of the screen with the left half used for breadcrumbs that allow navigating to previous\n * panels. Typically used for overlaying panels over a screen.\n *\n * @class AlwaysViewingPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\n\nvar AlwaysViewingPanels = (0, _Skinnable[\"default\"])((0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels alwaysViewing enact-fit',\n  max: calcMax,\n  panelArranger: _Arrangers.AlwaysViewingArranger\n}, _Viewport[\"default\"]));\nexports.AlwaysViewingPanels = AlwaysViewingPanels;\nvar _default = AlwaysViewingPanels;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["F:\\books\\vscode\\enact\\final\\SteApp\\node_modules\\@enact\\moonstone\\Panels\\AlwaysViewingPanels.js"],"names":["Object","defineProperty","exports","value","AlwaysViewingPanels","_resolution","require","_Skinnable","_interopRequireDefault","_Arrangers","_Breadcrumb","_BreadcrumbDecorator","_Viewport","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","calcMax","window","Math","floor","innerWidth","scale","breadcrumbWidth","className","max","panelArranger","AlwaysViewingArranger","_default"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAAxD;;AAEA,IAAIG,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAAzB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAvC;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAIK,oBAAoB,GAAGH,sBAAsB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAAjD;;AAEA,IAAIM,SAAS,GAAGJ,sBAAsB,CAACF,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,SAASE,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASE,OAAT,CAAiBF,GAAjB,EAAsB;AAAE,MAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgC,SAAOA,MAAM,CAACC,QAAd,MAA2B,QAA/D,EAAyE;AAAEF,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBF,GAAjB,EAAsB;AAAE,sBAAcA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAEE,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBF,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOG,MAAP,KAAkB,UAAzB,IAAuCH,GAAG,CAACK,WAAJ,KAAoBF,MAA3D,IAAqEH,GAAG,KAAKG,MAAM,CAACG,SAApF,GAAgG,QAAhG,YAAkHN,GAAlH,CAAP;AAA+H,KAAjK;AAAoK;;AAAC,SAAOE,OAAO,CAACF,GAAD,CAAd;AAAsB;AAE/V;;;;;;;;;;;AASA,IAAIO,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/B,MAAI,CAAC,OAAOC,MAAP,KAAkB,WAAlB,GAAgC,WAAhC,GAA8CN,OAAO,CAACM,MAAD,CAAtD,MAAoE,QAAxE,EAAkF;AAChF,WAAOC,IAAI,CAACC,KAAL,CAAWF,MAAM,CAACG,UAAP,GAAoB,CAApB,GAAwB,CAAC,GAAGnB,WAAW,CAACoB,KAAhB,EAAuBf,WAAW,CAACgB,eAAnC,CAAnC,CAAP;AACD;AACF,CAJD;AAKA;;;;;;;;;;;;AAYA,IAAItB,mBAAmB,GAAG,CAAC,GAAGG,UAAU,CAAC,SAAD,CAAd,EAA2B,CAAC,GAAGI,oBAAoB,CAAC,SAAD,CAAxB,EAAqC;AACxFgB,EAAAA,SAAS,EAAE,gCAD6E;AAExFC,EAAAA,GAAG,EAAER,OAFmF;AAGxFS,EAAAA,aAAa,EAAEpB,UAAU,CAACqB;AAH8D,CAArC,EAIlDlB,SAAS,CAAC,SAAD,CAJyC,CAA3B,CAA1B;AAKAV,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACA,IAAI2B,QAAQ,GAAG3B,mBAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqB6B,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlwaysViewingPanels = exports[\"default\"] = void 0;\n\nvar _resolution = require(\"@enact/ui/resolution\");\n\nvar _Skinnable = _interopRequireDefault(require(\"../Skinnable\"));\n\nvar _Arrangers = require(\"./Arrangers\");\n\nvar _Breadcrumb = require(\"./Breadcrumb\");\n\nvar _BreadcrumbDecorator = _interopRequireDefault(require(\"./BreadcrumbDecorator\"));\n\nvar _Viewport = _interopRequireDefault(require(\"./Viewport\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Calculates the number of breadcrumbs that would fit in half of the viewport\n *\n * @param {Number} viewportWidth inner width of the viewport (usually the window)\n * @param {Number} width         width of a breadcrumb\n *\n * @returns {Number} Number of breadcrumbs that can completely fit in that space\n * @private\n */\nvar calcMax = function calcMax() {\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object') {\n    return Math.floor(window.innerWidth / 2 / (0, _resolution.scale)(_Breadcrumb.breadcrumbWidth));\n  }\n};\n/**\n * An instance of [`Panels`]{@link moonstone/Panels.Panels} which restricts the `Panel` to the right\n * half of the screen with the left half used for breadcrumbs that allow navigating to previous\n * panels. Typically used for overlaying panels over a screen.\n *\n * @class AlwaysViewingPanels\n * @memberof moonstone/Panels\n * @ui\n * @public\n */\n\n\nvar AlwaysViewingPanels = (0, _Skinnable[\"default\"])((0, _BreadcrumbDecorator[\"default\"])({\n  className: 'panels alwaysViewing enact-fit',\n  max: calcMax,\n  panelArranger: _Arrangers.AlwaysViewingArranger\n}, _Viewport[\"default\"]));\nexports.AlwaysViewingPanels = AlwaysViewingPanels;\nvar _default = AlwaysViewingPanels;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}