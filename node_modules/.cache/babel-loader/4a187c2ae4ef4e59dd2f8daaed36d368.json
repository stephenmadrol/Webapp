{"ast":null,"code":"import { onWindowReady } from '@enact/core/snapshot';\nimport { error } from '@enact/webos/pmloglib'; // Logs any uncaught exceptions to the system logs for future troubleshooting. Payload can be\n// customized by the application for its particular requirements.\n\nvar handleError = function handleError(ev) {\n  var stack = ev.error && ev.error.stack || null;\n\n  if (stack && stack.length > 512) {\n    // JSON must be limitted to 1024 characters so we truncate the stack to 512 for safety\n    stack = ev.error.stack.substring(0, 512);\n  }\n\n  error('app.onerror', {\n    message: ev.message,\n    url: ev.filename,\n    line: ev.lineno,\n    column: ev.colno,\n    stack: stack\n  }, ''); // Calling preventDefault() will avoid logging the error to the console\n  // ev.preventDefault();\n};\n\nonWindowReady(function () {\n  window.addEventListener('error', handleError);\n});","map":{"version":3,"sources":["/home/cdi/stephen/src/App/attachErrorHandler.js"],"names":["onWindowReady","error","handleError","ev","stack","length","substring","message","url","filename","line","lineno","column","colno","window","addEventListener"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,sBAA5B;AACA,SAAQC,KAAR,QAAoB,uBAApB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAQ;AAC3B,MAAIC,KAAK,GAAGD,EAAE,CAACF,KAAH,IAAYE,EAAE,CAACF,KAAH,CAASG,KAArB,IAA8B,IAA1C;;AAEA,MAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,GAA5B,EAAiC;AAChC;AACAD,IAAAA,KAAK,GAAGD,EAAE,CAACF,KAAH,CAASG,KAAT,CAAeE,SAAf,CAAyB,CAAzB,EAA4B,GAA5B,CAAR;AACA;;AAEDL,EAAAA,KAAK,CAAC,aAAD,EAAgB;AACpBM,IAAAA,OAAO,EAAEJ,EAAE,CAACI,OADQ;AAEpBC,IAAAA,GAAG,EAAEL,EAAE,CAACM,QAFY;AAGpBC,IAAAA,IAAI,EAAEP,EAAE,CAACQ,MAHW;AAIpBC,IAAAA,MAAM,EAAET,EAAE,CAACU,KAJS;AAKpBT,IAAAA,KAAK,EAALA;AALoB,GAAhB,EAMF,EANE,CAAL,CAR2B,CAgB3B;AACA;AACA,CAlBD;;AAoBAJ,aAAa,CAAC,YAAM;AACnBc,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCb,WAAjC;AACA,CAFY,CAAb","sourcesContent":["import {onWindowReady} from '@enact/core/snapshot'\nimport {error} from '@enact/webos/pmloglib';\n\n// Logs any uncaught exceptions to the system logs for future troubleshooting. Payload can be\n// customized by the application for its particular requirements.\nconst handleError = (ev) => {\n\tlet stack = ev.error && ev.error.stack || null;\n\n\tif (stack && stack.length > 512) {\n\t\t// JSON must be limitted to 1024 characters so we truncate the stack to 512 for safety\n\t\tstack = ev.error.stack.substring(0, 512);\n\t}\n\n\terror('app.onerror', {\n\t\tmessage: ev.message,\n\t\turl: ev.filename,\n\t\tline: ev.lineno,\n\t\tcolumn: ev.colno,\n\t\tstack\n\t}, '');\n\n\t// Calling preventDefault() will avoid logging the error to the console\n\t// ev.preventDefault();\n};\n\nonWindowReady(() => {\n\twindow.addEventListener('error', handleError);\n});\n\n"]},"metadata":{},"sourceType":"module"}