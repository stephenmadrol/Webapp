{"ast":null,"code":"\"use strict\";\n/*\n * HanDate.js - Represent a date in the Han algorithmic calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nHanCal.js\nMathUtils.js\nRataDie.js\n*/\n\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar HanCal = require(\"./HanCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * Construct a new Han RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @class\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date\n */\n\n\nvar HanRataDie = function HanRataDie(params) {\n  this.rd = NaN;\n\n  if (params && params.cal) {\n    this.cal = params.cal;\n    RataDie.call(this, params);\n\n    if (params && typeof params.callback === 'function') {\n      params.callback(this);\n    }\n  } else {\n    new HanCal({\n      sync: params && params.sync,\n      loadParams: params && params.loadParams,\n      onLoad: ilib.bind(this, function (c) {\n        this.cal = c;\n        RataDie.call(this, params);\n\n        if (params && typeof params.callback === 'function') {\n          params.callback(this);\n        }\n      })\n    });\n  }\n};\n\nHanRataDie.prototype = new RataDie();\nHanRataDie.prototype.parent = RataDie;\nHanRataDie.prototype.constructor = HanRataDie;\n/**\n * The difference between a zero Julian day and the first Han date\n * which is February 15, -2636 (Gregorian).\n * @private\n * @type number\n */\n\nHanRataDie.epoch = 758325.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nHanRataDie.prototype._setDateComponents = function (date) {\n  var calc = HanCal._leapYearCalc(date.year, date.cycle);\n\n  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);\n\n  var newYears;\n  this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\n  if (this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) {\n    newYears = HanCal._newMoonOnOrAfter(m2 + 1);\n  } else {\n    newYears = m2;\n  }\n\n  var priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day\n\n\n  this.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(priorNewMoon));\n  this.leapMonth = this.leapYear && HanCal._noMajorST(priorNewMoon) && !this.priorLeapMonth;\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  console.log(\"getRataDie: converting \" +  JSON.stringify(date) + \" to an RD\");\n  console.log(\"getRataDie: year is \" +  date.year + \" plus cycle \" + date.cycle);\n  console.log(\"getRataDie: isLeapYear is \" +  this.leapYear);\n  console.log(\"getRataDie: priorNewMoon is \" +  priorNewMoon);\n  console.log(\"getRataDie: day in month is \" +  date.day);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (priorNewMoon + date.day - 1 + rdtime));\n  */\n\n  this.rd = priorNewMoon + date.day - 1 + rdtime - RataDie.gregorianEpoch;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nHanRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n/**\n * @protected\n * @static\n * @param {number} jd1 first julian day\n * @param {number} jd2 second julian day\n * @returns {boolean} true if there is a leap month earlier in the same year \n * as the given months \n */\n\n\nHanRataDie._priorLeapMonth = function (jd1, jd2) {\n  return jd2 >= jd1 && (HanRataDie._priorLeapMonth(jd1, HanCal._newMoonBefore(jd2)) || HanCal._noMajorST(jd2));\n};\n\nmodule.exports = HanRataDie;","map":{"version":3,"sources":["/home/cdi/SteApp/node_modules/@enact/i18n/ilib/lib/HanRataDie.js"],"names":["ilib","require","MathUtils","HanCal","RataDie","HanRataDie","params","rd","NaN","cal","call","callback","sync","loadParams","onLoad","bind","c","prototype","parent","constructor","epoch","_setDateComponents","date","calc","_leapYearCalc","year","cycle","m2","_newMoonOnOrAfter","m1","newYears","leapYear","Math","round","_noMajorST","priorNewMoon","month","priorLeapMonth","_priorLeapMonth","_newMoonBefore","leapMonth","rdtime","hour","minute","second","millisecond","day","gregorianEpoch","_onOrBefore","dayOfWeek","mod","floor","jd1","jd2","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n * HanDate.js - Represent a date in the Han algorithmic calendar\n * \n * Copyright Â© 2014-2015, JEDLSoft\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !depends\nilib.js\nHanCal.js\nMathUtils.js\nRataDie.js\n*/\nvar ilib = require(\"./ilib.js\");\n\nvar MathUtils = require(\"./MathUtils.js\");\n\nvar HanCal = require(\"./HanCal.js\");\n\nvar RataDie = require(\"./RataDie.js\");\n/**\n * Construct a new Han RD date number object. The constructor parameters can \n * contain any of the following properties:\n * \n * <ul>\n * <li><i>unixtime<i> - sets the time of this instance according to the given \n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\n * \n * <li><i>julianday</i> - sets the time of this instance according to the given\n * Julian Day instance or the Julian Day given as a float\n * \n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \n * linear count of years since the beginning of the epoch, much like other calendars. This linear\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \n * to 60 and treated as if it were a year in the regular 60-year cycle.\n * \n * <li><i>year</i> - any integer, including 0\n * \n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\n * \n * <li><i>day</i> - 1 to 31\n * \n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \n * is always done with an unambiguous 24 hour representation\n * \n * <li><i>minute</i> - 0 to 59\n * \n * <li><i>second</i> - 0 to 59\n * \n * <li><i>millisecond</i> - 0 to 999\n * \n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\n * </ul>\n *\n * If the constructor is called with another Han date instance instead of\n * a parameter block, the other instance acts as a parameter block and its\n * settings are copied into the current instance.<p>\n * \n * If the constructor is called with no arguments at all or if none of the \n * properties listed above are present, then the RD is calculate based on \n * the current date at the time of instantiation. <p>\n * \n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\n * specified in the params, it is assumed that they have the smallest possible\n * value in the range for the property (zero or one).<p>\n * \n * \n * @private\n * @class\n * @constructor\n * @extends RataDie\n * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date\n */\n\n\nvar HanRataDie = function HanRataDie(params) {\n  this.rd = NaN;\n\n  if (params && params.cal) {\n    this.cal = params.cal;\n    RataDie.call(this, params);\n\n    if (params && typeof params.callback === 'function') {\n      params.callback(this);\n    }\n  } else {\n    new HanCal({\n      sync: params && params.sync,\n      loadParams: params && params.loadParams,\n      onLoad: ilib.bind(this, function (c) {\n        this.cal = c;\n        RataDie.call(this, params);\n\n        if (params && typeof params.callback === 'function') {\n          params.callback(this);\n        }\n      })\n    });\n  }\n};\n\nHanRataDie.prototype = new RataDie();\nHanRataDie.prototype.parent = RataDie;\nHanRataDie.prototype.constructor = HanRataDie;\n/**\n * The difference between a zero Julian day and the first Han date\n * which is February 15, -2636 (Gregorian).\n * @private\n * @type number\n */\n\nHanRataDie.epoch = 758325.5;\n/**\n * Calculate the Rata Die (fixed day) number of the given date from the\n * date components.\n *\n * @protected\n * @param {Object} date the date components to calculate the RD from\n */\n\nHanRataDie.prototype._setDateComponents = function (date) {\n  var calc = HanCal._leapYearCalc(date.year, date.cycle);\n\n  var m2 = HanCal._newMoonOnOrAfter(calc.m1 + 1);\n\n  var newYears;\n  this.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\n\n  if (this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) {\n    newYears = HanCal._newMoonOnOrAfter(m2 + 1);\n  } else {\n    newYears = m2;\n  }\n\n  var priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day\n\n\n  this.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(priorNewMoon));\n  this.leapMonth = this.leapYear && HanCal._noMajorST(priorNewMoon) && !this.priorLeapMonth;\n  var rdtime = (date.hour * 3600000 + date.minute * 60000 + date.second * 1000 + date.millisecond) / 86400000;\n  /*\n  console.log(\"getRataDie: converting \" +  JSON.stringify(date) + \" to an RD\");\n  console.log(\"getRataDie: year is \" +  date.year + \" plus cycle \" + date.cycle);\n  console.log(\"getRataDie: isLeapYear is \" +  this.leapYear);\n  console.log(\"getRataDie: priorNewMoon is \" +  priorNewMoon);\n  console.log(\"getRataDie: day in month is \" +  date.day);\n  console.log(\"getRataDie: rdtime is \" +  rdtime);\n  console.log(\"getRataDie: rd is \" +  (priorNewMoon + date.day - 1 + rdtime));\n  */\n\n  this.rd = priorNewMoon + date.day - 1 + rdtime - RataDie.gregorianEpoch;\n};\n/**\n * Return the rd number of the particular day of the week on or before the \n * given rd. eg. The Sunday on or before the given rd.\n * @private\n * @param {number} rd the rata die date of the reference date\n * @param {number} dayOfWeek the day of the week that is being sought relative \n * to the current date\n * @return {number} the rd of the day of the week\n */\n\n\nHanRataDie.prototype._onOrBefore = function (rd, dayOfWeek) {\n  return rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\n};\n/**\n * @protected\n * @static\n * @param {number} jd1 first julian day\n * @param {number} jd2 second julian day\n * @returns {boolean} true if there is a leap month earlier in the same year \n * as the given months \n */\n\n\nHanRataDie._priorLeapMonth = function (jd1, jd2) {\n  return jd2 >= jd1 && (HanRataDie._priorLeapMonth(jd1, HanCal._newMoonBefore(jd2)) || HanCal._noMajorST(jd2));\n};\n\nmodule.exports = HanRataDie;"]},"metadata":{},"sourceType":"module"}