"use strict";

var _Pause = _interopRequireWildcard(require("../Pause"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var PAUSED = 'Paused';
var NOT_PAUSED = 'Not Paused';
describe('Pause', function () {
  test('should pause spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    subject.resume();
    expect(actual).toBe(expected);
  });
  test('should resume spotlight', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    subject.resume();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
  test('should not resume spotlight when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when another Paused instance is in control', function () {
    var subject = new _Pause["default"]();
    var another = new _Pause["default"]();
    another.pause();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    another.resume();
    expect(actual).toBe(expected);
  });
  test('should not report paused when the global Spotlight is paused', function () {
    var subject = new _Pause["default"]();
    (0, _Pause.pause)();
    subject.pause();
    var expected = NOT_PAUSED;
    var actual = subject.isPaused() ? PAUSED : NOT_PAUSED;
    (0, _Pause.resume)();
    expect(actual).toBe(expected);
  });
  test('should allow the global Spotlight to resume', function () {
    var subject = new _Pause["default"]();
    subject.pause();
    (0, _Pause.resume)();
    var expected = NOT_PAUSED;
    var actual = (0, _Pause.isPaused)() ? PAUSED : NOT_PAUSED;
    expect(actual).toBe(expected);
  });
});