"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _spotlight = _interopRequireDefault(require("../../src/spotlight"));

var _pointer = require("../../src/pointer");

var _SpotlightContainerDecorator = _interopRequireDefault(require("../SpotlightContainerDecorator"));

var _ElementPrototype = _interopRequireDefault(require("./Element.prototype.closest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('SpotlightContainerDecorator', function () {
  var hoverPosition = {
    clientX: 0,
    clientY: 1
  };
  var unhoverPosition = {
    clientX: 0,
    clientY: 0
  };

  var Div = function Div(props) {
    return _react["default"].createElement("div", props);
  };

  (0, _ElementPrototype["default"])(beforeAll, afterAll);
  beforeEach(function () {
    _spotlight["default"].setActiveContainer(null);

    (0, _pointer.updatePointerPosition)(0, 0);
  });
  test('should set itself as the active container on mouse enter', function () {
    var Component = (0, _SpotlightContainerDecorator["default"])(Div);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      spotlightId: "test-container"
    }));
    subject.find(Div).prop('onMouseEnter')(hoverPosition);
    var expected = 'test-container';

    var actual = _spotlight["default"].getActiveContainer();

    expect(actual).toBe(expected);
  });
  test('should set active container to parent container on mouse leave', function () {
    var Component = (0, _SpotlightContainerDecorator["default"])(Div);
    var node = document.createElement('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      spotlightId: "outer-container"
    }, _react["default"].createElement(Component, {
      spotlightId: "inner-container"
    })), {
      attachTo: node
    });
    var selector = 'div[data-spotlight-id="inner-container"]';
    var innerWrapper = subject.find(selector);
    var innerNode = node.querySelector(selector); // set inner-container as active

    innerWrapper.prop('onMouseEnter')(hoverPosition);
    (0, _pointer.updatePointerPosition)(0, 1); // leave inner-container

    innerWrapper.prop('onMouseLeave')(_objectSpread({}, unhoverPosition, {
      currentTarget: innerNode
    }));
    var expected = 'outer-container';

    var actual = _spotlight["default"].getActiveContainer();

    expect(actual).toBe(expected);
  });
  test('should not set active container on mouse leave if another container is active', function () {
    var Component = (0, _SpotlightContainerDecorator["default"])(Div);
    var node = document.createElement('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      spotlightId: "outer-container"
    }, _react["default"].createElement(Component, {
      spotlightId: "inner-container"
    }), _react["default"].createElement(Component, {
      spotlightId: "self-only-container"
    })), {
      attachTo: node
    });
    var selector = 'div[data-spotlight-id="inner-container"]';
    var innerWrapper = subject.find(selector);
    var innerNode = node.querySelector(selector); // set inner-container as active

    innerWrapper.prop('onMouseEnter')(hoverPosition);
    (0, _pointer.updatePointerPosition)(0, 1); // set another container to be active

    _spotlight["default"].setActiveContainer('self-only-container'); // leave inner-container


    innerWrapper.prop('onMouseLeave')(_objectSpread({}, unhoverPosition, {
      currentTarget: innerNode
    }));
    var expected = 'self-only-container';

    var actual = _spotlight["default"].getActiveContainer();

    expect(actual).toBe(expected);
  });
});