"use strict";

var _navigate = _interopRequireDefault(require("../navigate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// loose copy from utils/getRect to fabricate a rect for navigation
function getRect(top, left, height, width, elem) {
  var rect = {
    left: left,
    top: top,
    width: width,
    height: height
  };
  rect.element = elem;
  rect.right = rect.left + rect.width;
  rect.bottom = rect.top + rect.height;
  rect.center = {
    x: rect.left + Math.floor(rect.width / 2),
    y: rect.top + Math.floor(rect.height / 2)
  };
  rect.center.left = rect.center.right = rect.center.x;
  rect.center.top = rect.center.bottom = rect.center.y;
  return rect;
}

describe('navigate', function () {
  test('should return the element above when direction="up"', function () {
    var targetRect = getRect(100, 100, 10, 10);
    var rects = [[100, 110, 10, 10, 'right'], [100, 90, 10, 10, 'left'], [90, 100, 10, 10, 'above'], [110, 100, 10, 10, 'below']].map(function (args) {
      return getRect.apply(void 0, _toConsumableArray(args));
    });
    var expected = 'above';
    var actual = (0, _navigate["default"])(targetRect, 'up', rects, {});
    expect(actual).toBe(expected);
  });
  test('should return the element to the left when direction="left"', function () {
    var targetRect = getRect(100, 100, 10, 10);
    var rects = [[100, 110, 10, 10, 'right'], [100, 90, 10, 10, 'left'], [90, 100, 10, 10, 'above'], [110, 100, 10, 10, 'below']].map(function (args) {
      return getRect.apply(void 0, _toConsumableArray(args));
    });
    var expected = 'left';
    var actual = (0, _navigate["default"])(targetRect, 'left', rects, {});
    expect(actual).toBe(expected);
  });
  test('should return the element below when direction="down"', function () {
    var targetRect = getRect(100, 100, 10, 10);
    var rects = [[100, 110, 10, 10, 'right'], [100, 90, 10, 10, 'left'], [90, 100, 10, 10, 'above'], [110, 100, 10, 10, 'below']].map(function (args) {
      return getRect.apply(void 0, _toConsumableArray(args));
    });
    var expected = 'below';
    var actual = (0, _navigate["default"])(targetRect, 'down', rects, {});
    expect(actual).toBe(expected);
  });
  test('should return the element to the right when direction="right"', function () {
    var targetRect = getRect(100, 100, 10, 10);
    var rects = [[100, 110, 10, 10, 'right'], [100, 90, 10, 10, 'left'], [90, 100, 10, 10, 'above'], [110, 100, 10, 10, 'below']].map(function (args) {
      return getRect.apply(void 0, _toConsumableArray(args));
    });
    var expected = 'right';
    var actual = (0, _navigate["default"])(targetRect, 'right', rects, {});
    expect(actual).toBe(expected);
  });
  test('should return the element "under" when its center is nearest in that direction', function () {
    var targetRect = getRect(105, 100, 10, 10);
    var rects = [[100, 110, 10, 10, 'right'], [100, 90, 10, 10, 'left'], [90, 90, 30, 30, 'under'], // completely contains the targetRect
    [110, 100, 10, 10, 'below']].map(function (args) {
      return getRect.apply(void 0, _toConsumableArray(args));
    });
    expect((0, _navigate["default"])(targetRect, 'up', rects, {})).toBe('under');
    expect((0, _navigate["default"])(targetRect, 'down', rects, {})).toBe('below');
    expect((0, _navigate["default"])(targetRect, 'left', rects, {})).toBe('left');
    expect((0, _navigate["default"])(targetRect, 'right', rects, {})).toBe('right');
  });
});