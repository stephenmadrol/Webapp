"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spottableClass = exports.Spottable = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _keymap = require("@enact/core/keymap");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _container = require("../src/container");

var _pointer = require("../src/pointer");

var _spotlight = require("../src/spotlight");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * The class name for spottable components. In general, you do not need to directly access this class
 *
 * @memberof spotlight/Spottable
 * @public
 */
var spottableClass = 'spottable';
exports.spottableClass = spottableClass;
var ENTER_KEY = 13;
var REMOTE_OK_KEY = 16777221;

var isKeyboardAccessible = function isKeyboardAccessible(node) {
  if (!node) return false;
  var name = node.nodeName.toUpperCase();
  var type = node.type ? node.type.toUpperCase() : null;
  return name === 'BUTTON' || name === 'A' || name === 'INPUT' && (type === 'BUTTON' || type === 'CHECKBOX' || type === 'IMAGE' || type === 'RADIO' || type === 'RESET' || type === 'SUBMIT');
};

var isSpottable = function isSpottable(props) {
  return !props.disabled && !props.spotlightDisabled;
}; // Last instance of spottable to be focused


var lastSelectTarget = null; // Should we prevent select being passed through

var selectCancelled = false;
/**
 * Default configuration for Spottable
 *
 * @hocconfig
 * @memberof spotlight/Spottable.Spottable
 */

var defaultConfig = {
  /**
   * Whether or not the component should emulate mouse events as a response
   * to Spotlight 5-way events.
   *
   * @type {Boolean}
   * @default false
   * @public
   * @memberof spotlight/Spottable.Spottable.defaultConfig
   */
  emulateMouse: true
};
/**
 * Constructs a Spotlight 5-way navigation-enabled higher-order component.
 *
 * Example:
 * ```
 *	const SpottableComponent = Spottable(Component);
 * ```
 * @class Spottable
 * @memberof spotlight/Spottable
 * @param  {Object} defaultConfig Set of default configuration parameters
 * @param  {Function} Wrapped Component to wrap
 *
 * @hoc
 * @returns {Function} Spottable
 */

var Spottable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var emulateMouse = config.emulateMouse;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(_props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, _props));

      _this.shouldEmulateMouse = function (ev, props) {
        if (!emulateMouse) {
          return;
        }

        var currentTarget = ev.currentTarget,
            repeat = ev.repeat,
            type = ev.type,
            which = ev.which;
        var selectionKeys = props.selectionKeys;
        var keyboardAccessible = isKeyboardAccessible(currentTarget);
        var keyCode = selectionKeys.find(function (value) {
          return (// emulate mouse events for any remote okay button event
            which === REMOTE_OK_KEY || // or a non-keypress selection event or any selection event on a non-keyboard accessible
            // control
            which === value && (type !== 'keypress' || !keyboardAccessible)
          );
        });

        if ((0, _spotlight.getDirection)(keyCode)) {
          (0, _handle.preventDefault)(ev);
          (0, _handle.stop)(ev);
        } else if (keyCode && keyboardAccessible) {
          (0, _handle.preventDefault)(ev);
        }

        return keyCode && !repeat;
      };

      _this.forwardSpotlightEvents = function (ev, _ref) {
        var onSpotlightDown = _ref.onSpotlightDown,
            onSpotlightLeft = _ref.onSpotlightLeft,
            onSpotlightRight = _ref.onSpotlightRight,
            onSpotlightUp = _ref.onSpotlightUp;
        var keyCode = ev.keyCode;

        if (onSpotlightDown && (0, _keymap.is)('down', keyCode)) {
          onSpotlightDown(ev);
        } else if (onSpotlightLeft && (0, _keymap.is)('left', keyCode)) {
          onSpotlightLeft(ev);
        } else if (onSpotlightRight && (0, _keymap.is)('right', keyCode)) {
          onSpotlightRight(ev);
        } else if (onSpotlightUp && (0, _keymap.is)('up', keyCode)) {
          onSpotlightUp(ev);
        }

        return true;
      };

      _this.handleSelect = function (_ref2, props) {
        var which = _ref2.which;
        var selectionKeys = props.selectionKeys; // Only apply accelerator if handling a selection key

        if (selectionKeys.find(function (value) {
          return which === value;
        })) {
          if (selectCancelled || lastSelectTarget && lastSelectTarget !== _assertThisInitialized(_this)) {
            return false;
          }

          lastSelectTarget = _assertThisInitialized(_this);
        }

        return true;
      };

      _this.forwardAndResetLastSelectTarget = function (ev, props) {
        var keyCode = ev.keyCode;
        var selectionKeys = props.selectionKeys;
        var key = selectionKeys.find(function (value) {
          return keyCode === value;
        });
        var notPrevented = (0, _handle.forwardWithPrevent)('onKeyUp', ev, props); // bail early for non-selection keyup to avoid clearing lastSelectTarget prematurely

        if (!key && (!(0, _keymap.is)('enter', keyCode) || !(0, _spotlight.getDirection)(keyCode))) {
          return notPrevented;
        }

        var allow = lastSelectTarget === _assertThisInitialized(_this);

        selectCancelled = false;
        lastSelectTarget = null;
        return notPrevented && allow;
      };

      _this.isActionable = function (ev, props) {
        return isSpottable(props);
      };

      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleKeyDown = _this.handle((0, _handle.forwardWithPrevent)('onKeyDown'), _this.forwardSpotlightEvents, _this.isActionable, _this.handleSelect, _this.shouldEmulateMouse, (0, _handle.forward)('onMouseDown'));
      _this.handleKeyUp = _this.handle(_this.forwardAndResetLastSelectTarget, _this.isActionable, _this.shouldEmulateMouse, (0, _handle.forward)('onMouseUp'), (0, _handle.forward)('onClick'));

      _this.handleBlur = function (ev) {
        if (_this.shouldPreventBlur) return;

        if (ev.currentTarget === ev.target) {
          _this.isFocused = false;

          if (_this.focusedWhenDisabled) {
            _this.focusedWhenDisabled = false; // We only need to trigger a rerender if a focused item becomes disabled and still needs its focus.
            // Once it blurs we need to rerender to remove the spottable class so it will not spot again.
            // The reason we don't use state is for performance reasons to avoid updates.

            _this.forceUpdate();
          }
        }

        if (_spotlight.Spotlight.isMuted(ev.target)) {
          ev.stopPropagation();
        } else {
          (0, _handle.forward)('onBlur', ev, _this.props);
        }
      };

      _this.handleFocus = function (ev) {
        if (_this.props.disabled || _this.props.spotlightDisabled) {
          _this.shouldPreventBlur = true;
          ev.target.blur();
          _this.shouldPreventBlur = false;
          return;
        }

        if (ev.currentTarget === ev.target) {
          _this.isFocused = true;
        }

        if (_spotlight.Spotlight.isMuted(ev.target)) {
          ev.stopPropagation();
        } else {
          (0, _handle.forward)('onFocus', ev, _this.props);
        }
      };

      _this.handleEnter = function (ev) {
        (0, _handle.forward)('onMouseEnter', ev, _this.props);

        if ((0, _pointer.hasPointerMoved)(ev.clientX, ev.clientY)) {
          _this.isHovered = true;
        }
      };

      _this.handleLeave = function (ev) {
        (0, _handle.forward)('onMouseLeave', ev, _this.props);

        if ((0, _pointer.hasPointerMoved)(ev.clientX, ev.clientY)) {
          _this.isHovered = false;
        }
      };

      _this.isHovered = false; // Used to indicate that we want to stop propagation on blur events that occur as a
      // result of this component imperatively blurring itself on focus when spotlightDisabled

      _this.shouldPreventBlur = false;
      _this.isFocused = false;
      _this.focusedWhenDisabled = false;
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        // eslint-disable-next-line react/no-find-dom-node
        this.node = _reactDom["default"].findDOMNode(this);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this.isFocused = this.node && _spotlight.Spotlight.getCurrent() === this.node; // if the component is focused and became disabled

        if (this.isFocused && this.props.disabled && lastSelectTarget === this && !selectCancelled) {
          selectCancelled = true;
          (0, _handle.forward)('onMouseUp', null, this.props);
        } // if the component became enabled, notify spotlight to enable restoring "lost" focus


        if (isSpottable(this.props) && !isSpottable(prevProps) && !_spotlight.Spotlight.isPaused()) {
          if (_spotlight.Spotlight.getPointerMode()) {
            if (this.isHovered) {
              _spotlight.Spotlight.setPointerMode(false);

              _spotlight.Spotlight.focus(this.node);

              _spotlight.Spotlight.setPointerMode(true);
            }
          } else if (!_spotlight.Spotlight.getCurrent()) {
            var containers = (0, _container.getContainersForNode)(this.node);

            var containerId = _spotlight.Spotlight.getActiveContainer();

            if (containers.indexOf(containerId) >= 0) {
              _spotlight.Spotlight.focus(containerId);
            }
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.isFocused) {
          (0, _handle.forward)('onSpotlightDisappear', null, this.props);
        }

        if (lastSelectTarget === this) {
          lastSelectTarget = null;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            disabled = _this$props.disabled,
            spotlightId = _this$props.spotlightId,
            spotlightDisabled = _this$props.spotlightDisabled,
            rest = _objectWithoutProperties(_this$props, ["disabled", "spotlightId", "spotlightDisabled"]);

        this.focusedWhenDisabled = this.isFocused && (disabled || spotlightDisabled);
        var spottable = this.focusedWhenDisabled || isSpottable(this.props);
        var tabIndex = rest.tabIndex;
        delete rest.onSpotlightDisappear;
        delete rest.onSpotlightDown;
        delete rest.onSpotlightLeft;
        delete rest.onSpotlightRight;
        delete rest.onSpotlightUp;
        delete rest.selectionKeys;
        delete rest.spotlightDisabled;

        if (tabIndex == null) {
          tabIndex = -1;
        }

        if (spottable) {
          if (rest.className) {
            rest.className += ' ' + spottableClass;
          } else {
            rest.className = spottableClass;
          }
        }

        if (spotlightId) {
          rest['data-spotlight-id'] = spotlightId;
        }

        return _react["default"].createElement(Wrapped, Object.assign({}, rest, {
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onMouseEnter: this.handleEnter,
          onMouseLeave: this.handleLeave,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          disabled: disabled,
          tabIndex: tabIndex
        }));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'Spottable', _class.propTypes =
  /** @lends spotlight/Spottable.Spottable.prototype */
  {
    /**
     * Whether or not the component is in a disabled state.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes["default"].bool,

    /**
     * The handler to run when the component is removed while retaining focus.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightDisappear: _propTypes["default"].func,

    /**
     * The handler to run when the 5-way down key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightDown: _propTypes["default"].func,

    /**
     * The handler to run when the 5-way left key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightLeft: _propTypes["default"].func,

    /**
     * The handler to run when the 5-way right key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightRight: _propTypes["default"].func,

    /**
     * The handler to run when the 5-way up key is pressed.
     *
     * @type {Function}
     * @param {Object} event
     * @public
     */
    onSpotlightUp: _propTypes["default"].func,

    /**
     * An array of numbers representing keyCodes that should trigger mouse event
     * emulation when `emulateMouse` is `true`. If a keyCode equals a directional
     * key, then default 5-way navigation will be prevented when that key is pressed.
     *
     * @type {Number[]}
     * @default [13, 16777221]
     * @public
     */
    selectionKeys: _propTypes["default"].arrayOf(_propTypes["default"].number),

    /**
     * When `true`, the component cannot be navigated using spotlight.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    spotlightDisabled: _propTypes["default"].bool,

    /**
     * Used to identify this component within the Spotlight system
     *
     * @type {String}
     * @public
     */
    spotlightId: _propTypes["default"].string,

    /**
     * The tabIndex of the component. This value will default to -1 if left
     * unset and the control is spottable.
     *
     * @type {Number}
     * @public
     */
    tabIndex: _propTypes["default"].number
  }, _class.defaultProps = {
    selectionKeys: [ENTER_KEY, REMOTE_OK_KEY]
  }, _temp;
});
exports.Spottable = Spottable;
var _default = Spottable;
exports["default"] = _default;