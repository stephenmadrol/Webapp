"use strict";

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _Spottable = _interopRequireDefault(require("../Spottable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Spottable', function () {
  test('should add the spottable class', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).toEqual(expected);
  });
  test('should not add the spottable class to a {disabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      disabled: true
    }));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).not.toEqual(expected);
  });
  test('should not add the spottable class to a {spotlightDisabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      spotlightDisabled: true
    }));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).not.toEqual(expected);
  });
  test('should emit {onSpotlightDisappear} when unmounted while focused', function () {
    var spy = jest.fn();
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      onSpotlightDisappear: spy
    }));
    subject.simulate('focus');
    subject.unmount();
    var expected = 1;
    var actual = spy.mock.calls.length;
    expect(actual).toEqual(expected);
  });
  describe('shouldComponentUpdate', function () {
    test('should re-render when a non-Spottable prop changes', function () {
      var spy = jest.fn(function (props) {
        return _react["default"].createElement("div", props);
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
      subject.setProps({
        'data-id': '123'
      });
      var expected = 2;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
    test('should re-render when {selectionKeys} changes', function () {
      var spy = jest.fn(function (props) {
        return _react["default"].createElement("div", props);
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        selectionKeys: [1, 2, 3]
      }));
      subject.setProps({
        selectionKeys: [2, 1, 3]
      });
      var expected = 2;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
    test('should not re-render when focused', function () {
      var spy = jest.fn(function (props) {
        return _react["default"].createElement("div", props);
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
      subject.simulate('focus');
      var expected = 1;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
  });
});