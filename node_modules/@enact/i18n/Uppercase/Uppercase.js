"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Uppercase = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Provides higher-order component interface for handling locale-aware uppercasing.
 *
 * @module i18n/Uppercase
 * @exports Uppercase
 */
var isString = function isString(content) {
  return typeof content === 'string';
};

var formatContent = function formatContent(casing, content) {
  switch (casing) {
    case 'word':
      return (0, _util.toWordCase)(content);

    case 'sentence':
      return (0, _util.toCapitalized)(content);

    case 'upper':
      return (0, _util.toUpperCase)(content);
  }
};
/**
 * A higher-order component that is used to wrap an element to provide locale-aware uppercasing of
 * `children`, provided that `children` is a single string. Other values for `children` are
 * unchanged. It supports a `casing` property which can be used to override the uppercase as-needed.
 *
 * There are no configurable options on this HOC.
 *
 * @class Uppercase
 * @memberof i18n/Uppercase
 * @hoc
 * @public
 */


var Uppercase = (0, _hoc["default"])(function (config, Wrapped) {
  return (0, _kind["default"])({
    // eslint-disable-line no-unused-vars
    name: 'Uppercase',
    propTypes:
    /** @lends i18n/Uppercase.Uppercase.prototype */
    {
      /**
       * Configures the mode of uppercasing that should be performed.
       *
       * Options are:
       *   `'upper'` to capitalize all characters.
       *   `'preserve'` to maintain the original casing.
       *   `'word'` to capitalize the first letter of each word.
       *   `'sentence'` to capitalize the first letter of the string.
       *
       * @type {String}
       * @default 'upper'
       * @public
       */
      casing: _propTypes["default"].oneOf(['upper', 'preserve', 'word', 'sentence'])
    },
    defaultProps: {
      casing: 'upper'
    },
    computed: {
      children: function children(_ref) {
        var casing = _ref.casing,
            _children = _ref.children;

        if (casing !== 'preserve' && _react["default"].Children.count(_children)) {
          return isString(_children) ? formatContent(casing, _children) : _react["default"].Children.map(_children, function (child) {
            return isString(child) ? formatContent(casing, child) : child;
          });
        }

        return _children;
      }
    },
    render: function render(props) {
      delete props.casing;
      return _react["default"].createElement(Wrapped, props);
    }
  });
});
exports.Uppercase = Uppercase;
var _default = Uppercase;
exports["default"] = _default;