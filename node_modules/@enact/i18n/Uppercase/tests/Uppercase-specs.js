"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Uppercase = _interopRequireDefault(require("../Uppercase"));

var _locale = require("../../locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Uppercase', function () {
  // Suite-wide setup
  test('should uppercase content when it contains a single string child', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null, "uppercase"));
    var expected = 'UPPERCASE';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should not uppercase content when casing is "preserve"', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, {
      casing: "preserve"
    }, "uppercase"));
    var expected = 'uppercase';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should uppercase the first letter of each word when casing is "word"', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, {
      casing: "word"
    }, "uppercase uppercase uppercase"));
    var expected = 'Uppercase Uppercase Uppercase';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should uppercase the first letter of the first word when casing is "sentence"', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, {
      casing: "sentence"
    }, "uppercase uppercase uppercase"));
    var expected = 'Uppercase uppercase uppercase';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should uppercase content when it contains multiple children', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null, ['uppercase', 'uppercase']));
    var expected = 'UPPERCASEUPPERCASE';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should not uppercase content when it contains a single non-string child', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null, _react["default"].createElement("span", null, "uppercase")));
    var expected = 'uppercase';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should uppercase non-latin locales correctly', function () {
    // This is difficult to truly unit test because we need a character set we know ilib
    // uppercases correctly but String.prototype.toUpperCase doesn't.
    (0, _locale.updateLocale)('fr-FR');

    var Component = function Component(props) {
      return _react["default"].createElement("div", null, props.children);
    };

    var Wrapped = (0, _Uppercase["default"])(Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null, "\xE0\xE7\xE8\xEC\xF1\xF2\xF9"));
    var expected = 'ÀÇÈÌÑÒÙ';
    var actual = subject.text();
    (0, _locale.updateLocale)();
    expect(actual).toBe(expected);
  });
});