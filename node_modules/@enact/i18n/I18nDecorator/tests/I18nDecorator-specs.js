"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ilib = _interopRequireDefault(require("../../ilib/lib/ilib.js"));

var _locale = require("../../locale");

var _I18nDecorator = require("../I18nDecorator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

describe('I18nDecorator', function () {
  // Suite-wide setup
  beforeEach(function () {
    (0, _locale.updateLocale)('en-US');
  });
  afterEach(function () {
    (0, _locale.updateLocale)();
  });
  test('should add rtl context parameter', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", null, 'rtl' in props ? 'has rtl prop' : 'does not have rtl prop');
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, (0, _I18nDecorator.I18nContextDecorator)({
      rtlProp: 'rtl'
    }, Component));
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null));
    var expected = 'has rtl prop';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should add updateLocale context parameter', function () {
    // eslint-disable-next-line enact/prop-types
    var Component = function Component(_ref) {
      var update = _ref.updateLocale;
      return _react["default"].createElement("div", null, _typeof(update));
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, (0, _I18nDecorator.I18nContextDecorator)({
      updateLocaleProp: 'updateLocale'
    }, Component));
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null));
    var expected = 'function';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should update the current locale when updateLocale is called', function () {
    // eslint-disable-next-line enact/prop-types
    var Component = function Component(_ref2) {
      var _updateLocale = _ref2._updateLocale;

      var handleClick = function handleClick() {
        return _updateLocale('ar-SA');
      };

      return _react["default"].createElement("button", {
        onClick: handleClick
      });
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, (0, _I18nDecorator.I18nContextDecorator)({
      updateLocaleProp: '_updateLocale'
    }, Component));
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null));
    subject.find('button').simulate('click');
    var expected = 'ar-SA';

    var actual = _ilib["default"].getLocale();

    expect(actual).toBe(expected);
  });
  test('should update the rtl context parameter when RTL changes', function () {
    // eslint-disable-next-line enact/prop-types
    var Component = function Component(_ref3) {
      var rtl = _ref3.rtl,
          _updateLocale = _ref3._updateLocale;

      var handleClick = function handleClick() {
        return _updateLocale('ar-SA');
      };

      return _react["default"].createElement("button", {
        onClick: handleClick
      }, rtl ? 'rtl' : 'ltr');
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, (0, _I18nDecorator.I18nContextDecorator)({
      rtlProp: 'rtl',
      updateLocaleProp: '_updateLocale'
    }, Component));
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapped, null));
    var button = subject.find('button');
    button.simulate('click');
    subject.update();
    var expected = 'rtl';
    var actual = button.text();
    expect(actual).toBe(expected);
  });
  test('should set locale via props', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", {
        className: props.className
      });
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, Component);
    (0, _enzyme.shallow)(_react["default"].createElement(Wrapped, {
      locale: "ar-SA"
    }));
    var expected = 'ar-SA';

    var actual = _ilib["default"].getLocale();

    expect(actual).toBe(expected);
  });
  test('should add locale classes to Wrapped', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", {
        className: props.className
      });
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, Component); // explicitly setting locale so we get a known class list regardless of runtime locale

    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Wrapped, {
      locale: "en-US"
    })).find(Component);
    var expected = true;
    var actual = subject.hasClass('enact-locale-en') && subject.hasClass('enact-locale-en-US') && subject.hasClass('enact-locale-US');
    expect(actual).toBe(expected);
  });
  test('should treat "en-US" as latin locale', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", {
        className: props.className
      });
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, Component); // explicitly setting locale so we get a known class list regardless of runtime locale

    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Wrapped, {
      locale: "en-US"
    })).find(Component);
    var expected = false;
    var actual = subject.hasClass('enact-locale-non-latin');
    expect(actual).toBe(expected);
  });
  test('should treat "ja-JP" as non-latin locale', function () {
    var Component = function Component(props) {
      return _react["default"].createElement("div", {
        className: props.className
      });
    };

    var Wrapped = (0, _I18nDecorator.I18nDecorator)({
      sync: true
    }, Component); // explicitly setting locale so we get a known class list regardless of runtime locale

    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Wrapped, {
      locale: "ja-JP"
    })).find(Component);
    var expected = true;
    var actual = subject.hasClass('enact-locale-non-latin');
    expect(actual).toBe(expected);
  });
});