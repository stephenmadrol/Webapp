"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextDecorator = exports.Text = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ilib = _interopRequireDefault(require("../ilib/lib/ilib"));

var _IString = _interopRequireDefault(require("../ilib/lib/IString"));

var _I18nDecorator = require("../I18nDecorator");

var _resBundle = require("../src/resBundle");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function getTextMap(mapPropsToText, props) {
  var children = props.children,
      defaultText = props.defaultText;

  if (mapPropsToText) {
    var map = {};
    Object.keys(mapPropsToText).forEach(function (prop) {
      var text = mapPropsToText[prop]; // if a prop is specified without a proper value (string or object), ignore it

      if (text) {
        if (typeof text === 'string') {
          // for string text values, pass them along as the untranslated text
          // without a default value
          map[prop] = {
            translated: false,
            text: text,
            defaultText: false
          };
        } else if (typeof text.text === 'string') {
          // for object text values with a string text member, use it as the
          // untranslated text and optionally look for a string defaultText for a
          // default value
          map[prop] = {
            translated: false,
            text: text.text,
            defaultText: typeof text.defaultText === 'string' ? text.defaultText : false
          };
        }
      }
    });
    return map;
  } else if (typeof children === 'string') {
    return {
      children: {
        translated: false,
        text: children,
        defaultText: defaultText
      }
    };
  }
}

var STRING_ONLY = function STRING_ONLY() {};
/**
 * Default config for {@link i18n/Text.TextDecorator}.
 *
 * @memberof i18n/Text.TextDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the translated text passed to the wrapped component.
   *
   * @type {Object<String, String|Object>}
   * @default null
   * @public
   * @memberof i18n/Text.TextDecorator.defaultConfig
   */
  mapPropsToText: null
};
/**
 * A higher-order component that is used to translate text and provide the translations via props.
 *
 * `TextDecorator` accepts an optional `mapPropsToText` config prop which defines the props it will
 * populate and the text to translate and provide in that prop. `defaultText` can also be provided
 * when appropriate.
 *
 * If translations are not available yet and all props do not include a default value,
 * `TextDecorator` will render nothing. Once translations are avaiable, the component will update
 * with the translated strings.
 *
 * ```
 * TextDecorator({
 *   mapPropsToText: {
 *     // Always translate "Go" and pass it in the `children` prop
 *     children: 'Go',
 *     // Translate "Go to next page" but pass "" (value always untranslated) while
 *     // waiting for the translated strings to be fetched.
 *     'aria-label': {
 *       text: 'Go to next page',
 *       defaultText: ''
 *     }
 *   }
 * })
 * ```
 *
 * @class TextDecorator
 * @memberof i18n/Text
 * @hoc
 * @public
 */

var TextDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var mapPropsToText = config.mapPropsToText;
  var Decorator = (_temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(Decorator, _React$Component);

    function Decorator(props) {
      var _this;

      _classCallCheck(this, Decorator);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Decorator).call(this, props));
      _this.state = {
        map: getTextMap(mapPropsToText, props)
      };
      return _this;
    }

    _createClass(Decorator, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.shouldTranslate()) {
          this.translate(this.props.locale);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.locale !== prevProps.locale) {
          this.translate(this.props.locale);
        }
      }
    }, {
      key: "shouldTranslate",
      value: function shouldTranslate() {
        return mapPropsToText || typeof this.props.children === 'string';
      }
    }, {
      key: "translate",
      value: function translate() {
        var _this2 = this;

        var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _ilib["default"].getLocale();
        var map = this.state.map;
        var bundle = (0, _resBundle.getResBundle)();
        if (!map) return;
        var props = Object.keys(map);
        Promise.all([new Promise(function (resolve) {
          if (bundle) {
            resolve(bundle);
          }

          (0, _resBundle.createResBundle)({
            locale: locale,
            sync: false,
            onLoad: resolve
          });
        }), // ResBundle.getString will try to synchronously fetch the plurals resouce so need
        // to proactively fetch it to avoid the sync XHR
        new Promise(function (resolve) {
          return _IString["default"].loadPlurals(false, null, null, resolve);
        })]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1),
              resBundle = _ref2[0];

          if (!resBundle) return;
          var translated = props.reduce(function (obj, prop) {
            obj[prop].translated = String((0, _resBundle.getIStringFromBundle)(obj[prop].text, resBundle));
            return obj;
          }, _objectSpread({}, map));

          _this2.setState({
            map: translated
          });
        });
      }
    }, {
      key: "canRender",
      value: function canRender() {
        var entries = Object.values(this.state.map);

        for (var entry in entries) {
          if (entry.translated === false && entry.defaultText === false) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "getTextForProp",
      value: function getTextForProp(prop) {
        var _this$state$map$prop = this.state.map[prop],
            _this$state$map$prop$ = _this$state$map$prop.defaultText,
            defaultText = _this$state$map$prop$ === void 0 ? '' : _this$state$map$prop$,
            translated = _this$state$map$prop.translated;
        return translated === false ? defaultText : translated;
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        if (!this.shouldTranslate()) {
          var passThrough = _objectSpread({}, this.props);

          delete passThrough.locale;
          return _react["default"].createElement(Wrapped, passThrough);
        }

        if (!this.canRender()) {
          return null;
        }

        if (Wrapped === STRING_ONLY) {
          return this.getTextForProp('children');
        }

        var props = _objectSpread({}, this.props);

        delete props.locale;
        Object.keys(this.state.map).forEach(function (prop) {
          props[prop] = _this3.getTextForProp(prop);
        });
        return _react["default"].createElement(Wrapped, props);
      }
    }]);

    return Decorator;
  }(_react["default"].Component), _class.displayName = 'TextDecorator', _class.propTypes = {
    children: _propTypes["default"].string,
    locale: _propTypes["default"].string
  }, _temp);
  return (0, _I18nDecorator.I18nContextDecorator)({
    localeProp: 'locale'
  }, Decorator);
});
/**
 * Translates its child string value in the current locale.
 *
 * If translations are not available yet, `Text` will render nothing. Once translations are
 * avaiable, the component will update with the translated string.
 *
 * ```
 * <Text>Go</Text>
 * ```
 *
 * @class Text
 * @memberof i18n/Text
 * @public
 */

exports.TextDecorator = TextDecorator;
var Text = TextDecorator(STRING_ONLY);
exports.Text = Text;
var _default = Text;
exports["default"] = _default;