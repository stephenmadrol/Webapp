// Type definitions for i18n/Text

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface TextDecoratorConfig extends Object {
  /**
   * Configures the translated text passed to the wrapped component.
   */
  mapPropsToText?: { [key: string]: string | object };
}
export interface TextDecoratorProps {}
export function TextDecorator<P>(
  config: TextDecoratorConfig,
  Component: React.ComponentType<P> | string
): React.ComponentType<P & TextDecoratorProps>;

export function TextDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & TextDecoratorProps>;

/**
 * Translates its child string value in the current locale.
 * 
 * If translations are not available yet,  `Text`  will render nothing. Once translations are
avaiable, the component will update with the translated string.
 * ```
<Text>Go</Text>
```
 */

export declare class Text {}

export default Text;
