"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleIconDecorator = exports.ToggleIconBase = exports.ToggleIcon = exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _react = _interopRequireDefault(require("react"));

var _Toggleable = _interopRequireDefault(require("../Toggleable"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _ToggleIconModule = _interopRequireDefault(require("./ToggleIcon.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Represents a Boolean state, and can accept any icon to toggle.
 *
 * @class ToggleIconBase
 * @memberof ui/ToggleIcon
 * @ui
 * @public
 */
var ToggleIconBase = (0, _kind["default"])({
  name: 'ui:ToggleIcon',
  propTypes:
  /** @lends ui/ToggleIcon.ToggleIconBase.prototype */
  {
    /**
     * The icon to use for this component.
     *
     * @see ui/Icon.Icon.children
     * @type {String|Object}
     * @public
     */
    children: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal Elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `toggleIcon` - The root class name
     * * `icon` - The background node of the button
     * * `selected` - Applied to a `selected` button
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Disables `ToggleIcon`.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
    * CSS classes to be used on the Icon component
    *
    * @type {String}
    * @public
    */
    iconClasses: _propTypes2["default"].string,

    /**
     * The component used to render the icon.
     *
     * @type {String|Component}
     * @default 'div'
     * @public
     */
    iconComponent: _propTypes["default"].renderable,

    /**
     * Sets whether this control is in the 'on' or 'off' state. `true` for 'on', `false` for 'off'.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool
  },
  defaultProps: {
    disabled: false,
    iconComponent: 'div',
    selected: false
  },
  styles: {
    css: _ToggleIconModule["default"],
    className: 'toggleIcon',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var selected = _ref.selected,
          styler = _ref.styler;
      return styler.append({
        selected: selected
      });
    },
    iconClassName: function iconClassName(_ref2) {
      var iconClasses = _ref2.iconClasses,
          css = _ref2.css;
      return iconClasses ? "".concat(css.icon, " ").concat(iconClasses) : css.icon;
    }
  },
  render: function render(_ref3) {
    var children = _ref3.children,
        IconComponent = _ref3.iconComponent,
        iconClassName = _ref3.iconClassName,
        rest = _objectWithoutProperties(_ref3, ["children", "iconComponent", "iconClassName"]);

    delete rest.selected;
    delete rest.iconClasses;
    return _react["default"].createElement("div", rest, _react["default"].createElement(IconComponent, {
      className: iconClassName
    }, children));
  }
});
/**
 * Adds support for the `onToggle` prop callback to be fired when the `onTap` (touch-safe `onClick`)
 * event executes.
 *
 * @class ToggleIconDecorator
 * @memberof ui/ToggleIcon
 * @mixes ui/Toggleable.Toggleable
 * @mixes ui/Touchable.Touchable
 * @ui
 * @public
 */

exports.ToggleIconBase = ToggleIconBase;
var ToggleIconDecorator = (0, _compose["default"])((0, _Toggleable["default"])({
  toggleProp: 'onTap'
}), _Touchable["default"]);
/**
 * Represents a Boolean state, and can accept any icon to toggle.
 *
 * @class ToggleIcon
 * @memberof ui/ToggleIcon
 * @extends ui/ToggleIcon.ToggleIconBase
 * @mixes ui/ToggleIcon.ToggleIconDecorator
 * @ui
 * @public
 */

exports.ToggleIconDecorator = ToggleIconDecorator;
var ToggleIcon = ToggleIconDecorator(ToggleIconBase);
/**
 * The handler to run when the component is toggled.
 *
 * @name onToggle
 * @memberof ui/ToggleIcon.ToggleIcon.prototype
 * @type {Function}
 * @param {Object} event
 * @param {String} event.selected - Selected value of item.
 * @public
 */

exports.ToggleIcon = ToggleIcon;
var _default = ToggleIcon;
exports["default"] = _default;