"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = require("../index.js");

var _MarqueeModule = _interopRequireDefault(require("../Marquee.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ltrText = 'This is some fine latin text.',
    rtlText = 'العربية - العراق',
    contentSelector = ".".concat(_MarqueeModule["default"].text);
describe('Marquee', function () {
  test('should determine the correct directionality of latin text on initial render', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, null, ltrText));
    var expected = 'ltr';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should determine the correct directionality of non-latin text on initial render', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, null, rtlText));
    var expected = 'rtl';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should force the directionality text if forceDirection is specified', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "ltr"
    }, rtlText));
    var expected = 'ltr';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should switch directionality when the text content changes after initial render', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, null, ltrText));
    subject.setProps({
      children: rtlText
    });
    subject.update();
    var expected = 'rtl';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should not switch directionality when the text content changes after initial render and the forceDirection property was already set', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "ltr"
    }, ltrText));
    subject.setProps({
      children: rtlText
    });
    subject.update();
    var expected = 'ltr';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should override direction to RTL when forceDirection is set and locale is LTR', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "rtl",
      locale: "ltr"
    }));
    var expected = 'rtl';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should override direction to LTR when forceDirection is set and locale is RTL', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "ltr",
      locale: "rtl"
    }));
    var expected = 'ltr';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should have direction of RTL when forceDirection is RTL and locale is RTL', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "rtl",
      locale: "rtl"
    }));
    var expected = 'rtl';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
  test('should have direction of LTR when forceDirection is LTR and locale is LTR', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_index.Marquee, {
      forceDirection: "ltr",
      locale: "ltr"
    }));
    var expected = 'ltr';
    var actual = subject.find(contentSelector).prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
});
describe('MarqueeBase', function () {
  // Computed Property Tests
  test('should not include the animate class when animating is false', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, null));
    var expected = false;
    var actual = subject.childAt(0).hasClass(_MarqueeModule["default"].animate);
    expect(actual).toBe(expected);
  });
  test('should include the animate class when animating is true', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, {
      animating: true
    }));
    var expected = true;
    var actual = subject.childAt(0).hasClass(_MarqueeModule["default"].animate);
    expect(actual).toBe(expected);
  });
  test('should not transition when animating is false', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, null));
    var actual = subject.childAt(0).prop('style');
    expect(actual).not.toHaveProperty('transition');
  });
  test('should transition when animating is true', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, {
      animating: true
    }));
    var actual = subject.childAt(0).prop('style');
    expect(actual).toHaveProperty('transitionDuration');
  });
  test('should set RTL direction in LTR context when the text directionality is RTL', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, {
      rtl: true
    }), {
      context: {
        rtl: false
      }
    });
    var expected = 'rtl';
    var actual = subject.childAt(0).prop('style').direction;
    expect(actual).toBe(expected);
  });
  test('should set LTR direction in RTL when the text directionality is LTR', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, null), {
      context: {
        rtl: true
      }
    });
    var expected = 'ltr';
    var actual = subject.childAt(0).prop('style').direction;
    expect(actual).toBe(expected);
  });
  test('should transition from the right with LTR text', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, {
      animating: true,
      distance: 100
    }));
    var actual = subject.childAt(0).prop('style');
    expect(actual).toHaveProperty('right');
  });
  test('should transition from the left with RTL text', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_index.MarqueeBase, {
      animating: true,
      distance: 100,
      rtl: true
    }));
    var actual = subject.childAt(0).prop('style');
    expect(actual).toHaveProperty('left');
  });
});