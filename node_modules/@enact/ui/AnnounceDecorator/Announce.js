"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Announce = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * An unstyled component with an imperative API to alert the user.
 *
 * The `announce()` method should be used to alert the user of behavior for accessibility.
 *
 * Example:
 * ```
 * import {Announce} from '@enact/ui/AnnounceDecorator';
 * import React from 'react';
 *
 * class Example extends React.Component {
 *   notify = () => {
 *     if (this.announce) {
 *       this.announce.announce('this text will be alerted to user by TTS');
 *     }
 *   }
 *
 *   setAnnounceRef = (announce) => {
 *     this.announce = announce;
 *   }
 *
 *   render () {
 *     <div>
 *       <button onClick={this.notify}>Notify on Click</button>
 *       <Announce ref={this.setAnnounceRef} />
 *     </div>
 *   }
 * }
 * ```
 *
 * @class Announce
 * @ui
 * @memberof ui/AnnounceDecorator
 * @public
 */
var Announce = (_temp = _class =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Announce, _React$Component);

  function Announce() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Announce);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Announce)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.resetAlert = function () {
      _this.alertTimeout = null;

      _this.alert.removeAttribute('aria-label');
    };

    _this.announce = function (message) {
      if (_this.alert && !_this.alertTimeout && message) {
        _this.alert.setAttribute('aria-label', message);

        _this.alertTimeout = setTimeout(_this.resetAlert, _this.props.timeout);
      }
    };

    _this.setAlertRef = function (node) {
      _this.alert = node;
    };

    return _this;
  }

  _createClass(Announce, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.alertTimeout) {
        clearTimeout(this.alertTimeout);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = Object.assign({}, this.props);
      delete props.timeout;
      return _react["default"].createElement("span", Object.assign({
        ref: this.setAlertRef,
        role: "alert"
      }, props));
    }
  }]);

  return Announce;
}(_react["default"].Component), _class.displayName = 'Announce', _class.propTypes =
/** @lends ui/AnnounceDecorator.Announce.prototype */
{
  /**
   * Time, in milliseconds, to wait to remove the alert message.
  	 * Subsequent updates to the
   * message before the timeout are ignored.
   *
   * @type {Number}
   * @default 500
   * @public
   */
  timeout: _propTypes["default"].number
}, _class.defaultProps = {
  // 500ms is somewhat arbitrary. Would like to do some further usability testing to determine
  // how frequently we should allow alerting. Should also consider if this timeout should be
  // "global" such that multiple instances of Announce respect each other.
  timeout: 500
}, _temp);
exports.Announce = Announce;
var _default = Announce;
exports["default"] = _default;