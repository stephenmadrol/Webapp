"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Changeable = _interopRequireDefault(require("../Changeable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Changeable', function () {
  var testValue = 3;

  function DivComponent() {
    return _react["default"].createElement("div", null);
  }

  describe('#config', function () {
    test('should pass \'value\' to the wrapped component', function () {
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = true;
      var actual = 'value' in wrapped.props();
      expect(actual).toBe(expected);
    });
    test('should pass configured \'prop\' as the value\'s key to the wrapped component', function () {
      var prop = 'id';
      var Component = (0, _Changeable["default"])({
        prop: prop
      }, DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultId: testValue
      }));
      var wrapped = subject.find(DivComponent);
      var expected = testValue;
      var actual = wrapped.prop(prop);
      expect(actual).toBe(expected);
    });
    test('should pass \'onChange\' handler to the wrapped component', function () {
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = true;
      var actual = typeof wrapped.prop('onChange') === 'function';
      expect(actual).toBe(expected);
    });
    test('should pass configured handler to the wrapped component', function () {
      var handle = 'onClick';
      var Component = (0, _Changeable["default"])({
        change: handle
      }, DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = true;
      var actual = typeof wrapped.prop(handle) === 'function';
      expect(actual).toBe(expected);
    });
  });
  describe('#prop', function () {
    test('should use defaultValue prop when value prop is omitted', function () {
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1
      }));
      var expected = 1;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
    });
    test('should warn when \'defaultValue\' and \'value\' props are provided', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 10,
        value: 5
      }));
      var expected = 1;
      var actual = spy.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should use defaultValue prop when value prop is null', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1,
        value: null
      }));
      var expected = 1;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
    test('should use value prop when value changed from truthy to null', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1,
        value: 2
      }));
      subject.setProps({
        value: null
      });
      var expected = null;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
    test('should use defaultValue prop when value prop is undefined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)( // eslint-disable-next-line no-undefined
      _react["default"].createElement(Component, {
        defaultValue: 1,
        value: undefined
      }));
      var expected = 1;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
    test('should use value prop when value changed from truthy to undefined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1,
        value: 2
      })); // eslint-disable-next-line no-undefined

      subject.setProps({
        value: undefined
      }); // eslint-disable-next-line no-undefined

      var expected = undefined;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
    test('should use value prop when defined but falsy', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1,
        value: 0
      }));
      var expected = 0;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
    test('should use value prop when both value and defaultValue are defined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Changeable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultValue: 1,
        value: 2
      }));
      var expected = 2;
      var actual = subject.find(DivComponent).prop('value');
      expect(actual).toBe(expected);
      expect(spy).toHaveBeenCalled();
    });
  });
  test('should invoke passed \'onChange\' handler', function () {
    var handleChange = jest.fn();
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onChange: handleChange
    }));
    subject.simulate('change', {});
    var expected = 1;
    var actual = handleChange.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not invoke passed \'onChange\' handler when \'disabled\'', function () {
    var handleChange = jest.fn();
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onChange: handleChange,
      disabled: true
    }));
    subject.simulate('change', {});
    var expected = 0;
    var actual = handleChange.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should update \'value\' when \'onChange\' invoked and is not controlled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultValue: 0
    }));
    subject.find(DivComponent).prop('onChange')({
      value: 1
    });
    subject.update();
    var expected = 1;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
  test('should not update \'value\' when \'onChange\' invoked and is not controlled but disabled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultValue: 0,
      disabled: true
    }));
    subject.find(DivComponent).prop('onChange')({
      value: 1
    });
    var expected = 0;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
  test('should not update \'value\' when \'onChange\' invoked and is controlled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      value: 0
    }));
    subject.find(DivComponent).prop('onChange')({
      value: 1
    });
    var expected = 0;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
  test('should update \'value\' with new props when is controlled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      value: 0
    }));
    subject.setProps({
      value: 1
    });
    var expected = 1;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
  test.skip('should not update \'value\' with new props when is not controlled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultValue: 0
    }));
    subject.setProps({
      value: 1
    });
    var expected = 0;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
  test('should not update the value with new defaultProp when is not controlled', function () {
    var Component = (0, _Changeable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultValue: 0
    }));
    subject.setProps({
      defaultValue: 1
    });
    var expected = 0;
    var actual = subject.find(DivComponent).prop('value');
    expect(actual).toBe(expected);
  });
});