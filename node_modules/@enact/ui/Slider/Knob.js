"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Knob = exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ComponentOverride = _interopRequireDefault(require("../ComponentOverride"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * An unstyled, knob component to be used with a `Slider`.
 *
 * @class Knob
 * @memberof ui/Slider
 * @ui
 * @public
 */
var Knob = (0, _kind["default"])({
  name: 'Knob',
  propTypes:
  /** @lends ui/Slider.Knob.prototype */
  {
    /**
     * The orientation of the slider, either `"horizontal"` or `"vertical"`.
     *
     * @type {String}
     * @default "horizontal"
     * @public
     */
    orientation: _propTypes2["default"].oneOf(['horizontal', 'vertical']),

    /**
     * A number between 0 and 1 representing the proportion of the `value` in terms of `min`
     * and `max` props of the slider.
     *
     * @type {Boolean}
     * @public
     */
    proportion: _propTypes2["default"].number,

    /**
     * Adds a tooltip to the knob using the provided component.
     *
     * The following props are forwarded to the tooltip:
     *
     * * `children` - The `value` prop from the slider
     * * `orientation` - The value of the `orientation` prop from the slider
     * * `proportion` - The value of the `proportion` prop from the knob
     *
     * This prop accepts either a Component (e.g. `MyTooltip`} which will be instantiated with
     * the above props or a component instance (e.g. `<MyTooltip customProp="value" />`) which
     * will have its props merged with the above props.
     *
     * @see {@link ui/ComponentOverride}
     *
     * @type {Function|Element}
     * @public
     */
    tooltipComponent: _propTypes["default"].componentOverride,

    /**
     * The value of the slider.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    value: _propTypes2["default"].number
  },
  render: function render(_ref) {
    var orientation = _ref.orientation,
        proportion = _ref.proportion,
        tooltipComponent = _ref.tooltipComponent,
        value = _ref.value,
        rest = _objectWithoutProperties(_ref, ["orientation", "proportion", "tooltipComponent", "value"]);

    return _react["default"].createElement("div", rest, _react["default"].createElement(_ComponentOverride["default"], {
      component: tooltipComponent,
      orientation: orientation,
      proportion: proportion
    }, value));
  }
});
exports.Knob = Knob;
var _default = Knob;
exports["default"] = _default;