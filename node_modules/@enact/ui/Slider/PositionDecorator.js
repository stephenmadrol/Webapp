"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PositionDecorator = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _handle = require("@enact/core/handle");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _validators = require("../internal/validators");

var _utils = require("./utils");

var _SliderModule = _interopRequireDefault(require("./Slider.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var PositionDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class, _temp;

  // eslint-disable-line no-unused-vars
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));
      _this.handleDown = _this.handleDown.bind(_assertThisInitialized(_this));
      _this.handleDrag = _this.handleDrag.bind(_assertThisInitialized(_this));
      _this.handleDragStart = _this.handleDragStart.bind(_assertThisInitialized(_this));
      _this.bounds = {};
      _this.dragConfig = {
        global: true
      };
      return _this;
    }

    _createClass(_class, [{
      key: "emitChangeForPosition",
      value: function emitChangeForPosition(x, y) {
        var _this$props = this.props,
            max = _this$props.max,
            min = _this$props.min,
            orientation = _this$props.orientation,
            step = _this$props.step;
        var position = x;
        var offset = this.bounds.offsetX;

        if (orientation === 'vertical') {
          position = y;
          offset = this.bounds.offsetY;
        }

        var proportion = (0, _utils.calcProportion)(this.bounds.min, this.bounds.max, position - offset);

        if (orientation === 'vertical') {
          proportion = 1 - proportion;
        }

        var value = (max - min) * proportion + min; // adjust value for stepping

        if (step) {
          var delta = (value - min) % step;

          if (delta < step / 2) {
            value -= delta;
          } else {
            value += step - delta;
          } // recalculate the proportion based on the stepped value


          proportion = (0, _utils.calcProportion)(min, max, value);
        }

        if (value !== this.props.value) {
          (0, _handle.forward)('onChange', {
            type: 'onChange',
            value: value,
            proportion: proportion
          }, this.props);
        }
      }
    }, {
      key: "updateBounds",
      value: function updateBounds(node) {
        var orientation = this.props.orientation;
        var bounds = node.getBoundingClientRect();
        var computedStyle = window.getComputedStyle(node);

        if (orientation === 'horizontal') {
          this.bounds.min = bounds.left + parseInt(computedStyle.paddingLeft);
          this.bounds.max = bounds.right - parseInt(computedStyle.paddingRight);
        } else {
          this.bounds.min = bounds.top + parseInt(computedStyle.paddingTop);
          this.bounds.max = bounds.bottom - parseInt(computedStyle.paddingBottom);
        }
      }
    }, {
      key: "updateOffset",
      value: function updateOffset(clientX, clientY, target) {
        this.bounds.offsetX = 0;
        this.bounds.offsetY = 0;
        var knob = target.closest(".".concat(_SliderModule["default"].knob));

        if (knob) {
          var rect = knob.getBoundingClientRect();
          var centerX = rect.left + rect.width / 2;
          var centerY = rect.top + rect.height / 2;
          this.bounds.offsetX = clientX - centerX;
          this.bounds.offsetY = clientY - centerY;
        }
      }
    }, {
      key: "handleDown",
      value: function handleDown(_ref) {
        var clientX = _ref.clientX,
            clientY = _ref.clientY,
            currentTarget = _ref.currentTarget,
            target = _ref.target;
        // bail early for emulated mousedown events from key presses
        if (typeof clientX === 'undefined' || typeof clientY === 'undefined') return;
        this.updateBounds(currentTarget);
        this.updateOffset(clientX, clientY, target);
        this.emitChangeForPosition(clientX, clientY);
      }
    }, {
      key: "handleDragStart",
      value: function handleDragStart(ev) {
        (0, _handle.forward)('onDragStart', ev, this.props);
        this.emitChangeForPosition(ev.x, ev.y);
      }
    }, {
      key: "handleDrag",
      value: function handleDrag(ev) {
        (0, _handle.forward)('onDrag', ev, this.props);
        this.emitChangeForPosition(ev.x, ev.y);
      }
    }, {
      key: "render",
      value: function render() {
        if (process.env.NODE_ENV !== "production") {
          var _this$props2 = this.props,
              min = _this$props2.min,
              _this$props2$value = _this$props2.value,
              value = _this$props2$value === void 0 ? min : _this$props2$value,
              max = _this$props2.max,
              step = _this$props2.step;
          (0, _validators.validateRange)(value, min, max, 'Slider');
          (0, _validators.validateStepped)(value, min, step, 'Slider');
          (0, _validators.validateStepped)(max, min, step, 'Slider', '"max"');
        }

        return _react["default"].createElement(Wrapped, Object.assign({}, this.props, {
          dragConfig: this.dragConfig,
          onDown: this.handleDown,
          onDragStart: this.handleDragStart,
          onDrag: this.handleDrag
        }));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'PositionDecorator', _class.propTypes = {
    disabled: _propTypes["default"].bool,
    max: _propTypes["default"].number,
    min: _propTypes["default"].number,
    onChange: _propTypes["default"].func,
    orientation: _propTypes["default"].string,
    step: _propTypes["default"].number,
    value: _propTypes["default"].number
  }, _class.defaultProps = {
    disabled: false,
    max: 100,
    min: 0,
    orientation: 'horizontal',
    step: 1
  }, _temp;
});
exports.PositionDecorator = PositionDecorator;
var _default = PositionDecorator;
exports["default"] = _default;