"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _RadioDecorator = require("../RadioDecorator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('RadioDecorator', function () {
  // eslint-disable-next-line enact/prop-types
  var Item = function Item(_ref) {
    var onClick = _ref.onClick,
        active = _ref.active;
    return _react["default"].createElement("span", {
      onClick: onClick
    }, active ? 'Active' : 'Inactive');
  };

  var Controller = (0, _RadioDecorator.RadioControllerDecorator)('main');

  var expectToBeActive = function expectToBeActive(controller, decorator) {
    expect(controller.instance().active).toBe(decorator && decorator.instance().handleDeactivate);
  };

  test('should be activated when its prop is true on mount', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
      active: true
    })));
    var instance = subject.find('RadioDecorator');
    expectToBeActive(subject, instance);
  });
  test('should not be activated when its prop is false on mount', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, null)));
    expectToBeActive(subject, null);
  });
  test('should be activated when its prop is set to true after mount', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      prop: 'active'
    }, Item);

    var Wrapper = function Wrapper(_ref2) {
      var active = _ref2.active;
      return (// eslint-disable-line enact/prop-types
        _react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
          active: active
        }))
      );
    };

    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapper, null));
    subject.setProps({
      active: true
    });
    var instance = subject.find('RadioDecorator');
    expectToBeActive(subject.find('RadioControllerDecorator'), instance);
  });
  test('should be activated when the activated event fires', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      activate: 'onClick',
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, null)));
    subject.find('span').simulate('click');
    var instance = subject.find('RadioDecorator');
    expectToBeActive(subject, instance);
  });
  test('should be deactivated when the deactivated event fires', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      deactivate: 'onClick',
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
      active: true
    })));
    subject.find('span').simulate('click');
    expectToBeActive(subject, null);
  });
  test('should be deactivated when the activated event fires on another instance', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      activate: 'onClick',
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
      active: true
    }), _react["default"].createElement(Component, null)));
    subject.find('span').at(1).simulate('click');
    var instance = subject.find('RadioDecorator').at(1);
    expectToBeActive(subject, instance);
  });
  test('should not deactivate items in a ancestor controller', function () {
    var Component = (0, _RadioDecorator.RadioDecorator)({
      activate: 'onClick',
      prop: 'active'
    }, Item);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
      active: true
    }), _react["default"].createElement(Component, null), _react["default"].createElement(Controller, {
      "data-child-controller": true
    }, _react["default"].createElement(Component, {
      active: true
    }), _react["default"].createElement(Component, null))));
    var childController = subject.find('RadioControllerDecorator').at(1);
    childController.find('span').at(1).simulate('click'); // Breaking the pattern of 1 expect per test in order to verify the expect change happened
    // (activating second component in child controller) and no unexpected change happened in
    // the parent controller (active component should remain the first component)

    var childInstance = childController.find('RadioDecorator').at(1);
    expectToBeActive(childController, childInstance);
    var parentInstance = subject.find('RadioDecorator').at(0);
    expectToBeActive(subject, parentInstance);
  });
  test('should not call deactivate callback on inactive items', function () {
    var handleDeactivate = jest.fn();
    var Component = (0, _RadioDecorator.RadioDecorator)({
      deactivate: 'onClick',
      prop: 'active'
    }, Item); // deactivate() is only called when there was a previously active item

    var Wrapper = function Wrapper(_ref3) {
      var active = _ref3.active;
      return (// eslint-disable-line enact/prop-types
        _react["default"].createElement(Controller, null, _react["default"].createElement(Component, {
          active: !active
        }), _react["default"].createElement(Component, {
          active: active
        }), _react["default"].createElement(Component, {
          onClick: handleDeactivate
        }))
      );
    }; // create a controller with no active item


    var subject = (0, _enzyme.mount)(_react["default"].createElement(Wrapper, null)); // activate the second item via prop change

    subject.setProps({
      active: true
    }); // verify that the deactivate handler wasn't called

    var expected = 0;
    var actual = handleDeactivate.mock.calls.length;
    expect(actual).toBe(expected);
  });
});