"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "RadioControllerDecorator", {
  enumerable: true,
  get: function get() {
    return _RadioControllerDecorator.RadioControllerDecorator;
  }
});
exports.RadioDecorator = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = _interopRequireDefault(require("react"));

var _RadioControllerDecorator = require("./RadioControllerDecorator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Default config for `RadioDecorator`.
 *
 * @memberof ui/RadioDecorator.RadioDecorator
 * @hocconfig
 */
var defaultConfig = {
  /**
   * The event indicating the wrapped component is activated
   *
   * @type {String}
   * @default null
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  activate: null,

  /**
   * The event indicating the wrapped component is deactivated
   *
   * @type {String}
   * @default null
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  deactivate: null,

  /**
   * The name of a boolean prop that activates the wrapped component when it is true.
   *
   * @type {String}
   * @default 'active'
   * @memberof ui/RadioDecorator.RadioDecorator.defaultConfig
   */
  prop: 'active'
};
/**
 * A higher-order component (HOC) that allows another component to have a mutually exclusive
 * relationship with other descendants of the same {@link ui/RadioDecorator.RadioControllerDecorator}.
 *
 * When the `activate` event for the wrapped component is called, the component is activated and the
 * previously activated component, if any, is deactivated by invoking the `deactivate` event.
 *
 * @class RadioDecorator
 * @memberof ui/RadioDecorator
 * @hoc
 * @public
 */

var RadioDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var activate = config.activate,
      deactivate = config.deactivate,
      prop = config.prop;
  var forwardActivate = (0, _handle.forward)(activate);
  var forwardDeactivate = (0, _handle.forward)(deactivate);
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.deactivate = function () {
        if (_this.props[prop]) {
          forwardDeactivate(null, _this.props);
        }
      };

      _this.handleActivate = function () {
        if (_this.controller) {
          _this.controller.notify({
            action: 'activate'
          });
        }

        forwardActivate(null, _this.props);
      };

      _this.handleDeactivate = function () {
        if (_this.controller) {
          _this.controller.notify({
            action: 'deactivate'
          });
        }

        forwardDeactivate(null, _this.props);
      };

      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          this.controller = this.context(this.handleDeactivate);
          this.notifyController();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.notifyController();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.controller) {
          this.controller.unregister();
        }
      }
    }, {
      key: "notifyController",
      value: function notifyController() {
        if (this.controller && prop && this.props[prop]) {
          this.controller.notify({
            action: 'activate'
          });
        }
      }
      /*
       * Invoked by a `RadioControllerDecorator` when the wrapped component should be deactivated
       *
       * @returns {undefined}
       */

    }, {
      key: "render",
      value: function render() {
        var props = this.props;

        if (activate || deactivate) {
          props = Object.assign({}, this.props);
          if (activate) props[activate] = this.handleActivate;
          if (deactivate) props[deactivate] = this.handleDeactivate;
        }

        return _react["default"].createElement(Wrapped, props);
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'RadioDecorator', _class.contextType = _RadioControllerDecorator.RadioContext, _temp;
});
exports.RadioDecorator = RadioDecorator;
var _default = RadioDecorator;
exports["default"] = _default;