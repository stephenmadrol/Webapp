"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioControllerDecorator = exports.RadioContext = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _Registry = _interopRequireDefault(require("@enact/core/internal/Registry"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var RadioContext = _react["default"].createContext();
/**
 * A higher-order component that establishes a radio group context for its descendants.
 *
 * Any descendants that are wrapped by {@link ui/RadioDecorator.RadioDecorator} will be mutually exclusive.
 *
 * @class RadioControllerDecorator
 * @memberof ui/RadioDecorator
 * @hoc
 * @public
 */


exports.RadioContext = RadioContext;
var RadioControllerDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class, _temp;

  // eslint-disable-line no-unused-vars
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));
      _this.active = null;
      _this.registry = _Registry["default"].create(_this.handleNotify.bind(_assertThisInitialized(_this)));
      return _this;
    }

    _createClass(_class, [{
      key: "handleNotify",
      value: function handleNotify(ev, instance) {
        if (ev.action === 'activate') {
          this.activate(instance);
        } else if (ev.action === 'deactivate') {
          this.deactivate(instance);
        }
      }
    }, {
      key: "activate",
      value: function activate(item) {
        var _this2 = this;

        // if the active radio item isn't item and item is active, try to deactivate all the
        // other radio items
        if (this.active && this.active !== item) {
          this.registry.notify({
            action: 'deactivate'
          }, function (i) {
            return i === _this2.active;
          });
        }

        this.active = item;
      }
    }, {
      key: "deactivate",
      value: function deactivate(item) {
        if (this.active === item) {
          this.active = null;
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react["default"].createElement(RadioContext.Provider, {
          value: this.registry.register
        }, _react["default"].createElement(Wrapped, this.props));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'RadioControllerDecorator', _temp;
});
exports.RadioControllerDecorator = RadioControllerDecorator;
var _default = RadioControllerDecorator;
exports["default"] = _default;