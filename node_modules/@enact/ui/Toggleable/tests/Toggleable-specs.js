"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Toggleable = _interopRequireDefault(require("../Toggleable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

describe('Toggleable', function () {
  var DivComponent = function DivComponent() {
    return _react["default"].createElement("div", null, "Toggle");
  };

  describe('#config', function () {
    test('should pass \'selected\' to the wrapped component', function () {
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = 'selected';
      var actual = wrapped.props();
      expect(actual).toHaveProperty(expected);
    });
    test('should pass configured \'prop\' \'banana\' as the toggled state\'s key to the wrapped component', function () {
      var prop = 'banana';
      var Component = (0, _Toggleable["default"])({
        prop: prop
      }, DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true
      }));
      var wrapped = subject.find(DivComponent);
      var expected = prop;
      var actual = wrapped.props();
      expect(actual).toHaveProperty(expected);
    });
    test('should pass \'onToggle\' handler to the wrapped component', function () {
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = 'function';

      var actual = _typeof(wrapped.prop('onToggle'));

      expect(actual).toBe(expected);
    });
    test('should pass configured \'toggle\' handler to the wrapped component', function () {
      var handle = 'onClick';
      var Component = (0, _Toggleable["default"])({
        toggle: handle
      }, DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = 'function';

      var actual = _typeof(wrapped.prop(handle));

      expect(actual).toBe(expected);
    });
  });
  describe('#prop', function () {
    test('should use defaultSelected prop when selected prop is omitted', function () {
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true
      }));
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, true);
    });
    test('should warn when \'defaultSelected\' and \'selected\' props are provided', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true,
        selected: true
      }));
      var expected = 1;
      var actual = spy.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should use defaultSelected prop when selected prop is null', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true,
        selected: null
      }));
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, true);
      expect(spy).toHaveBeenCalled();
    });
    test('should use selected prop when selected changed from truthy to null', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true,
        selected: true
      }));
      subject.setProps({
        selected: null
      });
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, false);
      expect(spy).toHaveBeenCalled();
    });
    test('should use defaultSelected prop when selected prop is undefined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)( // eslint-disable-next-line no-undefined
      _react["default"].createElement(Component, {
        defaultSelected: true,
        selected: undefined
      }));
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, true);
      expect(spy).toHaveBeenCalled();
    });
    test('should use selected prop when selected changed from truthy to undefined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true,
        selected: true
      })); // eslint-disable-next-line no-undefined

      subject.setProps({
        selected: undefined
      });
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, false);
      expect(spy).toHaveBeenCalled();
    });
    test('should use selected prop when both selected and defaultSelected are defined', function () {
      var spy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var Component = (0, _Toggleable["default"])(DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
        defaultSelected: true,
        selected: false
      }));
      var expected = 'selected';
      var actual = subject.find(DivComponent).props();
      expect(actual).toHaveProperty(expected, false);
      expect(spy).toHaveBeenCalled();
    });
  }); // test forwarding events

  test('should invoke passed \'onToggle\' handler', function () {
    var handleToggle = jest.fn();
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onToggle: handleToggle
    }));
    subject.simulate('toggle');
    var expected = 1;
    var actual = handleToggle.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should invoke passed \'onActivate\' handler', function () {
    var handleActivate = jest.fn();
    var Component = (0, _Toggleable["default"])({
      activate: 'onActivate'
    }, DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onActivate: handleActivate
    }));
    subject.simulate('activate');
    var expected = 1;
    var actual = handleActivate.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should invoke passed \'onDeactivate\' handler', function () {
    var handleDeactivate = jest.fn();
    var Component = (0, _Toggleable["default"])({
      deactivate: 'onDeactivate'
    }, DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onDeactivate: handleDeactivate
    }));
    subject.simulate('deactivate');
    var expected = 1;
    var actual = handleDeactivate.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not invoke passed \'onToggle\' handler when disabled', function () {
    var handleToggle = jest.fn();
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onToggle: handleToggle,
      disabled: true
    }));
    subject.simulate('toggle');
    var expected = 0;
    var actual = handleToggle.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not invoke passed \'onActivate\' handler when disabled', function () {
    var handleActivate = jest.fn();
    var Component = (0, _Toggleable["default"])({
      activate: 'onActivate'
    }, DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onActivate: handleActivate,
      disabled: true
    }));
    subject.simulate('activate');
    var expected = 0;
    var actual = handleActivate.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not invoke passed \'onDeactivate\' handler when \'disabled\'', function () {
    var handleDeactivate = jest.fn();
    var Component = (0, _Toggleable["default"])({
      deactivate: 'onDeactivate'
    }, DivComponent);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      onDeactivate: handleDeactivate,
      disabled: true
    }));
    subject.simulate('deactivate');
    var expected = 0;
    var actual = handleDeactivate.mock.calls.length;
    expect(actual).toBe(expected);
  }); // test updating state

  test('should update \'selected\' when \'onToggle\' invoked and is not controlled', function () {
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true
    }));
    subject.find(DivComponent).prop('onToggle')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, false);
  });
  test('should update \'selected\' when \'onJiggle\' invoked and is not controlled', function () {
    var Component = (0, _Toggleable["default"])({
      toggleProp: 'onJiggle'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true
    }));
    subject.find(DivComponent).prop('onJiggle')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, false);
  });
  test('should not update \'selected\' when \'onToggle\' invoked and is not controlled but disabled', function () {
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true,
      disabled: true
    }));
    subject.find(DivComponent).prop('onToggle')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, true);
  });
  test('should not update \'selected\' when \'onActivate\' invoked and is not controlled but disabled', function () {
    var Component = (0, _Toggleable["default"])({
      activate: 'onActivate'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: false,
      disabled: true
    }));
    subject.find(DivComponent).prop('onActivate')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, false);
  });
  test('should not update \'selected\' when \'onDeactivate\' invoked and is not controlled but disabled', function () {
    var Component = (0, _Toggleable["default"])({
      deactivate: 'onDeactivate'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true,
      disabled: true
    }));
    subject.find(DivComponent).prop('onDeactivate')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, true);
  });
  test('should not update \'selected\' when \'onToggle\' invoked and is controlled', function () {
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      selected: true
    }));
    subject.find(DivComponent).prop('onToggle')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, true);
  });
  test('should not update \'selected\' when \'onJiggle\' invoked and is controlled', function () {
    var Component = (0, _Toggleable["default"])({
      toggleProp: 'onJiggle'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      selected: true
    }));
    subject.find(DivComponent).prop('onJiggle')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, true);
  });
  test('should not update \'selected\' when \'onActivate\' invoked and is controlled', function () {
    var Component = (0, _Toggleable["default"])({
      activate: 'onActivate'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      selected: false
    }));
    subject.find(DivComponent).prop('onActivate')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected, false);
  });
  test('should not update \'selected\' when \'onDeactivate\' invoked and is controlled', function () {
    var Component = (0, _Toggleable["default"])({
      deactivate: 'onDeactivate'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      selected: true
    }));
    subject.find(DivComponent).prop('onDeactivate')();
    subject.update();
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected);
  });
  test('should update \'selected\' with new props when controlled', function () {
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      selected: true
    }));
    subject.setProps({
      selected: false
    });
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected);
  });
  test.skip('should not update \'selected\' with new props when not controlled', function () {
    var Component = (0, _Toggleable["default"])(DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true
    }));
    subject.setProps({
      selected: false
    });
    var expected = 'selected';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected);
  });
  test('should not update \'selected\' with custom prop and new defaultProp when not controlled', function () {
    var Component = (0, _Toggleable["default"])({
      prop: 'active'
    }, DivComponent);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
      defaultSelected: true
    }));
    subject.setProps({
      defaultSelected: false
    });
    var expected = 'active';
    var actual = subject.find(DivComponent).getElement().props;
    expect(actual).toHaveProperty(expected);
  });
});