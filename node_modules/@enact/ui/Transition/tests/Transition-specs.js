"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Transition = _interopRequireWildcard(require("../Transition"));

var _TransitionModule = _interopRequireDefault(require("../Transition.module.css"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('Transition Specs', function () {
  // NOTE: Feature not yet implemented
  test.skip('should apply author classes', function () {
    var className = 'classA classB';

    var ChildNode = function ChildNode(props) {
      return _react["default"].createElement("div", props, "Body");
    };

    var wrapped = (0, _enzyme.mount)(_react["default"].createElement(_Transition["default"], {
      className: className
    }, _react["default"].createElement(ChildNode, null)));
    var expected = className;
    var actual = wrapped.find('ChildNode').prop('className');
    expect(actual).toContain(expected);
  }); // NOTE: Feature not yet implemented

  test.skip('should apply author styles', function () {
    var styles = {
      color: '#000000',
      backgroundColor: '#FFFFFF'
    };

    var ChildNode = function ChildNode(props) {
      return _react["default"].createElement("div", props, "Body");
    };

    var wrapped = (0, _enzyme.mount)(_react["default"].createElement(_Transition["default"], {
      style: styles
    }, _react["default"].createElement(ChildNode, null)));
    var expected = styles;
    var actual = wrapped.find('ChildNode').prop('style');
    expect(actual).toBe(expected);
  });
  test('should apply \'shown\' class when visible', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Transition.TransitionBase, null));
    var expected = 'shown';
    var actual = subject.find('div').at(0).prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply \'hidden\' class when not visible', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Transition.TransitionBase, {
      visible: false
    }));
    var expected = 'hidden';
    var actual = subject.find('div').at(0).prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply \'shown\' class when visible with noAnimation', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Transition.TransitionBase, {
      noAnimation: true
    }));
    var expected = 'shown';
    var actual = subject.find('div').at(0).prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply \'hidden\' class when not visible with noAnimation', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Transition.TransitionBase, {
      visible: false,
      noAnimation: true
    }));
    var expected = 'hidden';
    var actual = subject.find('div').at(0).prop('className');
    expect(actual).toContain(expected);
  }); // Tests for prop and className combinations

  var directionCombination = [[_TransitionModule["default"].up, 'up'], [_TransitionModule["default"].right, 'right'], [_TransitionModule["default"].down, 'down'], [_TransitionModule["default"].left, 'left']];
  var durationCombination = [[_TransitionModule["default"]["short"], 'short'], [_TransitionModule["default"].medium, 'medium'], [_TransitionModule["default"]["long"], 'long']];
  var timingFunctionCombination = [[_TransitionModule["default"].ease, 'ease'], [_TransitionModule["default"]['ease-in'], 'ease-in'], [_TransitionModule["default"]['ease-out'], 'ease-out'], [_TransitionModule["default"]['ease-in-out'], 'ease-in-out'], [_TransitionModule["default"]['ease-in-quart'], 'ease-in-quart'], [_TransitionModule["default"]['ease-out-quart'], 'ease-out-quart'], [_TransitionModule["default"].linear, 'linear']];
  var propStyleCombination = [['duration', durationCombination], ['direction', directionCombination], ['timingFunction', timingFunctionCombination]];
  propStyleCombination.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        prop = _ref2[0],
        val = _ref2[1];

    val.forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

      test("should apply classes for ".concat(prop, "=\"").concat(value, "\""), function () {
        var propValue = _defineProperty({}, prop, value);

        var wrapped = (0, _enzyme.mount)(_react["default"].createElement(_Transition["default"], Object.assign({}, propValue, {
          visible: true
        }), "Body"));
        var expected = key;
        var actual = wrapped.find('div').at(0).prop('className');
        expect(actual).toContain(expected);
      });
    });
  });
});