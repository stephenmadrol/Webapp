// Type definitions for ui/Button

import * as React from "react";
import { TouchableProps as ui_Touchable_TouchableProps } from "@enact/ui/Touchable";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface ButtonBaseProps {
  /**
 * Customizes the component by mapping the supplied collection of CSS class names to the
corresponding internal Elements and states of this component.
 * 
 * The following classes are supported:
 * *  `button`  - The root component class
 * *  `bg`  - The background node of the button
 * *  `client`  - The content node of the button
 * *  `icon`  - The icon node, when  `icon`  is set
 * *  `minWidth`  - Applied when  `minWidth`  prop is  `true`
 * *  `pressed`  - Applied when  `pressed`  prop is  `true`
 * *  `selected`  - Applied when  `selected`  prop is  `true`
 * *  `small`  - Applied when  `small`  prop is  `true`
 */
  css?: object;
  /**
   * Applies the  `disabled`  class.
   *
   * When  `true` , the button is shown as disabled.
   */
  disabled?: boolean;
  /**
 * The icon displayed within the Button.
 * 
 * The icon will be displayed before the natural reading order of the text, regardless
of locale. Any string that is valid for its    is
valid here. If  `icon`  is specified as a string and  `iconButton`  is undefined, the icon is
not rendered.
 * 
 * This also supports a custom icon, in the form of a DOM node or a Component,
with the caveat that if you supply a custom icon, you are responsible for sizing and
locale positioning of the custom component.
 */
  icon?: React.ReactNode;
  /**
 * The component used to render the  icon  .
 * 
 * This component will receive the  `small`  property set on the Button as well as the  `icon` 
class to customize its styling. If  icon   is not a
string, this property is not used.
 */
  iconComponent?: React.ComponentType;
  /**
 * Enforces a minimum width for the component.
 * 
 * Applies the  `minWidth`  CSS class which can be customized by
 theming  .
 */
  minWidth?: boolean;
  /**
 * Indicates the component is depressed.
 * 
 * Applies the  `pressed`  CSS class which can be customized by
 theming  .
 */
  pressed?: boolean;
  /**
 * Indicates the component is selected.
 * 
 * Applies the  `selected`  CSS class which can be customized by
 theming  .
 */
  selected?: boolean;
  /**
 * Reduces the size of the component.
 * 
 * Applies the  `small`  CSS class which can be customized by
 theming  .
 */
  small?: boolean;
}
/**
 * A basic button component structure without any behaviors applied to it.
 */

export class ButtonBase extends React.Component<
  ButtonBaseProps & React.HTMLProps<HTMLElement>
> {}

export interface ButtonDecoratorProps extends ui_Touchable_TouchableProps {}
export function ButtonDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & ButtonDecoratorProps>;

export interface ButtonProps
  extends Merge<ButtonBaseProps, ButtonDecoratorProps> {}
/**
 * A minimally-styled button component with touch support.
 */

export class Button extends React.Component<
  ButtonProps & React.HTMLProps<HTMLElement>
> {}

export default Button;
