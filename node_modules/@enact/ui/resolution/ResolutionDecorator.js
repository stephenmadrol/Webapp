"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResolutionDecorator = exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _resolution = require("./resolution");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Default config for `ResolutionDecorator`.
 *
 * @memberof ui/resolution.ResolutionDecorator
 * @hocconfig
 */
var defaultConfig = {
  /**
   * Attaches an event listener to the window to listen for resize events.
   *
   * @type {Boolean}
   * @default true
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  dynamic: true,

  /**
   * An array of objects containing declarations for screen types to add to the list of known
   * screen types.
   *
   * @type {Object[]}
   * @default null
   * @public
   * @memberof ui/resolution.ResolutionDecorator.defaultConfig
   */
  screenTypes: null
};
/**
 * A higher-order component that configures resolution support for its wrapped component tree.
 *
 * Configuration options:
 *	* `dynamic: true` - when `true`, updates the resolution classes when the window resizes
 *	* `screenTypes: null` - defines a set of screen types to support
 *
 * Example:
 * ```
 *	// Will have the resolution classes and will be updated when the window resizes
 *	const AppWithResolution = ResolutionDecorator(App);
 *	// Will have the resolution classes for the screen at the time of render only
 *	const AppWithStaticResolution = ResolutionDecorator({dynamic: false}, App);
 *	const AppWithScreenTypes = ResolutionDecorator({screenTypes: [
 *		{name: 'hd', pxPerRem: 16, width: 1280, height: 720, aspectRatioName: 'hdtv', base: true}
 *	]}, App);
 * ```
 * @class ResolutionDecorator
 * @memberof ui/resolution
 * @hoc
 * @public
 */

var ResolutionDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  if (config.screenTypes) {
    (0, _resolution.defineScreenTypes)(config.screenTypes);
  }

  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));

      _this.handleResize = function () {
        var classNames = _this.didClassesChange();

        if (classNames) {
          _this.setState({
            resolutionClasses: classNames
          });
        }
      };

      (0, _resolution.init)({
        measurementNode: typeof window !== 'undefined' && window
      });
      _this.state = {
        resolutionClasses: ''
      };
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (config.dynamic) window.addEventListener('resize', this.handleResize); // eslint-disable-next-line react/no-find-dom-node

        this.rootNode = _reactDom["default"].findDOMNode(this);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (config.dynamic) window.removeEventListener('resize', this.handleResize);
      }
    }, {
      key: "didClassesChange",

      /*
       * Compare our current version of the resolved resolution class names with a fresh
       * initialization of RI.
       *
       * @returns {String|undefined} A string of new class names or undefined when there is no change.
       * @private
       */
      value: function didClassesChange() {
        var prevClassNames = (0, _resolution.getResolutionClasses)();
        (0, _resolution.init)({
          measurementNode: this.rootNode
        });
        var classNames = (0, _resolution.getResolutionClasses)();

        if (prevClassNames !== classNames) {
          return classNames;
        }
      }
    }, {
      key: "render",
      value: function render() {
        // Check if the classes are different from our previous classes
        var classes = (0, _resolution.getResolutionClasses)();
        if (this.props.className) classes += (classes ? ' ' : '') + this.props.className;
        return _react["default"].createElement(Wrapped, Object.assign({}, this.props, {
          className: classes
        }));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'ResolutionDecorator', _class.propTypes =
  /** @lends ui/resolution.ResolutionDecorator.prototype */
  {
    className: _propTypes["default"].string
  }, _temp;
});
exports.ResolutionDecorator = ResolutionDecorator;
var _default = ResolutionDecorator;
exports["default"] = _default;