"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ResolutionDecorator = _interopRequireDefault(require("../ResolutionDecorator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('ResolutionDecorator Specs', function () {
  test('should apply resolution classes to the wrapped component', function () {
    var Component = (0, _ResolutionDecorator["default"])('div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var div = subject.find('div');
    var expected = true;
    var actual = div.hasClass('enact-res-standard') && (div.hasClass('enact-orientation-landscape') || div.hasClass('enact-orientation-portrait'));
    expect(actual).toBe(expected);
  });
  test('should allow custom screen types', function () {
    var name = 'mhd';
    var screens = [{
      name: name,
      pxPerRem: 36,
      width: 1440,
      height: 920,
      aspectRatioName: 'hdtv',
      base: true
    }];
    var Component = (0, _ResolutionDecorator["default"])({
      screenTypes: screens
    }, 'div');
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var expected = true;
    var actual = subject.find('div').hasClass('enact-res-mhd');
    expect(actual).toBe(expected);
  });
  test.skip('should update the resolution when the screen is resized', function () {// TODO: write a test
  });
  test.skip('should not allow dynamic resolution updates when \'dynamic\' config option is false', function () {// TODO: write a test
  });
});