"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapWithView = exports.View = exports["default"] = void 0;

var _util = require("@enact/core/util");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Arranger = require("./Arranger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// If the View was "appearing", then entering will always be false and this will not result in a
// re-render. If the view should enter, state.enter will be true and this will toggle it to false
// causing a re-render.
var clearEntering = function clearEntering(_ref) {
  var entering = _ref.entering;
  return entering ? {
    entering: false
  } : null;
};
/**
 * A `View` wraps a set of children for {@link ui/ViewManager.ViewManager}.
 * It is not intended to be used directly
 *
 * @class View
 * @memberof ui/ViewManager
 * @private
 */


var View =
/*#__PURE__*/
function (_React$Component) {
  _inherits(View, _React$Component);

  function View(props) {
    var _this;

    _classCallCheck(this, View);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this, props));
    _this.enteringJob = new _util.Job(function () {
      _this.setState(clearEntering);
    });

    _this.prepareTransition = function (arranger, callback, noAnimation) {
      var _this$props = _this.props,
          duration = _this$props.duration,
          index = _this$props.index,
          previousIndex = _this$props.previousIndex,
          reverseTransition = _this$props.reverseTransition;
      /* eslint react/no-find-dom-node: "off" */

      var node = _reactDom["default"].findDOMNode(_assertThisInitialized(_this));

      var currentTime = (0, _util.perfNow)();
      var startTime = currentTime;
      var endTime = startTime + duration; // disable animation when the instance or props flag is true

      noAnimation = noAnimation || _this.props.noAnimation; // Arranges the control each tick and calls the provided callback on complete

      var fn = function fn(start, end, time) {
        _this.cancelAnimationFrame(); // percent is the ratio (between 0 and 1) of the current step to the total steps


        var percent = (time - start) / (end - start);

        if (!noAnimation && percent < 1) {
          // the transition is still in progress so call the arranger
          arranger({
            node: node,
            percent: percent,
            reverseTransition: reverseTransition,
            from: previousIndex,
            to: index
          });
          return true;
        } else {
          // the transition is complete so clean up and ensure we fire a final arrange with
          // a value of 1.
          _this.animation = null;
          arranger({
            node: node,
            percent: 1,
            reverseTransition: reverseTransition,
            from: previousIndex,
            to: index
          });
          callback();
          return false;
        }
      }; // When a new transition is initiated mid-transition, adjust time to account for the current
      // percent complete.


      if (_this.animation && _this.changeDirection) {
        var a = _this.animation;
        var percentComplete = (a.time - a.start) / (a.end - a.start);
        var delta = (endTime - startTime) * (1 - percentComplete);
        startTime -= delta;
        endTime -= delta;
      }

      _this.transition(startTime, endTime, currentTime, fn);
    };

    _this.transition = function (start, end, time, callback) {
      var a = _this.animation = _this.animation || {};
      a.start = start;
      a.end = end;
      a.time = time;

      if (callback(start, end, time) && typeof window !== 'undefined') {
        _this._raf = window.requestAnimationFrame(function () {
          var current = (0, _util.perfNow)();

          _this.transition(start, end, current, callback);
        });
      } else {
        _this._raf = null;
      }
    };

    _this.animation = null;
    _this._raf = null;
    _this.state = {
      entering: !props.appearing
    };
    return _this;
  }

  _createClass(View, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      if (nextProps.leaving) {
        return false;
      }

      return true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.changeDirection = this.animation ? this.props.reverseTransition !== prevProps.reverseTransition : false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelAnimationFrame();
      this.enteringJob.stop();
    }
  }, {
    key: "cancelAnimationFrame",
    value: function cancelAnimationFrame() {
      if (this._raf) {
        if (typeof window !== 'undefined') window.cancelAnimationFrame(this._raf);
        this._raf = null;
      }
    }
  }, {
    key: "componentWillAppear",
    value: function componentWillAppear(callback) {
      var arranger = this.props.arranger;

      if (arranger && arranger.stay) {
        this.prepareTransition(arranger.stay, callback, true);
      } else {
        callback();
      }
    }
  }, {
    key: "componentDidAppear",
    value: function componentDidAppear() {
      this.setState(clearEntering);
    } // This is called at the same time as componentDidMount() for components added to an existing
    // TransitionGroup. It will block other animations from occurring until callback is called. It
    // will not be called on the initial render of a TransitionGroup.

  }, {
    key: "componentWillEnter",
    value: function componentWillEnter(callback) {
      var _this$props2 = this.props,
          arranger = _this$props2.arranger,
          reverseTransition = _this$props2.reverseTransition;

      if (arranger) {
        this.prepareTransition(reverseTransition ? arranger.leave : arranger.enter, callback);
      } else {
        callback();
      }
    }
  }, {
    key: "componentDidEnter",
    value: function componentDidEnter() {
      var _this$props3 = this.props,
          enteringDelay = _this$props3.enteringDelay,
          enteringProp = _this$props3.enteringProp;

      if (enteringProp) {
        // FIXME: `startRafAfter` is a temporary solution using rAF. We need a better way to handle
        // transition cycle and component life cycle to be in sync. See ENYO-4835.
        this.enteringJob.startRafAfter(enteringDelay);
      }
    }
  }, {
    key: "componentWillStay",
    value: function componentWillStay(callback) {
      var arranger = this.props.arranger;

      if (arranger && arranger.stay) {
        this.prepareTransition(arranger.stay, callback);
      } else {
        callback();
      }
    } // This is called when the child has been removed from the ReactTransitionGroup. Though the
    // child has been removed, ReactTransitionGroup will keep it in the DOM until callback is
    // called.

  }, {
    key: "componentWillLeave",
    value: function componentWillLeave(callback) {
      var _this$props4 = this.props,
          arranger = _this$props4.arranger,
          reverseTransition = _this$props4.reverseTransition;
      this.enteringJob.stop();

      if (arranger) {
        this.prepareTransition(reverseTransition ? arranger.enter : arranger.leave, callback);
      } else {
        callback();
      }
    }
    /**
     * Initiates a new transition
     *
     * @param	{Function}	arranger		Arranger function to call (enter, leave)
     * @param	{Function}	callback		Completion callback
     * @param	{Boolean}	[noAnimation]	`true` to disable animation for this transition
     * @returns {undefined}
     * @private
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          enteringProp = _this$props5.enteringProp,
          children = _this$props5.children,
          childProps = _this$props5.childProps;

      if (enteringProp || childProps) {
        var props = Object.assign({}, childProps);

        if (enteringProp) {
          props[enteringProp] = this.state.entering;
        }

        return _react["default"].cloneElement(children, props);
      } else {
        return _react["default"].Children.only(children);
      }
    }
  }]);

  return View;
}(_react["default"].Component); // Not a true render method but instead a wrapper for TransitionGroup to wrap arbitrary children
// with a TransitionGroup-compatible child that supports animation
//
// eslint-disable-next-line enact/display-name


exports.View = View;
View.propTypes =
/** @lends ui/ViewManager.View.prototype */
{
  children: _propTypes["default"].node.isRequired,

  /**
   * Time in milliseconds to complete a transition
   *
   * @type {Number}
   * @required
   * @public
   */
  duration: _propTypes["default"].number.isRequired,

  /**
   * Set to `true` when the View should 'appear' without transitioning into the viewport
   *
   * @type {Boolean}
   * @public
   */
  appearing: _propTypes["default"].bool,

  /**
   * Arranger to control the animation
   *
   * @type {Arranger}
   * @public
   */
  arranger: _Arranger.shape,

  /**
   * An object containing properties to be passed to each child.
   *
   * @type {Object}
   * @public
   */
  childProps: _propTypes["default"].object,

  /**
   * Time, in milliseconds, to wait after a view has entered to inform it by passing the
   * `enteringProp` as `false`.
   *
   * @type {Number}
   * @default 0
   * @public
   */
  enteringDelay: _propTypes["default"].number,

  /**
   * Name of the property to pass to the wrapped view to indicate when it is entering the
   * viewport. When `true`, the view has been created but has not transitioned into place.
   * When `false`, the view has finished its transition.
   *
   * The notification can be delayed by setting `enteringDelay`. If not set, the view will not
   * be notified of the change in transition.
   *
   * @type {String}
   * @public
   */
  enteringProp: _propTypes["default"].string,

  /**
   * Index of the currently 'active' view.
   *
   * @type {Number}
   */
  index: _propTypes["default"].number,

  /**
   * When `true`, indicates if a view is currently leaving.
   *
   * @type {Boolean}
   */
  leaving: _propTypes["default"].bool,

  /**
   * When `true`, indicates if the transition should be animated
   *
   * @type {Boolean}
   * @default true
   * @public
   */
  noAnimation: _propTypes["default"].bool,

  /**
   * Index of the previously 'active' view.
   *
   * @type {Number}
   */
  previousIndex: _propTypes["default"].number,

  /**
   * When `true`, indicates if the transition should be reversed. The effect depends on how the provided
   * `arranger` handles reversal.
   *
   * @type {Boolean}
   * @default false
   */
  reverseTransition: _propTypes["default"].bool
};
View.defaultProps = {
  appearing: false,
  enteringDelay: 0
};

var wrapWithView = function wrapWithView(config) {
  return function (child) {
    return _react["default"].createElement(View, config, child);
  };
};

exports.wrapWithView = wrapWithView;
var _default = View;
exports["default"] = _default;