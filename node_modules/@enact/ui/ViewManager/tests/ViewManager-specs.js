"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireWildcard(require("../"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

describe('ViewManager', function () {
  // Suite-wide setup
  test('should render {component} as its child - <div/> by default', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null, _react["default"].createElement("span", null)));
    var expected = 1;
    var actual = subject.find('div').length;
    expect(actual).toBe(expected);
  });
  test('should render {component} as its child', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      component: "span"
    }, _react["default"].createElement("div", null)));
    var expected = 1;
    var actual = subject.find('span').length;
    expect(actual).toBe(expected);
  });
  test('should render only 1 child view', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], null, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    var expected = 1;
    var actual = subject.find('.view').length;
    expect(actual).toBe(expected);
  });
  test('should render the child at {index}', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    var expected = 'View 4';
    var actual = subject.find('.view').text();
    expect(actual).toBe(expected);
  });
  test('should have 1 child immediately after setting new {index} without an {arranger}', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    subject.setProps({
      index: 4
    });
    var expected = 1;
    var actual = subject.find('.view').length;
    expect(actual).toBe(expected);
  });
  test('should have 1 child immediately after setting new {index} with an {arranger} and {noAnimation} is false', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      arranger: _.SlideLeftArranger,
      noAnimation: true
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    subject.setProps({
      index: 4
    });
    var expected = 1;
    var actual = subject.find('.view').length;
    expect(actual).toBe(expected);
  });
  test('should have 2 children immediately after setting new {index} with an {arranger}', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      arranger: _.SlideLeftArranger
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    subject.setProps({
      index: 4
    });
    var expected = 2;
    var actual = subject.find('.view').length;
    expect(actual).toBe(expected);
  });
  test('should allow child props to update', function () {
    var content = 'updated';

    var ViewManagerTest =
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(ViewManagerTest, _React$Component);

      function ViewManagerTest() {
        _classCallCheck(this, ViewManagerTest);

        return _possibleConstructorReturn(this, _getPrototypeOf(ViewManagerTest).apply(this, arguments));
      }

      _createClass(ViewManagerTest, [{
        key: "render",
        value: function render() {
          return _react["default"].createElement(_["default"], null, _react["default"].createElement("div", {
            className: "view"
          }, this.props.content));
        }
      }]);

      return ViewManagerTest;
    }(_react["default"].Component);

    var subject = (0, _enzyme.mount)(_react["default"].createElement(ViewManagerTest, {
      content: "original"
    }));
    subject.setProps({
      content: content
    });
    var expected = content;
    var actual = subject.find('.view').text();
    expect(actual).toBe(expected);
  });
  test('should have 1 child {duration}ms after setting new {index}', function (done) {
    var duration = 50;
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      duration: duration
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    subject.setProps({
      index: 4
    });
    window.setTimeout(function () {
      var expected = 1;
      var actual = subject.find('.view').length;
      expect(actual).toBe(expected);
      done();
    }, duration + 10);
  });
  test('should have size of 1 on TransitionGroup', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      noAnimation: true,
      index: 0,
      duration: 0
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    var expected = 1;
    var actual = subject.find('TransitionGroup').prop('size');
    expect(actual).toBe(expected);
  });
  test('should update the View reverseTransition prop.', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      noAnimation: true,
      index: 0,
      duration: 0
    }, _react["default"].createElement("div", {
      className: "view"
    }, "View 1"), _react["default"].createElement("div", {
      className: "view"
    }, "View 2"), _react["default"].createElement("div", {
      className: "view"
    }, "View 3"), _react["default"].createElement("div", {
      className: "view"
    }, "View 4"), _react["default"].createElement("div", {
      className: "view"
    }, "View 5")));
    subject.setProps({
      reverseTransition: true
    });
    var actual = subject.find('View').props().reverseTransition;
    expect(actual).toBeTruthy();
  });
  test('should update the View reverseTransition prop to true if it is updated with a smaller index prop.', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 2,
      duration: 0,
      arranger: _.SlideLeftArranger
    }, _react["default"].createElement("div", null, "View 1"), _react["default"].createElement("div", null, "View 2"), _react["default"].createElement("div", null, "View 3"), _react["default"].createElement("div", null, "View 4"), _react["default"].createElement("div", null, "View 5")));
    subject.setProps({
      index: 1
    });
    var actual = subject.find('View').at(0).props().reverseTransition;
    expect(actual).toBeTruthy();
  });
  test('should update the View reverseTransition prop to false even though it is updated with a smaller index prop.', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 2,
      duration: 0,
      arranger: _.SlideLeftArranger
    }, _react["default"].createElement("div", null, "View 1"), _react["default"].createElement("div", null, "View 2"), _react["default"].createElement("div", null, "View 3")));
    subject.setProps({
      index: 1,
      reverseTransition: false
    });
    var actual = subject.find('View').at(0).props().reverseTransition;
    expect(actual).toBeFalsy();
  });
  test('should update the view when children are reordered', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 1
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1"), _react["default"].createElement("div", {
      key: "view2"
    }, "View 2")));
    expect(subject.find('View div').prop('children')).toBe('View 2');
    subject.setProps({
      children: [_react["default"].createElement("div", {
        key: "view2"
      }, "View 2"), _react["default"].createElement("div", {
        key: "view1"
      }, "View 1")]
    });
    expect(subject.find('View div').prop('children')).toBe('View 1');
  });
  test('should update the view when children are replaced', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 0
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1")));
    expect(subject.find('View div').prop('children')).toBe('View 1');
    subject.setProps({
      children: [_react["default"].createElement("div", {
        key: "view2"
      }, "View 2")]
    });
    expect(subject.find('View div').prop('children')).toBe('View 2');
  });
  test('should update the number of views when {start} updates', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      start: 2,
      end: 3
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1"), _react["default"].createElement("div", {
      key: "view2"
    }, "View 2"), _react["default"].createElement("div", {
      key: "view3"
    }, "View 3"), _react["default"].createElement("div", {
      key: "view4"
    }, "View 4")));
    expect(subject.find('View')).toHaveLength(2);
    expect(subject.find('View div').at(0).prop('children')).toBe('View 3');
    subject.setProps({
      start: 1
    });
    expect(subject.find('View')).toHaveLength(3);
    expect(subject.find('View div').at(0).prop('children')).toBe('View 2');
  });
  test('should update the active view when {start}, {end}, and {index} update', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      start: 3,
      end: 3
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1"), _react["default"].createElement("div", {
      key: "view2"
    }, "View 2"), _react["default"].createElement("div", {
      key: "view3"
    }, "View 3"), _react["default"].createElement("div", {
      key: "view4"
    }, "View 4")));
    expect(subject.find('View')).toHaveLength(1);
    expect(subject.find('View div').prop('children')).toBe('View 4');
    subject.setProps({
      start: 2,
      end: 2,
      index: 2
    });
    expect(subject.find('View')).toHaveLength(1);
    expect(subject.find('View div').prop('children')).toBe('View 3');
  });
  test('should extend the view range when {index} is less than {start}', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 1,
      start: 2,
      end: 3
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1"), _react["default"].createElement("div", {
      key: "view2"
    }, "View 2"), _react["default"].createElement("div", {
      key: "view3"
    }, "View 3"), _react["default"].createElement("div", {
      key: "view4"
    }, "View 4")));
    expect(subject.find('View')).toHaveLength(3);
  });
  test('should extend the view range when {index} is greater than {end}', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      index: 3,
      start: 1,
      end: 2
    }, _react["default"].createElement("div", {
      key: "view1"
    }, "View 1"), _react["default"].createElement("div", {
      key: "view2"
    }, "View 2"), _react["default"].createElement("div", {
      key: "view3"
    }, "View 3"), _react["default"].createElement("div", {
      key: "view4"
    }, "View 4")));
    expect(subject.find('View')).toHaveLength(3);
  });
});