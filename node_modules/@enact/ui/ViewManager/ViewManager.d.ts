// Type definitions for ui/ViewManager

import * as React from "react";
import { ForwardRefProps as ui_ForwardRef_ForwardRefProps } from "@enact/ui/ForwardRef";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

/**
 * An object with callback functions to arrange views within   .
 */
export interface Arranger {
  enter: Function;
  leave: Function;
  stay: Function;
}
/**
 * A basic arranger that must be configured with  `enter`  and  `leave`  direction
 */
export function SlideArranger(config: object): object;
export interface ViewManagerBaseProps {
  /**
   * Arranger to control the animation
   */
  arranger?: Arranger;
  /**
   * An object containing properties to be passed to each child.
   */
  childProps?: object;
  /**
   * Views to be managed.
   *
   * May be any renderable component including custom React components or primitive DOM nodes.
   */
  children?: React.ReactNode;
  /**
   * Type of component wrapping the children. May be a DOM node or a custom React component.
   */
  component?: string | React.ComponentType;
  /**
   * Time in milliseconds to complete a transition
   */
  duration?: number;
  /**
   * Index of last visible view.
   *
   * Defaults to the current value of  `index` .
   */
  end?: number;
  /**
 * Time, in milliseconds, to wait after a view has entered to inform it by pass the
 `enteringProp`  as false.
 */
  enteringDelay?: number;
  /**
 * Name of the property to pass to the wrapped view to indicate when it is entering the
viewport.
 * 
 * When  `true` , the view has been created but has not transitioned into place.
When  `false` , the view has finished its transition.
 * 
 * The notification can be delayed by setting  `enteringDelay` . If not set, the view will not
be notified of the change in transition.
 */
  enteringProp?: string;
  /**
   * Index of active view
   */
  index?: number;
  /**
   * Indicates if the transition should be animated
   */
  noAnimation?: boolean;
  /**
   * Called when each view is rendered during initial construction.
   */
  onAppear?: Function;
  /**
   * Called when each view completes its transition into the viewport.
   */
  onEnter?: Function;
  /**
   * Called when each view completes its transition out of the viewport.
   */
  onLeave?: Function;
  /**
   * Called when each view completes its transition within the viewport.
   */
  onStay?: Function;
  /**
   * Called once when all views have completed their transition.
   */
  onTransition?: Function;
  /**
   * Called once before views begin their transition.
   */
  onWillTransition?: Function;
  /**
 * Explicitly sets the transition direction.
 * 
 * If omitted, the direction is determined automaticallly based on the change of index or a
string comparison of the first child's key.
 */
  reverseTransition?: boolean;
  /**
   * Index of first visible view. Defaults to the current value of  `index` .
   */
  start?: number;
}
/**
 * The base  `ViewManager`  component, without
   applied.
 */

export class ViewManagerBase extends React.Component<
  ViewManagerBaseProps & React.HTMLProps<HTMLElement>
> {}

/**
 * An arranger that enters from the left and leaves to the right.
 */
export declare var SlideRightArranger: Arranger;
/**
 * An arranger that enters from the right and leaves to the left..
 */
export declare var SlideLeftArranger: Arranger;
/**
 * An arranger that enters from the bottom and leaves to the top..
 */
export declare var SlideTopArranger: Arranger;
/**
 * An arranger that enters from the top and leaves to the bottom..
 */
export declare var SlideBottomArranger: Arranger;

export interface ViewManagerDecoratorProps
  extends ui_ForwardRef_ForwardRefProps {}
export function ViewManagerDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & ViewManagerDecoratorProps>;

export interface ViewManagerProps
  extends Merge<ViewManagerBaseProps, ViewManagerDecoratorProps> {}
/**
 * A  `ViewManager`  controls the visibility of a configurable number of views, allowing for them to be
transitioned on and off the viewport.
 */

export class ViewManager extends React.Component<
  ViewManagerProps & React.HTMLProps<HTMLElement>
> {}

export default ViewManager;
