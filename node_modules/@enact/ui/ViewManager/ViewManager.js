"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  ViewManager: true,
  ViewManagerBase: true,
  ViewManagerDecorator: true
};
exports.ViewManagerDecorator = exports.ViewManagerBase = exports.ViewManager = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ForwardRef = _interopRequireDefault(require("../ForwardRef"));

var _Arranger = require("./Arranger");

Object.keys(_Arranger).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Arranger[key];
    }
  });
});

var _TransitionGroup = _interopRequireDefault(require("./TransitionGroup"));

var _View = require("./View");

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * The base `ViewManager` component, without
 * [ViewManagerDecorator](ui/ViewManager.ViewManagerDecorator) applied.
 *
 * @class ViewManagerBase
 * @memberof ui/ViewManager
 * @ui
 * @public
 */
var ViewManagerBase = (_temp = _class =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ViewManagerBase, _React$Component);

  function ViewManagerBase(props) {
    var _this;

    _classCallCheck(this, ViewManagerBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewManagerBase).call(this, props));
    _this.state = {
      prevIndex: null,
      reverseTransition: null
    };
    return _this;
  }

  _createClass(ViewManagerBase, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          arranger = _this$props.arranger,
          childProps = _this$props.childProps,
          children = _this$props.children,
          duration = _this$props.duration,
          index = _this$props.index,
          noAnimation = _this$props.noAnimation,
          enteringDelay = _this$props.enteringDelay,
          enteringProp = _this$props.enteringProp,
          rest = _objectWithoutProperties(_this$props, ["arranger", "childProps", "children", "duration", "index", "noAnimation", "enteringDelay", "enteringProp"]);

      var _this$props2 = this.props,
          _this$props2$end = _this$props2.end,
          end = _this$props2$end === void 0 ? index : _this$props2$end,
          _this$props2$start = _this$props2.start,
          start = _this$props2$start === void 0 ? index : _this$props2$start;
      var _this$state = this.state,
          previousIndex = _this$state.prevIndex,
          reverseTransition = _this$state.reverseTransition;

      var childrenList = _react["default"].Children.toArray(children);

      if (index > end) end = index;
      if (index < start) start = index;
      var childCount = end - start + 1;
      var size = noAnimation || !arranger ? childCount : childCount + 1;
      var views = childrenList.slice(start, start + childCount);
      var childFactory = (0, _View.wrapWithView)({
        arranger: arranger,
        duration: duration,
        index: index,
        noAnimation: noAnimation,
        previousIndex: previousIndex,
        reverseTransition: reverseTransition,
        enteringDelay: enteringDelay,
        enteringProp: enteringProp,
        childProps: childProps
      });
      delete rest.end;
      delete rest.reverseTransition;
      delete rest.start;
      return _react["default"].createElement(_TransitionGroup["default"], Object.assign({}, rest, {
        childFactory: childFactory,
        size: size,
        currentIndex: index
      }), views);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.reverseTransition != null) {
        return {
          reverseTransition: !!props.reverseTransition
        };
      } else if (props.index !== state.index) {
        return {
          index: props.index,
          prevIndex: state.index,
          reverseTransition: state.index > props.index
        };
      }

      return null;
    }
  }]);

  return ViewManagerBase;
}(_react["default"].Component), _class.displayName = 'ViewManager', _class.propTypes =
/** @lends ui/ViewManager.ViewManagerBase.prototype */
{
  /**
   * Arranger to control the animation
   *
   * @type {Arranger}
   */
  arranger: _Arranger.shape,

  /**
   * An object containing properties to be passed to each child.
   *
   * @type {Object}
   * @public
   */
  childProps: _propTypes2["default"].object,

  /**
   * Views to be managed.
   *
   * May be any renderable component including custom React components or primitive DOM nodes.
   *
   * @type {Node}
   */
  children: _propTypes2["default"].node,

  /**
   * Type of component wrapping the children. May be a DOM node or a custom React component.
   *
   * @type {String|Component}
   * @default 'div'
   */
  component: _propTypes["default"].renderable,

  /**
   * Called with a reference to [component]{@link ui/ViewManager.ViewManager#component}
   *
   * @type {Function}
   * @private
   */
  componentRef: _propTypes2["default"].func,

  /**
   * Time in milliseconds to complete a transition
   *
   * @type {Number}
   * @default 300
   */
  duration: _propTypes2["default"].number,

  /**
   * Index of last visible view.
   *
   * Defaults to the current value of `index`.
   *
   * @type {Number}
   * @default value of index
   */
  end: _propTypes2["default"].number,

  /**
   * Time, in milliseconds, to wait after a view has entered to inform it by pass the
   * `enteringProp` as false.
   *
   * @type {Number}
   * @default 0
   */
  enteringDelay: _propTypes2["default"].number,

  /**
   * Name of the property to pass to the wrapped view to indicate when it is entering the
   * viewport.
   *
   * When `true`, the view has been created but has not transitioned into place.
   * When `false`, the view has finished its transition.
   *
   * The notification can be delayed by setting `enteringDelay`. If not set, the view will not
   * be notified of the change in transition.
   *
   * @type {String}
   */
  enteringProp: _propTypes2["default"].string,

  /**
   * Index of active view
   *
   * @type {Number}
   * @default 0
   */
  index: _propTypes2["default"].number,

  /**
   * Indicates if the transition should be animated
   *
   * @type {Boolean}
   * @default false
   */
  noAnimation: _propTypes2["default"].bool,

  /**
   * Called when each view is rendered during initial construction.
   *
   * @type {Function}
   */
  onAppear: _propTypes2["default"].func,

  /**
   * Called when each view completes its transition into the viewport.
   *
   * @type {Function}
   */
  onEnter: _propTypes2["default"].func,

  /**
   * Called when each view completes its transition out of the viewport.
   *
   * @type {Function}
   */
  onLeave: _propTypes2["default"].func,

  /**
   * Called when each view completes its transition within the viewport.
   *
   * @type {Function}
   */
  onStay: _propTypes2["default"].func,

  /**
   * Called once when all views have completed their transition.
   *
   * @type {Function}
   */
  onTransition: _propTypes2["default"].func,

  /**
   * Called once before views begin their transition.
   *
   * @type {Function}
   */
  onWillTransition: _propTypes2["default"].func,

  /**
   * Explicitly sets the transition direction.
   *
   * If omitted, the direction is determined automaticallly based on the change of index or a
   * string comparison of the first child's key.
   *
   * @type {Boolean}
   */
  reverseTransition: _propTypes2["default"].bool,

  /**
   * Index of first visible view. Defaults to the current value of `index`.
   *
   * @type {Number}
   * @default value of index
   */
  start: _propTypes2["default"].number
}, _class.defaultProps = {
  component: 'div',
  duration: 300,
  index: 0
}, _temp);
/**
 * Applies ViewManager behaviors.
 *
 * @hoc
 * @memberof ui/ViewManager
 * @mixes ui/ForwardRef.ForwardRef
 * @public
 */

exports.ViewManagerBase = ViewManagerBase;
var ViewManagerDecorator = (0, _ForwardRef["default"])({
  prop: 'componentRef'
});
/**
 * A `ViewManager` controls the visibility of a configurable number of views, allowing for them to be
 * transitioned on and off the viewport.
 *
 * @class ViewManager
 * @memberof ui/ViewManager
 * @extends ui/ViewManager.ViewManagerBase
 * @mixes ui/ViewManager.ViewManagerDecorator
 * @ui
 * @public
 */

exports.ViewManagerDecorator = ViewManagerDecorator;
var ViewManager = ViewManagerDecorator(ViewManagerBase);
exports.ViewManager = ViewManager;
var _default = ViewManager;
exports["default"] = _default;