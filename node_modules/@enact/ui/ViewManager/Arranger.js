"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shape = exports.SlideBottomArranger = exports.SlideTopArranger = exports.SlideLeftArranger = exports.SlideRightArranger = exports.SlideArranger = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _arrange = require("./arrange");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
 * Exports a number of pre-defined arrangers for use with {@link ui/ViewManager}.
 * note: not jsdoc on purpose
 */

/**
 * An object with callback functions to arrange views within {@link ui/ViewManager.ViewManager}.
 *
 * @typedef {Object} Arranger
 * @property {Function} enter
 * @property {Function} leave
 * @property {Function} stay
 * @memberof ui/ViewManager
 */

/**
 * A basic arranger that must be configured with `enter` and `leave` direction
 *
 * @function
 * @memberof ui/ViewManager
 * @param {Object}    config    Configuration object including `amount`, `enter` and `leave` properties
 * @returns {Object}            An arranger
 * @public
 */
var SlideArranger = function SlideArranger(_ref) {
  var _ref$amount = _ref.amount,
      amount = _ref$amount === void 0 ? 100 : _ref$amount,
      enter = _ref.enter,
      leave = _ref.leave;
  return {
    enter: (0, _arrange.reverse)((0, _arrange.compose)(_arrange.clearTransform, (0, _arrange.slideInPartial)(amount, enter), _arrange.accelerate)),
    leave: (0, _arrange.reverse)((0, _arrange.compose)(_arrange.clearTransform, (0, _arrange.slideOutPartial)(amount, leave), _arrange.accelerate))
  };
};
/**
 * An arranger that enters from the left and leaves to the right.
 *
 * @type {Arranger}
 * @memberof ui/ViewManager
 * @public
 */


exports.SlideArranger = SlideArranger;
var SlideRightArranger = SlideArranger({
  enter: 'left',
  leave: 'right'
});
/**
 * An arranger that enters from the right and leaves to the left..
 *
 * @type {Arranger}
 * @memberof ui/ViewManager
 * @public
 */

exports.SlideRightArranger = SlideRightArranger;
var SlideLeftArranger = SlideArranger({
  enter: 'right',
  leave: 'left'
});
/**
 * An arranger that enters from the bottom and leaves to the top..
 *
 * @type {Arranger}
 * @memberof ui/ViewManager
 * @public
 */

exports.SlideLeftArranger = SlideLeftArranger;
var SlideTopArranger = SlideArranger({
  enter: 'bottom',
  leave: 'top'
});
/**
 * An arranger that enters from the top and leaves to the bottom..
 *
 * @type {Arranger}
 * @memberof ui/ViewManager
 * @public
 */

exports.SlideTopArranger = SlideTopArranger;
var SlideBottomArranger = SlideArranger({
  enter: 'top',
  leave: 'bottom'
});
/**
 * propType validation for Arranger transitions
 * @memberof ui/ViewManager
 * @private
 */

exports.SlideBottomArranger = SlideBottomArranger;

var shape = _propTypes["default"].shape({
  enter: _propTypes["default"].func,
  leave: _propTypes["default"].func
});

exports.shape = shape;