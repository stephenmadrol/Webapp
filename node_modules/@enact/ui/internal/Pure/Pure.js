"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pure = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Default config for {@link ui/internal/Pure.Pure}.
 *
 * @memberof ui/internal/Pure.Pure
 * @hocconfig
 */
var defaultConfig = {
  /**
   * Configures the comparators used to test for prop changes
   *
   * @type {Object}
   * @memberof ui/internal/Pure.Pure.defaultConfig
   */
  propComparators: {
    '*': function _(a, b) {
      return a === b;
    }
  }
};
/**
 * Implements `shouldComponentUpdate` based on property change determination. By default, props are
 * shallowly compared for strict equality
 *
 * Custom comparators can be provided via the `propComparators` config property which accepts an
 * object mapping property names to comparator functions. To override the default comparator, use
 * the key, `'*'`.
 *
 * ```
 * const PureComponent = Pure(
 *     // Overrides the comparator for `count`. All other props will use the default comparators
 *     propComparators: {
 *         // For example, count is compared using loose equality allowing '5' to equal 5
 *         count: (a, b) => a == b
 *     },
 *     Component
 * )
 * ```
 *
 * @class Pure
 * @memberof ui/internal/Pure
 * @hoc
 * @private
 */

var Pure = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var propComparators = config.propComparators;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
    }

    _createClass(_class, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return this.hasChanged(this.props, nextProps, propComparators);
      }
    }, {
      key: "hasChanged",
      value: function hasChanged(current, next, comparators) {
        var propKeys = Object.keys(current);
        var nextKeys = Object.keys(next); // early bail out if the objects have a different number of keys

        if (propKeys.length !== nextKeys.length) {
          return true;
        }

        var hasOwn = Object.prototype.hasOwnProperty.bind(current);

        for (var i = 0; i < nextKeys.length; i++) {
          var prop = nextKeys[i];
          var comp = comparators[prop] || comparators['*'];

          if (!hasOwn(prop) || !comp(current[prop], next[prop])) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "render",
      value: function render() {
        return _react["default"].createElement(Wrapped, this.props);
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'Pure', _class.propTypes = {}, _class.defaultProps = {}, _temp;
});
exports.Pure = Pure;
var _default = Pure;
exports["default"] = _default;