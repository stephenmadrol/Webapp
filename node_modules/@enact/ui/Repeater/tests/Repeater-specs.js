"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Repeater = require("../Repeater");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable react/jsx-no-bind */
describe('Repeater Specs', function () {
  var stringItems = ['One', 'Two', 'Three'];
  var objItems = stringItems.map(function (content, key) {
    return {
      key: key,
      content: content
    };
  });

  var CustomRootType = function CustomRootType(props) {
    return _react["default"].createElement("div", props);
  }; // eslint-disable-next-line enact/prop-types, enact/display-name


  var CustomType = function CustomType(props) {
    return _react["default"].createElement("div", null, props.content);
  };

  test('should have a root span element', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = 'span';
    var actual = subject.first().name();
    expect(actual).toBe(expected);
  });
  test('should accept a nodeName as root element', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      component: "div",
      childComponent: "div"
    }, stringItems));
    var expected = 'div';
    var actual = subject.first().name();
    expect(actual).toBe(expected);
  });
  test('should accept a function as root element', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      component: CustomRootType,
      childComponent: "div"
    }, stringItems));
    var expected = 'CustomRootType';
    var actual = subject.first().name();
    expect(actual).toBe(expected);
  });
  test('should accept a nodeName as childComponent', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = 3;
    var actual = subject.first().children().length;
    expect(actual).toBe(expected);
  });
  test('should accept a function as childComponent', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: CustomType
    }, stringItems));
    var expected = 3;
    var actual = subject.first().children().length;
    expect(actual).toBe(expected);
  });
  test('should create a number of children matching the length of items', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = stringItems.length;
    var actual = subject.first().children().length;
    expect(actual).toBe(expected);
  });
  test('should support an array of objects as items', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: CustomType
    }, objItems));
    var expected = objItems.length;
    var actual = subject.first().children().length;
    expect(actual).toBe(expected);
  });
  test('should support passing itemProps to children', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div",
      itemProps: {
        title: 'test'
      }
    }, stringItems));
    var expected = 'test';
    var actual = subject.first().childAt(0).prop('title');
    expect(actual).toBe(expected);
  });
  test('should pass index to each child', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = 0;
    var actual = subject.first().childAt(0).prop('data-index');
    expect(actual).toBe(expected);
  });
  test('should pass data to each child', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div",
      childProp: "data-str"
    }, stringItems));
    var expected = stringItems[0];
    var actual = subject.first().childAt(0).prop('data-str');
    expect(actual).toBe(expected);
  });
  test('should pass item as children to each child', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = stringItems[0];
    var actual = subject.first().childAt(0).prop('children');
    expect(actual).toBe(expected);
  });
  test('should set role to list by default', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div"
    }, stringItems));
    var expected = 'list';
    var actual = subject.prop('role');
    expect(actual).toBe(expected);
  });
  test('should allow role to be overridden', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Repeater.RepeaterBase, {
      childComponent: "div",
      role: "listbox"
    }, stringItems));
    var expected = 'listbox';
    var actual = subject.prop('role');
    expect(actual).toBe(expected);
  });
});