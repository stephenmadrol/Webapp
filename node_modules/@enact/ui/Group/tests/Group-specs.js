"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Group = require("../Group");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Group', function () {
  var stringItems = ['One', 'Two', 'Three'];
  test('should call handler with selected on select', function () {
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick
    }, stringItems));
    var selected = 1;
    subject.find('div').at(selected).simulate('click', {});
    var expected = selected;
    var actual = handleClick.mock.calls[0][0].selected;
    expect(actual).toBe(expected);
  });
  test('should call handler with data on select', function () {
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick
    }, stringItems));
    var selected = 1;
    subject.find('div').at(selected).simulate('click', {});
    var expected = stringItems[selected];
    var actual = handleClick.mock.calls[0][0].data;
    expect(actual).toBe(expected);
  });
  test('should call handler on move when childSelect="onMouseMove"', function () {
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      childSelect: "onMouseMove",
      onSelect: handleClick
    }, stringItems));
    subject.find('div').at(0).simulate('mousemove', {});
    var expected = 1;
    var actual = handleClick.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should select the third item with selected=2', function () {
    var selected = 2;
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      selected: selected,
      onSelect: handleClick
    }, stringItems));
    var expected = true;
    var actual = subject.find('div').at(selected).prop('data-selected');
    expect(actual).toBe(expected);
  });
  test('should set {data-active} on the first item', function () {
    var selected = 0;
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      selected: selected,
      selectedProp: "data-active",
      onSelect: handleClick
    }, stringItems));
    var expected = true;
    var actual = subject.find('div').at(selected).prop('data-active');
    expect(actual).toBe(expected);
  });
  test('should set {children} to be the item by default', function () {
    var selected = 0;
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      onSelect: handleClick
    }, stringItems));
    var expected = stringItems[selected];
    var actual = subject.find('div').at(selected).prop('children');
    expect(actual).toBe(expected);
  });
  test('should set {data-child} to be the item', function () {
    var selected = 0;
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      childProp: "data-child",
      onSelect: handleClick
    }, stringItems));
    var expected = stringItems[selected];
    var actual = subject.find('div').at(selected).prop('data-child');
    expect(actual).toBe(expected);
  });
  test('should set aria-multiselectable when select="multiple"', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      select: "multiple"
    }, stringItems));
    var expected = true;
    var actual = subject.prop('aria-multiselectable');
    expect(actual).toBe(expected);
  });
  test('should set role to group', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(_Group.GroupBase, {
      childComponent: "div",
      select: "multiple"
    }, stringItems));
    var expected = 'group';
    var actual = subject.prop('role');
    expect(actual).toBe(expected);
  });
});