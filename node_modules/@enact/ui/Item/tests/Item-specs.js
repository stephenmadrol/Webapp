"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Item = _interopRequireDefault(require("../Item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tap = function tap(node) {
  node.simulate('mousedown');
  node.simulate('mouseup');
};

describe('Item', function () {
  test('should create an Item that is enabled by default', function () {
    var item = (0, _enzyme.mount)(_react["default"].createElement(_Item["default"], null, "I am an Item"));
    var expected = 0;
    var actual = item.find({
      disabled: true
    }).length;
    expect(actual).toBe(expected);
  });
  test('should have \'disabled\' HTML attribute when \'disabled=true\'', function () {
    var item = (0, _enzyme.mount)(_react["default"].createElement(_Item["default"], {
      disabled: true
    }, "I am a disabled Item"));
    var expected = 1;
    var actual = item.find('div[disabled=true]').length;
    expect(actual).toBe(expected);
  });
  describe('events', function () {
    test('should call onTap when tapped', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)(_react["default"].createElement(_Item["default"], {
        onTap: handleClick
      }, "I am a normal Item"));
      tap(item);
      var expected = 1;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should not call onTap when tapped and disabled', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)(_react["default"].createElement(_Item["default"], {
        disabled: true,
        onTap: handleClick
      }, "I am a disabled Item"));
      tap(item);
      var expected = 0;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
});