"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.A11yDecorator = exports["default"] = void 0;

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Provides a higher-order component to add accessibility utility features to a component.
 *
 * @module ui/A11yDecorator
 * @exports A11yDecorator
 */

/**
 * Default config for {@link ui/A11yDecorator.A11yDecorator}.
 *
 * @memberof ui/A11yDecorator.A11yDecorator
 * @hocconfig
 */
var defaultConfig = {
  /**
   * Configures the prop for the source of the component's content
   *
   * @type {String}
   * @default 'children'
   * @memberof ui/A11yDecorator.A11yDecorator.defaultConfig
   */
  prop: 'children'
};
/**
 * A higher-order component that adds support for hint text to be read before and/or after the content.
 *
 * By default, the `children` prop is used as the source of the components content but may be
 * configured by passing a different `prop` to the HOC configuration.
 *
 * Usage:
 * ```
 * const MyComponent = A11yDecorator(MyComponentBase);
 *
 * // passes an aria-label property to MyComponentBase with accessibilityPreHint and
 * // accessibilityHint wrapping children
 * <MyComponent accessibilityPreHint="before children" accessibilityHint="after children">
 *   {children}
 * </MyComponent>
 * ```
 *
 * @class A11yDecorator
 * @memberof ui/A11yDecorator
 * @hoc
 * @public
 */

var A11yDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var prop = config.prop;
  return (0, _kind["default"])({
    name: 'A11yDecorator',
    propTypes:
    /** @lends ui/A11yDecorator.A11yDecorator.prototype */
    {
      /**
       * Sets the hint text to be read after the content.
       *
       * @type {String}
       * @public
       */
      accessibilityHint: _propTypes["default"].string,

      /**
       * Sets the hint text to be read before the content.
       *
       * @type {String}
       * @public
       */
      accessibilityPreHint: _propTypes["default"].string,

      /**
       * Sets the value of the `aria-label` attribute for the wrapped component.
       *
       * @memberof ui/A11yDecorator.A11yDecorator.prototype
       * @type {String}
       * @public
       */
      'aria-label': _propTypes["default"].string
    },
    computed: {
      'aria-label': function ariaLabel(_ref) {
        var aria = _ref['aria-label'],
            prehint = _ref.accessibilityPreHint,
            hint = _ref.accessibilityHint,
            content = _ref[prop];

        if (!aria) {
          var prefix = content || null,
              label = prehint && prefix && hint && prehint + ' ' + prefix + ' ' + hint || prehint && prefix && prehint + ' ' + prefix || prehint && hint && prehint + ' ' + hint || hint && prefix && prefix + ' ' + hint || prehint || hint || null;
          return label;
        }

        return aria;
      }
    },
    render: function render(props) {
      delete props.accessibilityPreHint;
      delete props.accessibilityHint;
      return _react["default"].createElement(Wrapped, props);
    }
  });
});
exports.A11yDecorator = A11yDecorator;
var _default = A11yDecorator;
exports["default"] = _default;