"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _A11yDecorator = _interopRequireDefault(require("../A11yDecorator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('A11yDecorator', function () {
  var Component = (0, _A11yDecorator["default"])('div');
  test('should use the aria-label when set', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      "aria-label": "LABEL"
    }, "CONTENT"));
    var expected = 'LABEL';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use the accessibilityPreHint when set', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      accessibilityPreHint: "PREHINT"
    }, "CONTENT"));
    var expected = 'PREHINT CONTENT';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use the accessibilityHint when set', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      accessibilityHint: "HINT"
    }, "CONTENT"));
    var expected = 'CONTENT HINT';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use only the aria-label when set and ignore accessibilityHint', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      "aria-label": "LABEL",
      accessibilityHint: "HINT"
    }, "CONTENT"));
    var expected = 'LABEL';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use only the aria-label when set and ignore accessibilityPreHint', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      "aria-label": "LABEL",
      accessibilityPreHint: "PREHINT"
    }, "CONTENT"));
    var expected = 'LABEL';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use the accessibilityPreHint, accessibilityHint when set', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      accessibilityPreHint: "PREHINT",
      accessibilityHint: "HINT"
    }, "CONTENT"));
    var expected = 'PREHINT CONTENT HINT';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use the accessibilityPreHint, accessibilityHint, aria-label when set', function () {
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, {
      accessibilityPreHint: "PREHINT",
      accessibilityHint: "HINT",
      "aria-label": "LABEL"
    }, "CONTENT"));
    var expected = 'LABEL';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should support configuring the prop to source the content', function () {
    var TestComponent = (0, _A11yDecorator["default"])({
      prop: 'title'
    }, function (_ref) {
      var title = _ref.title;
      return _react["default"].createElement("div", null, title);
    });
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(TestComponent, {
      accessibilityPreHint: "PREHINT",
      accessibilityHint: "HINT",
      title: "TITLE"
    }));
    var expected = 'PREHINT TITLE HINT';
    var actual = subject.prop('aria-label');
    expect(actual).toBe(expected);
  });
});