"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Cancelable = require("../Cancelable");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Cancelable', function () {
  // Suite-wide setup
  // eslint-disable-next-line
  var Component = function Component(_ref) {
    var children = _ref.children,
        className = _ref.className,
        onKeyUp = _ref.onKeyUp;
    return _react["default"].createElement("div", {
      onKeyUp: onKeyUp,
      className: className
    }, children);
  };

  var makeKeyEvent = function makeKeyEvent(keyCode) {
    return {
      keyCode: keyCode,
      nativeEvent: {
        stopImmediatePropagation: jest.fn()
      }
    };
  };
  /* eslint-disable react/jsx-no-bind */


  var returnsTrue = function returnsTrue() {
    return true;
  };

  var stop = function stop(ev) {
    return ev.stopPropagation();
  };

  test('should call onCancel from prop for escape key', function () {
    var handleCancel = jest.fn(returnsTrue);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: 'onCustomEvent'
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, {
      onCustomEvent: handleCancel
    }));
    subject.simulate('keyup', makeKeyEvent(27));
    var expected = 1;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should only call onCancel for escape key by default', function () {
    var handleCancel = jest.fn(returnsTrue);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, null));
    subject.simulate('keyup', makeKeyEvent(27));
    var expected = 1;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not call onCancel for non-escape key', function () {
    var handleCancel = jest.fn(returnsTrue);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, null));
    subject.simulate('keyup', makeKeyEvent(42));
    var expected = 0;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should stop propagation when handled', function () {
    var handleCancel = jest.fn(stop);
    var keyEvent = makeKeyEvent(27);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, null));
    subject.simulate('keyup', keyEvent);
    var expected = 1;
    var actual = keyEvent.nativeEvent.stopImmediatePropagation.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not stop propagation for not handled', function () {
    var handleCancel = jest.fn(returnsTrue);
    var keyEvent = makeKeyEvent(42);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, null));
    subject.simulate('keyup', keyEvent);
    var expected = 0;
    var actual = keyEvent.nativeEvent.stopImmediatePropagation.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should forward to onKeyUp handler for any key', function () {
    var handleKeyUp = jest.fn();
    var keyEvent = makeKeyEvent(42);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: returnsTrue
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, {
      onKeyUp: handleKeyUp
    }));
    subject.simulate('keyup', keyEvent);
    var expected = 1;
    var actual = handleKeyUp.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should call onCancel when additional cancel handlers pass', function () {
    var customCancelHandler = function customCancelHandler(ev) {
      return ev.keyCode === 461;
    };

    (0, _Cancelable.addCancelHandler)(customCancelHandler);
    var handleCancel = jest.fn(returnsTrue);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.shallow)(_react["default"].createElement(Comp, null));
    subject.simulate('keyup', makeKeyEvent(461));
    (0, _Cancelable.removeCancelHandler)(customCancelHandler);
    var expected = 1;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should bubble up the component tree when config handler does not call stopPropagation', function () {
    var handleCancel = jest.fn(returnsTrue);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Comp, null, _react["default"].createElement(Comp, {
      className: "second"
    })));
    subject.find('Component.second').simulate('keyup', makeKeyEvent(27));
    var expected = 2;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not bubble up the component tree when config handler calls stopPropagation', function () {
    var handleCancel = jest.fn(stop);
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: handleCancel
    }, Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Comp, null, _react["default"].createElement(Comp, {
      className: "second"
    })));
    subject.find('Component.second').simulate('keyup', makeKeyEvent(27));
    var expected = 1;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should bubble up the component tree when prop handler does not call stopPropagation', function () {
    var handleCancel = jest.fn();
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: 'onCustomEvent'
    }, Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Comp, {
      onCustomEvent: handleCancel
    }, _react["default"].createElement(Comp, {
      className: "second",
      onCustomEvent: returnsTrue
    })));
    subject.find('Component.second').simulate('keyup', makeKeyEvent(27));
    var expected = 1;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not bubble up the component tree when prop handler calls stopPropagation', function () {
    var handleCancel = jest.fn();
    var Comp = (0, _Cancelable.Cancelable)({
      onCancel: 'onCustomEvent'
    }, Component);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Comp, {
      onCustomEvent: handleCancel
    }, _react["default"].createElement(Comp, {
      className: "second",
      onCustomEvent: stop
    })));
    subject.find('Component.second').simulate('keyup', makeKeyEvent(27));
    var expected = 0;
    var actual = handleCancel.mock.calls.length;
    expect(actual).toBe(expected);
  });
  describe('modal instances', function () {
    var customEventHandler = function customEventHandler(ev) {
      return ev.keyIdentifier === '27';
    };

    var makeKeyboardEvent = function makeKeyboardEvent(keyCode) {
      return new window.KeyboardEvent('keyup', {
        keyCode: keyCode,
        code: keyCode,
        bubbles: true
      });
    };

    beforeAll(function () {
      (0, _Cancelable.addCancelHandler)(customEventHandler);
    });
    afterAll(function () {
      (0, _Cancelable.removeCancelHandler)(customEventHandler);
    });
    test('should invoke handler for cancel events dispatch to the window', function () {
      var handleCancel = jest.fn(returnsTrue);
      var Comp = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: handleCancel
      }, Component);
      (0, _enzyme.mount)(_react["default"].createElement(Comp, null));
      document.dispatchEvent(makeKeyboardEvent(27));
      var expected = 1;
      var actual = handleCancel.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should invoke modal handlers in LIFO order', function () {
      var results = [];

      var append = function append(str) {
        return function () {
          results.push(str);
          return false;
        };
      };

      var First = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: append('first')
      }, Component);
      var Second = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: append('second')
      }, Component);
      (0, _enzyme.mount)(_react["default"].createElement(First, null));
      (0, _enzyme.mount)(_react["default"].createElement(Second, null));
      document.dispatchEvent(makeKeyboardEvent(27));
      var expected = ['second', 'first'];
      var actual = results;
      expect(actual).toEqual(expected);
    });
    test('should invoke nested modal handlers in LIFO order', function () {
      var results = [];

      var append = function append(str) {
        return function () {
          results.push(str);
          return false;
        };
      };

      var First = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: append('first')
      }, Component);
      var Second = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: append('second')
      }, Component);
      (0, _enzyme.mount)(_react["default"].createElement(First, null, _react["default"].createElement(Second, null)));
      document.dispatchEvent(makeKeyboardEvent(27));
      var expected = ['second', 'first'];
      var actual = results;
      expect(actual).toEqual(expected);
    });
    test('should not invoke modal handlers after one calls stopPropagation', function () {
      var handleCancel = jest.fn(returnsTrue);
      var First = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: handleCancel
      }, Component);
      var Second = (0, _Cancelable.Cancelable)({
        modal: true,
        onCancel: stop
      }, Component);
      (0, _enzyme.mount)(_react["default"].createElement(First, null));
      (0, _enzyme.mount)(_react["default"].createElement(Second, null));
      document.dispatchEvent(makeKeyboardEvent(27));
      var expected = 0;
      var actual = handleCancel.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
});