"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeContext = exports.Resizable = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Used internally for things to notify children that they need to resize because of a parent
 * update.
 *
 * @type Object
 * @private
 */
var ResizeContext = _react["default"].createContext();
/**
 * Default config for `Resizable`.
 *
 * @memberof ui/Resizable.Resizable
 * @hocconfig
 */


exports.ResizeContext = ResizeContext;
var defaultConfig = {
  /**
   * Configures the event name that will indicate a resize of a container may be necessary.
   *
   * @type {String}
   * @default null
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  filter: null,

  /**
   * Configures a function that can filter the event to limit when the container is notified.
   *
   * This function will receive the event payload as its only argument and should return `true` to
   * prevent the resize notification.
   *
   * @type {String}
   * @default null
   * @memberof ui/Resizable.Resizable.defaultConfig
   */
  resize: null
};
/**
 * A higher-order component that notifies a container that the wrapped component has been resized.
 *
 * It may be useful in cases where a component may need to update itself as a result of its children
 * changing in size, such as a [Scroller]{@link ui/Scroller}.
 *
 * Containers must provide an `invalidateBounds` method via React's context in order for `Resizable`
 * instances to notify it of resize.
 *
 * @class Resizable
 * @memberof ui/Resizable
 * @hoc
 * @public
 */

var Resizable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var filter = config.filter,
      resize = config.resize;
  !resize ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, "resize is required by Resizable but was omitted when applied to ".concat(Wrapped.displayName)) : invariant(false) : void 0;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.handleResize = (0, _handle.handle)((0, _handle.forward)(resize), // optionally filter the event before notifying the container
      filter, (0, _handle.call)('invalidateBounds')).bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          // Registry requires a callback but (for now at least) Resizable doesn't respond to
          // upstream events so we're initializing a no-op function to "handle" callbacks
          this.resizeRegistry = this.context(function () {});
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.resizeRegistry) {
          this.resizeRegistry.unregister();
        }
      }
      /*
       * Notifies a container that a resize is necessary
       *
       * @returns {undefined}
       * @private
       */

    }, {
      key: "invalidateBounds",
      value: function invalidateBounds() {
        if (this.resizeRegistry) {
          this.resizeRegistry.notify({
            action: 'invalidateBounds'
          });
        }
      }
      /*
       * Handles the event that indicates a resize is necessary
       *
       * @param   {Object}    ev  Event payload
       *
       * @returns {undefined}
       * @private
       */

    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        props[resize] = this.handleResize;
        return _react["default"].createElement(Wrapped, props);
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'Resizable', _class.contextType = ResizeContext, _temp;
});
exports.Resizable = Resizable;
var _default = Resizable;
exports["default"] = _default;