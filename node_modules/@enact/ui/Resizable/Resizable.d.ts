// Type definitions for ui/Resizable

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface ResizableConfig extends Object {
  /**
   * Configures the event name that will indicate a resize of a container may be necessary.
   */
  filter?: string;
  /**
 * Configures a function that can filter the event to limit when the container is notified.
 * 
 * This function will receive the event payload as its only argument and should return  `true`  to
prevent the resize notification.
 */
  resize?: string;
}
export interface ResizableProps {}
export function Resizable<P>(
  config: ResizableConfig,
  Component: React.ComponentType<P> | string
): React.ComponentType<P & ResizableProps>;

export function Resizable<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & ResizableProps>;

export default Resizable;
