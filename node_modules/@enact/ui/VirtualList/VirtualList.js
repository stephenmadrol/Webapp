"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "gridListItemSizeShape", {
  enumerable: true,
  get: function get() {
    return _VirtualListBase.gridListItemSizeShape;
  }
});
Object.defineProperty(exports, "VirtualListBase", {
  enumerable: true,
  get: function get() {
    return _VirtualListBase.VirtualListBase;
  }
});
Object.defineProperty(exports, "VirtualListBaseNative", {
  enumerable: true,
  get: function get() {
    return _VirtualListBase.VirtualListBaseNative;
  }
});
exports.VirtualListNative = exports.VirtualList = exports.VirtualGridListNative = exports.VirtualGridList = exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _VirtualListBase = require("./VirtualListBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Unstyled virtual list components and behaviors to be customized by a theme or application.
 *
 * @module ui/VirtualList
 * @exports gridListImageSizeShape
 * @exports VirtualGridList
 * @exports VirtualGridListNative
 * @exports VirtualList
 * @exports VirtualListBase
 * @exports VirtualListBaseNative
 * @exports VirtualListNative
 */

/**
 * An unstyled scrollable virtual list component with touch support.
 *
 * @class VirtualList
 * @memberof ui/VirtualList
 * @extends ui/VirtualList.VirtualListBase
 * @ui
 * @public
 */
var VirtualList = (0, _kind["default"])({
  name: 'ui:VirtualList',
  propTypes:
  /** @lends ui/VirtualList.VirtualList.prototype */
  {
    /**
     * Size of an item for the `VirtualList`.
     *
     * Valid value is a number. If the direction for the list is vertical,
     * `itemSize` means the height of an item. For horizontal, it means the width of an item.
     *
     * Example:
     * ```
     * <VirtualList itemSize={ri.scale(72)} />
     * ```
     *
     * @type {Number}
     * @required
     * @public
     */
    itemSize: _propTypes["default"].number.isRequired
  },
  render: function render(props) {
    return _react["default"].createElement(_VirtualListBase.ScrollableVirtualList, props);
  }
});
/**
 * An unstyled scrollable virtual grid list component with touch support.
 *
 * @class VirtualGridList
 * @memberof ui/VirtualList
 * @extends ui/VirtualList.VirtualListBase
 * @ui
 * @public
 */

exports.VirtualList = VirtualList;
var VirtualGridList = (0, _kind["default"])({
  name: 'ui:VirtualGridList',
  propTypes:
  /** @lends ui/VirtualList.VirtualGridList.prototype */
  {
    /**
     * Size of an item for the `VirtualGridList`.
     *
     * * Valid value is an object that has `minWidth` and `minHeight` as properties.
     *
     * Example:
     * ```
     * <VirtualGridList
     * 	itemSize={{
     * 		minWidth: ri.scale(180),
     * 		minHeight: ri.scale(270)
     * 	}}
     * />
     * ```
     *
     * @type {ui/VirtualList.gridListItemSizeShape}
     * @required
     * @public
     */
    itemSize: _VirtualListBase.gridListItemSizeShape.isRequired
  },
  render: function render(props) {
    return _react["default"].createElement(_VirtualListBase.ScrollableVirtualList, props);
  }
});
/**
 * An unstyled scrollable virtual native list component with touch support.
 *
 * For smooth native scrolling, web engine with below Chromium 61, should be launched
 * with the flag '--enable-blink-features=CSSOMSmoothScroll' to support it.
 * The one with Chromium 61 or above, is launched to support it by default.
 *
 * @class VirtualListNative
 * @memberof ui/VirtualList
 * @extends ui/VirtualList.VirtualListBaseNative
 * @ui
 * @private
 */

exports.VirtualGridList = VirtualGridList;
var VirtualListNative = (0, _kind["default"])({
  name: 'ui:VirtualListNative',
  propTypes:
  /** @lends ui/VirtualList.VirtualListNative.prototype */
  {
    /**
     * Size of an item for the `VirtualList`.
     *
     * If the direction for the list is vertical, `itemSize` means the height of an item.
     * For `horizontal`, it means the width of an item.
     *
     * Example:
     * ```
     * <VirtualListNative itemSize={ri.scale(72)} />
     * ```
     *
     * @type {Number}
     * @required
     * @public
     */
    itemSize: _propTypes["default"].number.isRequired
  },
  render: function render(props) {
    return _react["default"].createElement(_VirtualListBase.ScrollableVirtualListNative, props);
  }
});
/**
 * An unstyled scrollable virtual native grid list component with touch support.
 *
 * For smooth native scrolling, web engine with below Chromium 61, should be launched
 * with the flag '--enable-blink-features=CSSOMSmoothScroll' to support it.
 * The one with Chromium 61 or above, is launched to support it by default.
 *
 * @class VirtualGridListNative
 * @memberof ui/VirtualList
 * @extends ui/VirtualList.VirtualListBaseNative
 * @ui
 * @private
 */

exports.VirtualListNative = VirtualListNative;
var VirtualGridListNative = (0, _kind["default"])({
  name: 'ui:VirtualGridListNative',
  propTypes:
  /** @lends ui/VirtualList.VirtualGridListNative.prototype */
  {
    /**
     * Size of an item for the `VirtualGridList`
     *
     * * Valid value is an object that has `minWidth` and `minHeight` as properties.
     *
     * Example:
     * ```
     * <VirtualGridListNative
     * 	itemSize={{
     * 		minWidth: ri.scale(180),
     * 		minHeight: ri.scale(270)
     * 	}}
     * />
     * ```
     *
     * @type {ui/VirtualList.gridListItemSizeShape}
     * @required
     * @public
     */
    itemSize: _VirtualListBase.gridListItemSizeShape.isRequired
  },
  render: function render(props) {
    return _react["default"].createElement(_VirtualListBase.ScrollableVirtualListNative, props);
  }
});
exports.VirtualGridListNative = VirtualGridListNative;
var _default = VirtualList;
exports["default"] = _default;