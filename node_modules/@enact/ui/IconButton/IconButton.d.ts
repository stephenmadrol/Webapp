// Type definitions for ui/IconButton

import * as React from "react";
import { TouchableProps as ui_Touchable_TouchableProps } from "@enact/ui/Touchable";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface IconButtonBaseProps {
  /**
 * This is the root component used to render the button and will receive all props except
 `icon` .
 */
  buttonComponent: React.ComponentType | JSX.Element;
  /**
 * The component used to render the  icon  .
 * 
 * This component will receive the  `small`  property set on the  `IconButton`  as well as the
 `icon`  class to customize its styling.
 */
  iconComponent: React.ComponentType;
  /**
   * Additional children that follow the icon.
   *
   * If  `icon`  isn't specified but  `children`  is,  `children`  is used as the icon's value.
   */
  children?: React.ReactNode;
  /**
 * Customizes the component by mapping the supplied collection of CSS class names to the
corresponding internal Elements and states of this component.
 * 
 * The following classes are supported:
 * *  `iconButton`  - The root component class
 * *  `icon`  - The  icon component   class
 * *  `small`  - Applied when  `small`  prop is  `true`
 * *  `pressed`  - Applied when  `pressed`  prop is  `true`
 */
  css?: object;
  /**
 * Disables IconButton.
 * 
 * When  `true` , the button is shown as disabled and does not generate
 `onClick`   events  .
 */
  disabled?: boolean;
  /**
   * The icon displayed within the IconButton.
   *
   * If not specified,  `children`  is used as the icon value instead.
   */
  icon?: string;
  /**
   * Applies the  `pressed`  CSS class.
   */
  pressed?: boolean;
  /**
   * Applies the  `selected`  CSS class.
   */
  selected?: boolean;
  /**
   * Applies the  `small`  CSS class.
   */
  small?: boolean;
}
/**
 * A ui-styled button without any behavior.
 */

export class IconButtonBase extends React.Component<
  IconButtonBaseProps & React.HTMLProps<HTMLElement>
> {}

export interface IconButtonDecoratorProps extends ui_Touchable_TouchableProps {}
export function IconButtonDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & IconButtonDecoratorProps>;

export interface IconButtonProps
  extends Merge<IconButtonBaseProps, IconButtonDecoratorProps> {}
/**
 * A minimally styled, but interactive, Button ready for customization by a theme.
 * 
 * Example:
 * ```
<IconButton small>
    plus
</IconButton>
```
 */

export class IconButton extends React.Component<
  IconButtonProps & React.HTMLProps<HTMLElement>
> {}

export default IconButton;
