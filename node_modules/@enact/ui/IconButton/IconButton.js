"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButtonDecorator = exports.IconButtonBase = exports.IconButton = exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ComponentOverride = _interopRequireDefault(require("../ComponentOverride"));

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _IconButtonModule = _interopRequireDefault(require("./IconButton.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A ui-styled button without any behavior.
 *
 * @class IconButtonBase
 * @memberof ui/IconButton
 * @ui
 * @public
 */
var IconButtonBase = (0, _kind["default"])({
  name: 'ui:IconButton',
  propTypes:
  /** @lends ui/IconButton.IconButtonBase.prototype */
  {
    /**
     * This is the root component used to render the button and will receive all props except
     * `icon`.
     *
     * @type {Component|Element}
     * @required
     * @public
     */
    buttonComponent: _propTypes["default"].componentOverride.isRequired,

    /**
     * The component used to render the [icon]{@link ui/IconButton.IconButtonBase.icon}.
     *
     * This component will receive the `small` property set on the `IconButton` as well as the
     * `icon` class to customize its styling.
     *
     * @type {Component}
     * @required
     * @public
     */
    iconComponent: _propTypes["default"].component.isRequired,

    /**
     * Additional children that follow the icon.
     *
     * If `icon` isn't specified but `children` is, `children` is used as the icon's value.
     *
     * @see {@link ui/Icon.Icon#children}
     * @type {Node}
     * @public
     */
    children: _propTypes2["default"].node,

    /**
     * Customizes the component by mapping the supplied collection of CSS class names to the
     * corresponding internal Elements and states of this component.
     *
     * The following classes are supported:
     *
     * * `iconButton` - The root component class
     * * `icon` - The [icon component]{@link ui/IconButton.IconButtonBase.iconComponent} class
     * * `small` - Applied when `small` prop is `true`
     * * `pressed` - Applied when `pressed` prop is `true`
     *
     * @type {Object}
     * @public
     */
    css: _propTypes2["default"].object,

    /**
     * Disables IconButton.
     *
     * When `true`, the button is shown as disabled and does not generate
     * `onClick` [events]{@link /docs/developer-guide/glossary/#event}.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    disabled: _propTypes2["default"].bool,

    /**
     * The icon displayed within the IconButton.
     *
     * If not specified, `children` is used as the icon value instead.
     *
     * @type {String}
     * @public
     */
    icon: _propTypes2["default"].string,

    /**
     * Applies the `pressed` CSS class.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    pressed: _propTypes2["default"].bool,

    /**
     * Applies the `selected` CSS class.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    selected: _propTypes2["default"].bool,

    /**
     * Applies the `small` CSS class.
     *
     * @type {Boolean}
     * @default false
     * @public
     */
    small: _propTypes2["default"].bool
  },
  defaultProps: {
    disabled: false,
    pressed: false,
    selected: false,
    small: false
  },
  styles: {
    css: _IconButtonModule["default"],
    className: 'iconButton',
    publicClassNames: true
  },
  computed: {
    className: function className(_ref) {
      var small = _ref.small,
          styler = _ref.styler;
      return styler.append({
        small: small
      });
    }
  },
  render: function render(_ref2) {
    var buttonComponent = _ref2.buttonComponent,
        children = _ref2.children,
        css = _ref2.css,
        icon = _ref2.icon,
        Icon = _ref2.iconComponent,
        small = _ref2.small,
        rest = _objectWithoutProperties(_ref2, ["buttonComponent", "children", "css", "icon", "iconComponent", "small"]);

    // To support the simpler use case of only specifying the icon as the children within
    // <IconButton>, this falls back on using children if icon isn't specified.
    if (!icon && children) {
      icon = children;
      children = null;
    }

    return (0, _ComponentOverride["default"])(_objectSpread({}, rest, {
      component: buttonComponent,
      small: small,
      minWidth: false,
      children: [_react["default"].createElement(Icon, {
        key: "icon",
        small: small,
        className: css.icon
      }, icon)].concat(_toConsumableArray(_react["default"].Children.toArray(children)))
    }));
  }
});
/**
 * A higher-order component that adds universal button behaviors to an [IconButtonBase]{@link ui/IconButton.IconButtonBase}.
 *
 * @hoc
 * @memberof ui/IconButton
 * @mixes ui/Touchable.Touchable
 * @public
 */

exports.IconButtonBase = IconButtonBase;
var IconButtonDecorator = (0, _Touchable["default"])({
  activeProp: 'pressed'
});
/**
 * A minimally styled, but interactive, Button ready for customization by a theme.
 *
 * Example:
 * ```
 * <IconButton small>
 *     plus
 * </IconButton>
 * ```
 *
 * @class IconButton
 * @memberof ui/IconButton
 * @extends ui/IconButton.IconButtonBase
 * @mixes ui/IconButton.IconButtonDecorator
 * @ui
 * @public
 */

exports.IconButtonDecorator = IconButtonDecorator;
var IconButton = IconButtonDecorator(IconButtonBase);
exports.IconButton = IconButton;
var _default = IconButton;
exports["default"] = _default;