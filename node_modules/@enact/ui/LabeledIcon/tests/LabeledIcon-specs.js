"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _LabeledIcon = _interopRequireDefault(require("../LabeledIcon"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _LabeledIconModule = _interopRequireDefault(require("../LabeledIcon.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var iconName = 'anIconName';
var iconLabel = 'A real label';

var iconComponent = function iconComponent(_ref) {
  var children = _ref.children;
  return _react["default"].createElement("div", null, children);
};

describe('LabeledIcon Specs', function () {
  test('should insert the icon source into the icon when using the prop approach', function () {
    var labeledIcon = (0, _enzyme.mount)(_react["default"].createElement(_LabeledIcon["default"], {
      icon: iconName,
      iconComponent: iconComponent
    }, iconLabel));
    var expected = iconName;
    var actual = labeledIcon.find(".".concat(_LabeledIconModule["default"].icon)).first().text();
    expect(actual).toBe(expected);
  });
  test('should insert the icon source into the icon slot element', function () {
    var labeledIcon = (0, _enzyme.mount)(_react["default"].createElement(_LabeledIcon["default"], {
      iconComponent: iconComponent
    }, _react["default"].createElement("icon", null, iconName), iconLabel));
    var expected = iconName;
    var actual = labeledIcon.find(".".concat(_LabeledIconModule["default"].icon)).first().text();
    expect(actual).toBe(expected);
  });
  test('should insert custom icon components into the icon slot', function () {
    var labeledIcon = (0, _enzyme.mount)(_react["default"].createElement(_LabeledIcon["default"], {
      iconComponent: iconComponent
    }, _react["default"].createElement("icon", null, _react["default"].createElement(_Icon["default"], null, iconName)), iconLabel));
    var expected = 1;
    var actual = labeledIcon.find(_Icon["default"]);
    expect(actual).toHaveLength(expected);
  });
});