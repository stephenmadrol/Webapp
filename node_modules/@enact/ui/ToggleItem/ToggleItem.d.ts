// Type definitions for ui/ToggleItem

import * as React from "react";
import { ForwardRefProps as ui_ForwardRef_ForwardRefProps } from "@enact/ui/ForwardRef";
import { TouchableProps as ui_Touchable_TouchableProps } from "@enact/ui/Touchable";
import { ToggleableProps as ui_Toggleable_ToggleableProps } from "@enact/ui/Toggleable";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface ToggleItemBaseProps {
  /**
   * The main content of the toggle item.
   */
  children: React.ReactNode;
  /**
 * The type of component to use to render as root element.
 * 
 * This receives the  `css`  prop for theme extension and therefore must be a custom
component and not a simple HTML DOM node. Recommended component or themed
derivative:  SlotItem 
 */
  component: React.ComponentType;
  /**
 * The  `Icon`  to render in this item.
 * 
 * This component receives the  `selected`  prop and value,
and must therefore respond to it in some way. It is recommended to use
 ToggleIcon   for this.
 */
  iconComponent: React.ComponentType | JSX.Element;
  /**
 * Customizes the component by mapping the supplied collection of CSS class names to the
corresponding internal Elements and states of this component.
 * 
 * The following classes are supported:
 * *  `toggleItem`  - The root class name
 */
  css?: object;
  /**
   * Applies a disabled visual state to the toggle item.
   */
  disabled?: boolean;
  /**
 * An optional prop that lets you override the icon of the  `iconComponent`  component.
 * 
 * This accepts any string that the  Icon   component supports, provided
the recommendations of  `iconComponent`  are followed.
 */
  icon?: string | object;
  /**
   * Specifies on which side ( `'before'`  or  `'after'` ) of the text the icon appears.
   */
  iconPosition?: string;
  /**
   * Called when the toggle item is toggled. Developers should generally use  `onToggle`  instead.
   */
  onTap?: Function;
  /**
   * Called when the toggle item is toggled.
   */
  onToggle?: Function;
  /**
   * Applies the provided  `icon` .
   */
  selected?: boolean;
  /**
   * The value that will be sent to the  `onToggle`  handler.
   */
  value?: any;
}
/**
 * A minimally styled toggle item without any behavior, ripe for extension.
 */

export class ToggleItemBase extends React.Component<
  ToggleItemBaseProps & React.HTMLProps<HTMLElement>
> {}

export interface ToggleItemDecoratorProps
  extends Merge<
    Merge<ui_ForwardRef_ForwardRefProps, ui_Touchable_TouchableProps>,
    ui_Toggleable_ToggleableProps
  > {}
export function ToggleItemDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & ToggleItemDecoratorProps>;

export interface ToggleItemProps
  extends Merge<ToggleItemBaseProps, ToggleItemDecoratorProps> {}
/**
 * An unstyled item with built-in support for toggling.
 * 
 * Example:
 * ```
<ToggleItem icon="lock" iconPosition="before">Toggle Me</ToggleItem>
```
 */

export class ToggleItem extends React.Component<
  ToggleItemProps & React.HTMLProps<HTMLElement>
> {}

export default ToggleItem;
