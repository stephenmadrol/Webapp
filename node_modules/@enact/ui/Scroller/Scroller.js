"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollerNative = exports.ScrollerBase = exports.Scroller = exports["default"] = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _platform = require("@enact/core/platform");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _Scrollable = _interopRequireDefault(require("../Scrollable"));

var _ScrollableNative = _interopRequireDefault(require("../Scrollable/ScrollableNative"));

var _ScrollerModule = _interopRequireDefault(require("./Scroller.module.css"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * An unstyled base scroller component.
 *
 * In most circumstances, you will want to use the Scrollable version.
 *
 * @class ScrollerBase
 * @memberof ui/Scroller
 * @ui
 * @public
 */
var ScrollerBase =
/*#__PURE__*/
function (_Component) {
  _inherits(ScrollerBase, _Component);

  function ScrollerBase(props) {
    var _this;

    _classCallCheck(this, ScrollerBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollerBase).call(this, props));
    _this.scrollBounds = {
      clientWidth: 0,
      clientHeight: 0,
      scrollWidth: 0,
      scrollHeight: 0,
      maxLeft: 0,
      maxTop: 0
    };
    _this.scrollPos = {
      top: 0,
      left: 0
    };

    _this.getScrollBounds = function () {
      return _this.scrollBounds;
    };

    _this.getRtlPositionX = function (x) {
      if (_this.props.rtl) {
        return _platform.platform.ios || _platform.platform.safari ? -x : _this.scrollBounds.maxLeft - x;
      }

      return x;
    };

    _this.getNodePosition = function (node) {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          nodeLeft = _node$getBoundingClie.left,
          nodeTop = _node$getBoundingClie.top,
          nodeHeight = _node$getBoundingClie.height,
          nodeWidth = _node$getBoundingClie.width,
          _this$containerRef$cu = _this.containerRef.current.getBoundingClientRect(),
          containerLeft = _this$containerRef$cu.left,
          containerTop = _this$containerRef$cu.top,
          _this$containerRef$cu2 = _this.containerRef.current,
          scrollLeft = _this$containerRef$cu2.scrollLeft,
          scrollTop = _this$containerRef$cu2.scrollTop,
          left = _this.isHorizontal() ? scrollLeft + nodeLeft - containerLeft : null,
          top = _this.isVertical() ? scrollTop + nodeTop - containerTop : null;

      return {
        left: left,
        top: top,
        width: nodeWidth,
        height: nodeHeight
      };
    };

    _this.isVertical = function () {
      return _this.props.direction !== 'horizontal';
    };

    _this.isHorizontal = function () {
      return _this.props.direction !== 'vertical';
    };

    _this.containerRef = _react["default"].createRef();
    return _this;
  }

  _createClass(ScrollerBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.calculateMetrics();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.calculateMetrics();

      if (this.props.isVerticalScrollbarVisible && !prevProps.isVerticalScrollbarVisible) {
        this.forceUpdate();
      }
    }
  }, {
    key: "setScrollPosition",
    // for Scrollable
    value: function setScrollPosition(x, y) {
      var node = this.containerRef.current;

      if (this.isVertical()) {
        node.scrollTop = y;
        this.scrollPos.top = y;
      }

      if (this.isHorizontal()) {
        node.scrollLeft = this.getRtlPositionX(x);
        this.scrollPos.left = x;
      }
    } // for ScrollableNative

  }, {
    key: "scrollToPosition",
    value: function scrollToPosition(x, y) {
      this.containerRef.current.scrollTo(this.getRtlPositionX(x), y);
    } // for ScrollableNative

  }, {
    key: "didScroll",
    value: function didScroll(x, y) {
      this.scrollPos.left = x;
      this.scrollPos.top = y;
    }
  }, {
    key: "calculateMetrics",
    value: function calculateMetrics() {
      var scrollBounds = this.scrollBounds,
          _this$containerRef$cu3 = this.containerRef.current,
          scrollWidth = _this$containerRef$cu3.scrollWidth,
          scrollHeight = _this$containerRef$cu3.scrollHeight,
          clientWidth = _this$containerRef$cu3.clientWidth,
          clientHeight = _this$containerRef$cu3.clientHeight;
      scrollBounds.scrollWidth = scrollWidth;
      scrollBounds.scrollHeight = scrollHeight;
      scrollBounds.clientWidth = clientWidth;
      scrollBounds.clientHeight = clientHeight;
      scrollBounds.maxLeft = Math.max(0, scrollWidth - clientWidth);
      scrollBounds.maxTop = Math.max(0, scrollHeight - clientHeight);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          style = _this$props.style,
          rest = _objectWithoutProperties(_this$props, ["className", "style"]),
          mergedStyle = Object.assign({}, style, {
        overflowX: this.isHorizontal() ? 'auto' : 'hidden',
        overflowY: this.isVertical() ? 'auto' : 'hidden'
      });

      delete rest.cbScrollTo;
      delete rest.direction;
      delete rest.rtl;
      delete rest.isVerticalScrollbarVisible;
      return _react["default"].createElement("div", Object.assign({}, rest, {
        className: (0, _classnames["default"])(className, _ScrollerModule["default"].hideNativeScrollbar),
        ref: this.containerRef,
        style: mergedStyle
      }));
    }
  }]);

  return ScrollerBase;
}(_react.Component);
/**
 * An unstyled scroller.
 *
 * Example:
 * ```
 * <Scroller>Scroll me.</Scroller>
 * ```
 *
 * @class Scroller
 * @memberof ui/Scroller
 * @extends ui/Scrollable.Scrollable
 * @extends ui/Scrollable.ScrollerBase
 * @ui
 * @public
 */


exports.ScrollerBase = ScrollerBase;
ScrollerBase.displayName = 'ui:ScrollerBase';
ScrollerBase.propTypes =
/** @lends ui/Scroller.ScrollerBase.prototype */
{
  children: _propTypes["default"].node.isRequired,

  /**
   * Callback method of scrollTo.
   * Normally, `Scrollable` should set this value.
   *
   * @type {Function}
   * @private
   */
  cbScrollTo: _propTypes["default"].func,

  /**
   * Direction of the scroller.
   *
   * Valid values are:
   * * `'both'`,
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'both'
   * @public
   */
  direction: _propTypes["default"].oneOf(['both', 'horizontal', 'vertical']),

  /**
   * Prop to check context value if Scrollbar exists or not.
   *
   * @type {Boolean}
   * @private
   */
  isVerticalScrollbarVisible: _propTypes["default"].bool,

  /**
   * `true` if RTL, `false` if LTR.
   *
   * @type {Boolean}
   * @private
   */
  rtl: _propTypes["default"].bool
};
ScrollerBase.defaultProps = {
  direction: 'both'
};

var Scroller = function Scroller(props) {
  return _react["default"].createElement(_Scrollable["default"], Object.assign({}, props, {
    childRenderer: function childRenderer(_ref) {
      var initChildRef = _ref.initChildRef,
          rest = _objectWithoutProperties(_ref, ["initChildRef"]);

      return (// eslint-disable-line react/jsx-no-bind
        _react["default"].createElement(ScrollerBase, Object.assign({}, rest, {
          ref: initChildRef
        }))
      );
    }
  }));
};

exports.Scroller = Scroller;
Scroller.propTypes =
/** @lends ui/Scroller.Scroller.prototype */
{
  /**
   * Direction of the scroller.
   *
   * Valid values are:
   * * `'both'`,
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'both'
   * @public
   */
  direction: _propTypes["default"].oneOf(['both', 'horizontal', 'vertical'])
};
Scroller.defaultProps = {
  direction: 'both'
};
/**
 * An unstyled native scroller, [ScrollableNative]{@link ui/Scrollable.ScrollableNative} applied.
 * For smooth native scrolling, web engine with below Chromium 61, should be launched
 * with the flag '--enable-blink-features=CSSOMSmoothScroll' to support it.
 * The one with Chromium 61 or above, is launched to support it by default.
 *
 * Example:
 * ```
 * <ScrollerNative>Scroll me.</ScrollerNative>
 * ```
 *
 * @class ScrollerNative
 * @memberof ui/Scroller
 * @extends ui/Scrollable.ScrollableNative
 * @extends ui/Scrollable.ScrollerBase
 * @ui
 * @private
 */

var ScrollerNative = function ScrollerNative(props) {
  return _react["default"].createElement(_ScrollableNative["default"], Object.assign({}, props, {
    childRenderer: function childRenderer(_ref2) {
      var initChildRef = _ref2.initChildRef,
          rest = _objectWithoutProperties(_ref2, ["initChildRef"]);

      return (// eslint-disable-line react/jsx-no-bind
        _react["default"].createElement(ScrollerBase, Object.assign({}, rest, {
          ref: initChildRef
        }))
      );
    }
  }));
};

exports.ScrollerNative = ScrollerNative;
ScrollerNative.propTypes =
/** @lends ui/Scroller.ScrollerNative.prototype */
{
  /**
   * Direction of the scroller.
   *
   * Valid values are:
   * * `'both'`,
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'both'
   * @public
   */
  direction: _propTypes["default"].oneOf(['both', 'horizontal', 'vertical'])
};
ScrollerNative.defaultProps = {
  direction: 'both'
};
var _default = Scroller;
exports["default"] = _default;