"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _state = require("../state");

var _config = require("../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable enact/prop-types */

/* eslint-disable react/jsx-no-bind */
describe('Touchable', function () {
  var DivComponent = function DivComponent(_ref) {
    var _ref$children = _ref.children,
        children = _ref$children === void 0 ? 'Toggle' : _ref$children,
        id = _ref.id,
        onClick = _ref.onClick,
        onMouseDown = _ref.onMouseDown,
        onMouseLeave = _ref.onMouseLeave,
        onMouseUp = _ref.onMouseUp,
        onTouchStart = _ref.onTouchStart,
        onTouchEnd = _ref.onTouchEnd;
    return _react["default"].createElement("div", {
      id: id,
      onClick: onClick,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd
    }, children);
  };

  var preventDefault = function preventDefault(ev) {
    return ev.preventDefault();
  };

  describe('config', function () {
    beforeEach(_config.resetDefaultConfig);
    afterEach(_config.resetDefaultConfig);
    test('should pass active state to the wrapped component when activeProp is configured', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'pressed'
      }, DivComponent);
      var subject = (0, _enzyme.shallow)(_react["default"].createElement(Component, null));
      var wrapped = subject.find(DivComponent);
      var expected = true;
      var actual = 'pressed' in wrapped.props();
      expect(actual).toBe(expected);
    });
    test('should merge configurations', function () {
      (0, _config.configure)({
        flick: {
          maxMoves: 10
        }
      });
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should omit unsupported configurations', function () {
      (0, _config.configure)({
        flick: {
          notSupported: 10
        }
      }); // eslint-disable-next-line no-undefined

      var expected = undefined;
      var actual = (0, _config.getConfig)().flick.notSupported;
      expect(actual).toBe(expected);
    });
    test('should not update config when local object is mutated', function () {
      var cfg = {
        flick: {
          maxMoves: 10
        }
      };
      (0, _config.configure)(cfg);
      cfg.flick.maxMoves = 20;
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should not update config when local hold.events array is mutated', function () {
      var cfg = {
        hold: {
          events: [{
            name: 'hold',
            time: 600
          }]
        }
      };
      (0, _config.configure)(cfg);
      cfg.hold.events[0].time = 2000;
      var expected = 600;
      var actual = (0, _config.getConfig)().hold.events[0].time;
      expect(actual).toBe(expected);
    });
  });
  describe('#onDown', function () {
    test('should invoke onDown handle on mouse down', function () {
      var Component = (0, _Touchable["default"])(DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onDown: handler
      }));
      subject.simulate('mousedown', {});
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('#onUp', function () {
    test('should invoke onUp handle on mouse up', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'pressed'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onUp: handler
      }));
      var ev = {};
      subject.simulate('mousedown', ev);
      subject.simulate('mouseup', ev);
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('#onTap', function () {
    test('should be called on mouse up', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'active'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler
      }));
      var ev = {};
      subject.simulate('mousedown', ev);
      subject.simulate('mouseup', ev);
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should be called on click', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'active'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler
      }));
      subject.simulate('click');
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should be called before onClick on click', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'active'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler,
        onClick: handler
      }));
      subject.simulate('click');
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be called before onCLick on mouse up', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'active'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler,
        onClick: handler
      }));
      var ev = {
        // a matching timeStamp is used by Touchable to prevent multiple onTaps on "true"
        // click (mouseup + click)
        timeStamp: 1
      };
      subject.simulate('mousedown', ev);
      subject.simulate('mouseup', ev);
      subject.simulate('click', ev);
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be preventable via onUp handler', function () {
      var Component = (0, _Touchable["default"])({
        activeProp: 'active'
      }, DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler,
        onUp: preventDefault
      }));
      var ev = {};
      subject.simulate('mousedown', ev);
      subject.simulate('mouseup', ev);
      var expected = 0;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('state management', function () {
    describe('activate', function () {
      test('should return null when active', function () {
        var state = {
          active: 2
        };
        var expected = null;
        var actual = (0, _state.activate)(state);
        expect(actual).toBe(expected);
      });
      test('should return updated state when inactive', function () {
        var state = {
          active: 0
        };
        var expected = {
          active: 2
        };
        var actual = (0, _state.activate)(state);
        expect(actual).toEqual(expected);
      });
      test('should update active state on mouse down when activeProp is configured', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: handler
        }));
        var ev = {};
        var beforeDown = subject.state('active');
        subject.simulate('mousedown', ev);
        var afterDown = subject.state('active');
        var expected = false;
        var actual = beforeDown === afterDown;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: handler,
          disabled: true
        }));
        subject.simulate('mousedown', {});
        var expected = 0;
        var actual = subject.state('active');
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);

        var handler = function handler(ev) {
          return ev.preventDefault();
        };

        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: handler
        }));
        subject.simulate('mousedown', {});
        var expected = 0;
        var actual = subject.state('active');
        expect(actual).toBe(expected);
      });
    });
    describe('deactivate', function () {
      test('should return null when inactive', function () {
        var state = {
          active: 0
        };
        var expected = null;
        var actual = (0, _state.deactivate)(state);
        expect(actual).toBe(expected);
      });
      test('should return updated state when active', function () {
        var state = {
          active: 2
        };
        var expected = {
          active: 0
        };
        var actual = (0, _state.deactivate)(state);
        expect(actual).toEqual(expected);
      });
      test('should update active state on mouse up when activeProp is configured', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: handler
        }));
        var ev = {};
        subject.simulate('mousedown', ev);
        var beforeUp = subject.state('active');
        subject.simulate('mouseup', ev);
        var afterUp = subject.state('active');
        var expected = false;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: handler,
          disabled: true
        }));
        var ev = {};
        subject.simulate('mousedown', ev);
        var beforeUp = subject.state('active');
        subject.simulate('mouseup', ev);
        var afterUp = subject.state('active');
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        var Component = (0, _Touchable["default"])({
          activeProp: 'active'
        }, DivComponent);
        var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
          onDown: preventDefault
        }));
        var ev = {};
        subject.simulate('mousedown', ev);
        var beforeUp = subject.state('active');
        subject.simulate('mouseup', ev);
        var afterUp = subject.state('active');
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
    });
  });
  describe('touch', function () {
    test('should only emit onTap once when tapping an child instance of Touchable', function () {
      var Component = (0, _Touchable["default"])(DivComponent);
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, {
        onTap: handler,
        id: "outer"
      }, _react["default"].createElement(Component, {
        id: "inner"
      })));
      var mouseEvent = {
        timeStamp: 1
      };
      var touchEvent = {
        timeStamp: 1,
        changedTouches: [{
          clientX: 0,
          clientY: 0
        }],
        targetTouches: [{
          clientX: 0,
          clientY: 0
        }]
      };
      var inner = subject.find('div#inner');
      inner.simulate('touchstart', touchEvent);
      inner.simulate('touchend', touchEvent);
      inner.simulate('mousedown', mouseEvent);
      inner.simulate('mouseup', mouseEvent);
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
});