"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Skinnable = exports["default"] = void 0;

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Default config for `Skinnable`.
 *
 * @memberof ui/Skinnable.Skinnable
 * @hocconfig
 * @public
 */
var defaultConfig = {
  /**
   * The prop in which to pass the skinVariants value to the wrapped component. The recommended
   * value is "skinVariants".
   *
   * If left unset, the skinVariant will not be passed to the wrapped component.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  variantsProp: null,

  /**
   * The prop in which to pass the effective skin to the wrapped component.
   *
   * If left unset, the current skin will not be passed to the wrapped component.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  prop: null,

  /**
   * A hash mapping the available skin names to their CSS class name.
   *
   * The keys are accepted as the only valid values for the `skin` prop on the wrapped component.
   *
   * @type {Object}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  skins: null,

  /**
   * Assign a default skin from the `skins` list.
   *
   * This will be used if the instantiator of the wrapped component provides no value to the
   * `skin` prop.
   *
   * @type {String}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  defaultSkin: null,

  /**
   * Initial collection of applied variants
   *
   * This will be used if the instantiator of the wrapped component provides no value to the
   * `skinVariants` prop.
   *
   * @type {String|String[]}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  defaultVariants: null,

  /**
   * A complete list of all supported variants.
   *
   * These will translate to CSS class names so should not conflict with any skin names.
   * CamelCase is recommended for the values.
   *
   * @type {String[]}
   * @memberof ui/Skinnable.Skinnable.defaultConfig
   */
  allowedVariants: null
};
/**
 * Allows a component to respond to skin changes via the Context API
 *
 * Example:
 * ```
 * <App skin="dark">
 * 	<Section>
 * 		<Button>Gray Button</Button>
 * 	<Section>
 * 	<Popup skin="light">
 * 		<Button>White Button</Button>
 * 	</Popup>
 * </App>
 * ```
 *
 * @class SkinContext
 * @memberof ui/Skinnable
 * @hoc
 * @public
 */

var SkinContext = _react["default"].createContext(null);
/**
 * A higher-order component that assigns skinning classes for the purposes of styling children components.
 *
 * Use the config options to specify the skins your theme has. Set this up in your theme's decorator
 * component to establish your supported skins.
 *
 * Example:
 * ```
 * App = Skinnable({
 * 	skins: {
 * 		dark: 'moonstone',
 * 		light: 'moonstone-light'
 * 	},
 * 	defaultTheme: 'dark'
 * 	defaultVariants: ['highContrast'],
 * 	allowedVariants: ['highContrast', 'largeText', 'grayscale']
 * }, App);
 * ```
 *
 * @class Skinnable
 * @memberof ui/Skinnable
 * @hoc
 * @public
 */


var Skinnable = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var prop = config.prop,
      skins = config.skins,
      defaultSkin = config.defaultSkin,
      allowedVariants = config.allowedVariants,
      variantsProp = config.variantsProp;
  var defaultVariants = (0, _util.objectify)(config.defaultVariants);

  function determineSkin(authorSkin, parentSkin) {
    return authorSkin || defaultSkin || parentSkin;
  }

  function determineVariants(authorVariants, parentVariants) {
    if (!allowedVariants || !(allowedVariants instanceof Array)) {
      // There are no allowed variants, so just return an empty object, indicating that there are no viable determined variants.
      return {};
    }

    authorVariants = (0, _util.objectify)(authorVariants);
    parentVariants = (0, _util.objectify)(parentVariants); // Merge all of the variants objects, preferring values in objects from left to right.

    var mergedObj = [defaultVariants, parentVariants, authorVariants].reduce(function (obj, a) {
      Object.keys(a).forEach(function (key) {
        obj[key] = (0, _util.preferDefined)(a[key], obj[key]);
      });
      return obj;
    }, {}); // Clean up the merged object

    for (var key in mergedObj) {
      // Delete keys that are null or undefined and delete keys that aren't allowed
      if (mergedObj[key] == null || !allowedVariants.includes(key)) {
        delete mergedObj[key];
      }
    }

    return mergedObj;
  }

  function getClassName(effectiveSkin, className, variants) {
    var skin = skins && skins[effectiveSkin]; // only apply the skin class if it's set and different from the "current" skin as
    // defined by the value in context

    if (skin || variants) {
      className = (0, _classnames["default"])(skin, variants, className);
    }

    if (className) return className;
  }

  return (0, _kind["default"])({
    name: 'Skinnable',
    propTypes:
    /** @lends ui/Skinnable.Skinnable.prototype */
    {
      /**
       * The name of the skin a component should use to render itself. Available skins are
       * defined in the "defaultConfig" for this HOC.
       *
       * @type {String}
       * @public
       */
      skin: _propTypes["default"].string,

      /**
       * The variant(s) on a skin that a component should use when rendering. These will
       * typically alter the appearance of a skin's existing definition in a way that does not
       * override that skin's general styling.
       *
       * Multiple data types are supported by this prop, which afford different conveniences
       * and abilities. String and Array are effectively the same, supporting just additions
       * to the variants being applied to a component, and are much more convenient. Objects
       * may also be used, and have the ability to disable variants being passed by their
       * ancestors. Objects take the format of a basic hash, with variants as key names and
       * true/false Booleans as values, depicting their state. If a variant is excluded from
       * any version of data type used to set this prop, that variant will ignored, falling
       * back to the defaultVariant or parent variant, in that order.
       *
       * skinVariants examples:
       * ```
       *  // String
       *  skinVariants="highContrast"
       *
       *  // Array
       *  skinVariants={['highContrast']}
       *
       *  // Object
       *  skinVariants={{
       *  	highContrast: true,
       *  	grayscale: false
       *  }}
       * ```
       *
       * @type {String|String[]|Object}
       * @public
       */
      skinVariants: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].object])
    },
    render: function render(_ref) {
      var className = _ref.className,
          skin = _ref.skin,
          skinVariants = _ref.skinVariants,
          rest = _objectWithoutProperties(_ref, ["className", "skin", "skinVariants"]);

      return _react["default"].createElement(SkinContext.Consumer, null, function (value) {
        var _ref2 = value || {},
            parentSkin = _ref2.parentSkin,
            parentVariants = _ref2.parentVariants;

        var effectiveSkin = determineSkin(skin, parentSkin);
        var variants = determineVariants(skinVariants, parentVariants);
        var allClassNames = getClassName(effectiveSkin, className, variants);

        if (allClassNames) {
          rest.className = allClassNames;
        }

        if (prop) {
          rest[prop] = effectiveSkin;
        }

        if (variantsProp) {
          rest[variantsProp] = variants;
        }

        return _react["default"].createElement(SkinContext.Provider, {
          value: {
            parentSkin: effectiveSkin,
            parentVariants: variants
          }
        }, _react["default"].createElement(Wrapped, rest));
      });
    }
  });
});
exports.Skinnable = Skinnable;
var _default = Skinnable;
exports["default"] = _default;