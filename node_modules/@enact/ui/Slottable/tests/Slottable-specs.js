"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _kind = _interopRequireDefault(require("@enact/core/kind"));

var _Slottable = _interopRequireDefault(require("../Slottable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* globals console */

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */
describe('Slottable Specs', function () {
  test('should distribute children with a \'slot\' property', function () {
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b', 'c']
    }, function (_ref) {
      var a = _ref.a,
          b = _ref.b,
          c = _ref.c;
      return _react["default"].createElement("div", null, c, b, a);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a"
    }, "A"), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement("div", {
      slot: "c"
    }, "C")));
    var expected = 'CBA';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should distribute children with a \'type\' that matches a slot', function () {
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b', 'c', 'custom']
    }, function (_ref2) {
      var a = _ref2.a,
          b = _ref2.b,
          c = _ref2.c,
          custom = _ref2.custom;
      return _react["default"].createElement("div", null, c, b, a, custom);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a"
    }, "A"), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement("custom", null, "D"), _react["default"].createElement("div", {
      slot: "c"
    }, "C")));
    var expected = 'CBAD';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should distribute children whose \'type\' has a \'defaultSlot\' property that matches a slot', function () {
    var Custom = (0, _kind["default"])({
      name: 'Custom',
      render: function render(_ref3) {
        var children = _ref3.children;
        return _react["default"].createElement("div", null, children);
      }
    });
    Custom.defaultSlot = 'c';
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b', 'c']
    }, function (_ref4) {
      var a = _ref4.a,
          b = _ref4.b,
          c = _ref4.c;
      return _react["default"].createElement("div", null, c, b, a);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a"
    }, "A"), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement(Custom, null, "C")));
    var expected = 'CBA';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should distribute children with no \'slot\' property to Slottable\'s \'children\'', function () {
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b']
    }, function (_ref5) {
      var a = _ref5.a,
          b = _ref5.b,
          children = _ref5.children;
      return _react["default"].createElement("div", null, children, b, a);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a"
    }, "A"), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement("div", null, "C")));
    var expected = 'CBA';
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should not distribute children with an invalid \'slot\' property', function () {
    // Modify the console spy to silence error output with
    // an empty mock implementation
    console.error.mockImplementation();
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b']
    }, function (_ref6) {
      var a = _ref6.a,
          b = _ref6.b,
          c = _ref6.c;
      return _react["default"].createElement("div", null, c, b, a);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a"
    }, "A"), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement("div", {
      slot: "c"
    }, "C")));
    var expected = 'BA';
    var actual = subject.text();
    expect(actual).toBe(expected); // Check to make sure that we only get the one expected error

    var actualErrorsLength = console.error.mock.calls.length;
    var expectedErrorLength = 1;
    expect(actualErrorsLength).toBe(expectedErrorLength);
    var actualError = console.error.mock.calls[0][0];
    var expectedError = 'Warning: The slot "c" specified on div does not exist';
    expect(actualError).toBe(expectedError);
  });
  test('should distribute children with props other than simply \'children\', in entirety, to the matching destination slot', function () {
    var Component = (0, _Slottable["default"])({
      slots: ['a', 'b', 'c', 'custom']
    }, function (_ref7) {
      var a = _ref7.a,
          b = _ref7.b,
          c = _ref7.c,
          custom = _ref7.custom;
      return _react["default"].createElement("div", {
        className: "root-div"
      }, c, b, a, custom);
    });
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null, _react["default"].createElement("div", {
      slot: "a",
      title: "Div A"
    }), _react["default"].createElement("div", {
      slot: "b"
    }, "B"), _react["default"].createElement("custom", null, "D"), _react["default"].createElement("div", {
      slot: "c"
    }, "C")));
    var expected = 'CBD';
    var actual = subject.text();
    expect(actual).toBe(expected);
    var expectedTitle = 'Div A';
    var actualTitle = subject.find('.root-div').childAt(2).prop('title');
    expect(actualTitle).toBe(expectedTitle);
  });
});