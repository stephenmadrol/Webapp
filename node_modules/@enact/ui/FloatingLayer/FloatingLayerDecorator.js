"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FloatingLayerDecorator = exports.FloatingLayerContext = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _Registry = _interopRequireDefault(require("@enact/core/internal/Registry"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var forAction = (0, _handle.forEventProp)('action');

var FloatingLayerContext = _react["default"].createContext();
/**
 * Default config for {@link ui/FloatingLayer.FloatingLayerDecorator}.
 *
 * @memberof ui/FloatingLayer.FloatingLayerDecorator
 * @hocconfig
 */


exports.FloatingLayerContext = FloatingLayerContext;
var defaultConfig = {
  /**
   * Element Id of the floatLayer
   *
   * @type {String}
   * @default 'floatLayer'
   * @public
   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
   */
  floatLayerId: 'floatLayer',

  /**
   * Class name to be applied to wrapped component.
  	 * It can be used when you want to only apply
   * certain styles to the wrapped component and not to the float layer.
   *
   * @type {String}
   * @default ''
   * @public
   * @memberof ui/FloatingLayer.FloatingLayerDecorator.defaultConfig
   */
  wrappedClassName: ''
};
/**
 * A higher-order component that adds a FloatingLayer adjacent to wrapped component.
 *
 * @class FloatingLayerDecorator
 * @memberof ui/FloatingLayer
 * @hoc
 * @public
 */

var FloatingLayerDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var floatLayerId = config.floatLayerId,
      wrappedClassName = config.wrappedClassName;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class(props) {
      var _this;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));

      _this.getFloatingLayer = function () {
        // FIXME: if a component that resides in the floating layer is rendered at the same time
        // as the floating layer, this.floatingLayer may not have been initialized yet since
        // componentDidMount runs inside-out. As a fallback, we search by id but this could
        // introduce issues (e.g. for duplicate layer ids).
        return _this.floatingLayer || typeof document !== 'undefined' && document.getElementById(floatLayerId) || null;
      };

      _this.handleNotify = (0, _handle.oneOf)([forAction('register'), (0, _handle.call)('notifyMount')], [forAction('closeAll'), (0, _handle.call)('handleCloseAll')]).bind(_assertThisInitialized(_this));

      _this.setFloatingLayer = function (node) {
        _this.floatingLayer = node;
      };

      _this.registry = _Registry["default"].create(_this.handleNotify);
      _this.floatingLayer = null;
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.notifyMount();
      }
    }, {
      key: "handleCloseAll",
      value: function handleCloseAll() {
        this.registry.notify({
          action: 'close'
        });
      }
    }, {
      key: "notifyMount",
      value: function notifyMount() {
        this.registry.notify({
          action: 'mount',
          floatingLayer: this.getFloatingLayer()
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            className = _this$props.className,
            rest = _objectWithoutProperties(_this$props, ["className"]);

        return _react["default"].createElement(FloatingLayerContext.Provider, {
          value: this.registry.register
        }, _react["default"].createElement("div", {
          className: className
        }, _react["default"].createElement(Wrapped, Object.assign({
          key: "floatWrapped"
        }, rest, {
          className: wrappedClassName
        })), _react["default"].createElement("div", {
          id: floatLayerId,
          key: "floatLayer",
          ref: this.setFloatingLayer
        })));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'FloatingLayerDecorator', _temp;
});
exports.FloatingLayerDecorator = FloatingLayerDecorator;
var _default = FloatingLayerDecorator;
exports["default"] = _default;