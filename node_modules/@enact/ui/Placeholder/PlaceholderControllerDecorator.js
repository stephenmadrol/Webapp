"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlaceholderControllerDecorator = exports.PlaceholderContext = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

var _util = require("@enact/core/util");

var _Registry = _interopRequireDefault(require("@enact/core/internal/Registry"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Default config for `PlaceholderControllerDecorator`.
 *
 * @memberof ui/Placeholder.PlaceholderControllerDecorator
 * @hocconfig
 * @public
 */
var defaultConfig = {
  /**
   * The bounds of the container represented by an object with `height` and `width` members.
   *
   * If the container is a static size, this can be specified at design-time to avoid calculating
   * the bounds at run-time (the default behavior).
   *
   * @type {Object}
   * @default null
   * @memberof ui/Placeholder.PlaceholderControllerDecorator.defaultConfig
   */
  bounds: null,

  /**
   * Event callback which indicates that the viewport has scrolled and placeholders should be
   * notified.
   *
   * @type {String}
   * @default onScroll
   * @memberof ui/Placeholder.PlaceholderControllerDecorator.defaultConfig
   */
  notify: 'onScroll',

  /**
   * Multiplier used with the wrapped component's height and width to determine the threshold for
   * replacing the placeholder component with the true component.
   *
   * @type {Number}
   * @default 1.5
   * @memberof ui/Placeholder.PlaceholderControllerDecorator.defaultConfig
   */
  thresholdFactor: 1.5
};

var PlaceholderContext = _react["default"].createContext();
/**
 * A higher-order component (HOC) that render placeholder components.
 *
 * Components are rendered based on their position relative to the `'scrollTop'` from the
 * `'onScroll'`'s parameter. They are not unmounted once rendered.
 *
 * @class PlaceholderControllerDecorator
 * @memberof ui/Placeholder
 * @hoc
 * @public
 */


exports.PlaceholderContext = PlaceholderContext;
var PlaceholderControllerDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var bounds = config.bounds,
      notify = config.notify,
      thresholdFactor = config.thresholdFactor;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.bounds = null;
      _this.leftThreshold = -1;
      _this.node = null;
      _this.topThreshold = -1;
      _this.registry = _Registry["default"].create(_this.handleRegister.bind(_assertThisInitialized(_this)));

      _this.notifyAll = function (topThreshold, leftThreshold) {
        _this.registry.notify({
          leftThreshold: leftThreshold,
          topThreshold: topThreshold
        });
      };

      _this.notifyAllJob = new _util.Job(_this.notifyAll, 32);
      _this.handle = _handle.handle.bind(_assertThisInitialized(_this));
      _this.handleNotify = _this.handle((0, _handle.forward)(notify), function (_ref) {
        var scrollLeft = _ref.scrollLeft,
            scrollTop = _ref.scrollTop;

        _this.setThresholds(scrollTop, scrollLeft);
      });
      return _this;
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setBounds();
        this.setThresholds(0, 0);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.notifyAllJob.stop();
      }
    }, {
      key: "setBounds",
      value: function setBounds() {
        if (bounds != null) {
          this.bounds = Object.assign({}, bounds);
        } else {
          // Allowing findDOMNode for HOCs versus adding extra ref props
          // eslint-disable-next-line	react/no-find-dom-node
          this.node = _reactDom["default"].findDOMNode(this);
          this.bounds = {
            height: this.node.offsetHeight,
            width: this.node.offsetWidth
          };
        }
      }
    }, {
      key: "handleRegister",
      value: function handleRegister(ev) {
        if (ev.action === 'register') {
          // do not notify until we've initialized the thresholds
          if (this.topThreshold !== -1 && this.leftThreshold !== -1) {
            this.notifyAllJob.start(this.topThreshold, this.leftThreshold);
          }
        }
      }
    }, {
      key: "setThresholds",
      value: function setThresholds(top, left) {
        var _this$bounds = this.bounds,
            height = _this$bounds.height,
            width = _this$bounds.width;
        var topThreshold = height * thresholdFactor + top;
        var leftThreshold = width * thresholdFactor + left;

        if (this.topThreshold < topThreshold || this.leftThreshold < leftThreshold) {
          this.notifyAll(topThreshold, leftThreshold);
          this.topThreshold = topThreshold;
          this.leftThreshold = leftThreshold;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props = Object.assign({}, this.props);
        if (notify) props[notify] = this.handleNotify;
        return _react["default"].createElement(PlaceholderContext.Provider, {
          value: this.registry.register
        }, _react["default"].createElement(Wrapped, props));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'PlaceholderControllerDecorator', _temp;
});
exports.PlaceholderControllerDecorator = PlaceholderControllerDecorator;
var _default = PlaceholderControllerDecorator;
exports["default"] = _default;