// Type definitions for ui/Icon

import * as React from "react";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface IconProps {
  /**
   * The icon content.
   *
   * May be specified as either:
   * *  A string that represents an icon from the  iconList  ,
   * *  An HTML entity string, Unicode reference or hex value (in the form '0x...'),
   * *  A URL specifying path to an icon image, or
   * *  An object representing a resolution independent resource (See   ).
   */
  children?: string | object;
  /**
 * Customizes the component by mapping the supplied collection of CSS class names to the
corresponding internal Elements and states of this component.
 * 
 * The following classes are supported:
 * *  `icon`  - The root component class
 * *  `dingbat`  - Applied when the value of  `icon`   is not
found in  iconList 
 * *  `small`  - Applied when  `small`  prop is  `true`
 * *  `pressed`  - Applied when  `pressed`  prop is  `true`
 */
  css?: object;
  /**
 * The full list (hash) of supported icons.
 * 
 * The keys of this hash are the unique names of each icon. The values are the unicode
characters to insert in the icon. These will typically map to glyphs in your icon-font.
The format of the keys can be character, glyph, or entity reference that correctly
renders in a React + JSX string.
 */
  iconList?: object;
  /**
   * Applies the  `pressed`  CSS class.
   */
  pressed?: boolean;
  /**
   * Applies the  `small`  CSS class.
   */
  small?: boolean;
}
/**
 * A basic icon component structure without any behaviors applied to it.
 */

export class Icon extends React.Component<
  IconProps & React.HTMLProps<HTMLElement>
> {}

export default Icon;
