"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ApiDecorator = _interopRequireDefault(require("../ApiDecorator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

describe('ApiDecorator', function () {
  var _class, _temp;

  var ApiProvider = (_temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(ApiProvider, _React$Component);

    function ApiProvider(props) {
      var _this;

      _classCallCheck(this, ApiProvider);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ApiProvider).call(this)); // eslint-disable-next-line

      _this.arrowFunction = function () {
        return 'arrow';
      };

      _this.instanceProperty = 'property';
      props.setApiProvider(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(ApiProvider, [{
      key: "instanceFunction",
      value: function instanceFunction() {
        return 'instance';
      }
    }, {
      key: "render",
      value: function render() {
        return _react["default"].createElement("div", null);
      }
    }]);

    return ApiProvider;
  }(_react["default"].Component), _class.displayName = 'ApiProvider', _temp);
  test('should invoke arrow function on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['arrowFunction']
    }, ApiProvider);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var expected = 'arrow';
    var actual = subject.instance().arrowFunction();
    expect(actual).toBe(expected);
  });
  test('should invoke instance function on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceFunction']
    }, ApiProvider);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var expected = 'instance';
    var actual = subject.instance().instanceFunction();
    expect(actual).toBe(expected);
  });
  test('should get an instance property on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceProperty']
    }, ApiProvider);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    var expected = 'property';
    var actual = subject.instance().instanceProperty;
    expect(actual).toBe(expected);
  });
  test('should set an instance property on wrapped component', function () {
    var Component = (0, _ApiDecorator["default"])({
      api: ['instanceProperty']
    }, ApiProvider);
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Component, null));
    subject.instance().instanceProperty = 'updated';
    var expected = 'updated';
    var actual = subject.instance().instanceProperty;
    expect(actual).toBe(expected);
  });
});