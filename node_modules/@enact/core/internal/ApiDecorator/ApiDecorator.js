"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiDecorator = exports["default"] = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

var _react = _interopRequireDefault(require("react"));

var _hoc = _interopRequireDefault(require("../../hoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Gets a property from `provider`
var get = function get(provider, name) {
  return function () {
    if (provider) {
      return provider[name];
    }
  };
}; // Sets a property on `provider`


var set = function set(provider, name) {
  return function (value) {
    if (provider && typeof provider[name] !== 'function') {
      return provider[name] = value;
    }
  };
};
/**
 * Default config for {@link core/internal/ApiDecorator.ApiDecorator}.
 *
 * @memberof core/internal/ApiDecorator.ApiDecorator
 * @hocconfig
 */


var defaultConfig = {
  /**
   * Configures the API endpoints to be exposed
   *
   * @type {String[]}
   * @required
   * @memberof core/internal/ApiDecorator.ApiDecorator.defaultConfig
   */
  api: null
};
/**
 * {@link core/internal/ApiDecorator.ApiDecorator} is a higher-order component that exposes an
 * imperative API for a contained component. ApiDecorator accepts an array of API endpoints in the
 * `api` config parameter. Each is then mapped to the underlying component instance as either a
 * function call or property getter/setter pair. The component passes a reference to itself to the
 * ApiDecorator by a `setApiProvider` prop added by the HOC.
 *
 * ```
 * import ApiDecorator from '@enact/core/internal/ApiDecorator';
 *
 * const MyComponent = class extends React.Component {
 * 	static displayName = 'MyComponent';
 *
 * 	doSomething = () => {
 * 	}
 * }
 *
 * @class ApiDecorator
 * @memberof core/internal/ApiDecorator
 * @hoc
 * @private
 */

var ApiDecorator = (0, _hoc["default"])(defaultConfig, function (config, Wrapped) {
  var _class, _temp;

  var api = config.api;
  !(api != null) ? process.env.NODE_ENV !== "production" ? (0, _invariant["default"])(false, 'ApiDecorator: api is a required config property') : invariant(false) : void 0;
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setProvider = function (provider) {
        api.forEach(function (key) {
          Object.defineProperty(_assertThisInitialized(_this), key, {
            get: get(provider, key),
            set: set(provider, key),
            enumerable: true,
            configurable: true
          });
        });
      };

      return _this;
    }

    _createClass(_class, [{
      key: "render",
      value: function render() {
        return _react["default"].createElement(Wrapped, Object.assign({
          setApiProvider: this.setProvider
        }, this.props));
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'ApiDecorator', _temp;
});
exports.ApiDecorator = ApiDecorator;
var _default = ApiDecorator;
exports["default"] = _default;