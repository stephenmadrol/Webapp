"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Registry = _interopRequireDefault(require("../Registry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SomeContext = _react["default"].createContext();

describe('Registry', function () {
  var NotifiesTree =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(NotifiesTree, _React$Component);

    function NotifiesTree() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, NotifiesTree);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NotifiesTree)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.registry = _Registry["default"].create();

      _this.handleClick = function () {
        _this.registry.notify({});
      };

      return _this;
    }

    _createClass(NotifiesTree, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.registry.parent = this.context;
      }
    }, {
      key: "render",
      value: function render() {
        return _react["default"].createElement(SomeContext.Provider, {
          value: this.registry.register
        }, _react["default"].createElement("button", Object.assign({}, this.props, {
          onClick: this.handleClick
        }), "Notify!"), this.props.children);
      }
    }]);

    return NotifiesTree;
  }(_react["default"].Component);

  NotifiesTree.contextType = SomeContext;

  var HandlesNotification =
  /*#__PURE__*/
  function (_React$Component2) {
    _inherits(HandlesNotification, _React$Component2);

    function HandlesNotification() {
      var _getPrototypeOf3;

      var _this2;

      _classCallCheck(this, HandlesNotification);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(HandlesNotification)).call.apply(_getPrototypeOf3, [this].concat(args)));
      _this2.state = {
        number: 0
      };

      _this2.handleResize = function () {
        _this2.setState(function (prevState) {
          var number = prevState.number + 1;
          return {
            number: number
          };
        });
      };

      return _this2;
    }

    _createClass(HandlesNotification, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.context && typeof this.context === 'function') {
          this.registry = this.context(this.handleResize);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.registry) {
          this.registry.unregister();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return _react["default"].createElement("div", this.props, this.state.number);
      }
    }]);

    return HandlesNotification;
  }(_react["default"].Component);

  HandlesNotification.contextType = SomeContext;
  test('should increment child on click', function () {
    var RegistryApp = (0, _enzyme.mount)(_react["default"].createElement(NotifiesTree, {
      id: "a-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "a"
    })));
    RegistryApp.find('button#a-btn').simulate('click');
    var expected = '1';
    var actual = RegistryApp.find('div#a').text();
    expect(expected).toBe(actual);
  });
  test('should increment both children on top click', function () {
    var RegistryApp = (0, _enzyme.mount)(_react["default"].createElement(NotifiesTree, {
      id: "a-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "a"
    }), _react["default"].createElement(NotifiesTree, {
      id: "b-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "b"
    }))));
    RegistryApp.find('button#a-btn').simulate('click');
    var expected = '1';
    var actualA = RegistryApp.find('div#a').text();
    var actualB = RegistryApp.find('div#b').text();
    expect(expected).toBe(actualA);
    expect(expected).toBe(actualB);
  });
  test('should increment the deepest child when we click child button', function () {
    var RegistryApp = (0, _enzyme.mount)(_react["default"].createElement(NotifiesTree, {
      id: "a-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "a"
    }), _react["default"].createElement(NotifiesTree, {
      id: "b-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "b"
    }))));
    RegistryApp.find('button#b-btn').simulate('click');
    var expectedA = '0';
    var expectedB = '1';
    var actualA = RegistryApp.find('div#a').text();
    var actualB = RegistryApp.find('div#b').text();
    expect(expectedA).toBe(actualA);
    expect(expectedB).toBe(actualB);
  });
  test('should support removing children without error', function () {
    var RegistryApp = (0, _enzyme.mount)(_react["default"].createElement(NotifiesTree, {
      id: "a-btn"
    }, _react["default"].createElement(HandlesNotification, {
      id: "a"
    }), _react["default"].createElement(HandlesNotification, {
      id: "b"
    })));
    RegistryApp.find('button#a-btn').simulate('click'); // changing children should be safe and not throw errors when notifying instances

    RegistryApp.setProps({
      children: _react["default"].createElement(HandlesNotification, {
        id: "c"
      })
    });
    RegistryApp.find('button#a-btn').simulate('click');
    var expectedC = '1';
    var actualC = RegistryApp.find('div#c').text();
    expect(expectedC).toBe(actualC);
  });
});