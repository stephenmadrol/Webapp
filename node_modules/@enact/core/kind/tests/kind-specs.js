"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _enzyme = require("enzyme");

var _kind = _interopRequireDefault(require("../kind"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

describe('kind', function () {
  var TestContext = _react["default"].createContext();

  var Kind = (0, _kind["default"])({
    name: 'Kind',
    propTypes: {
      prop: _propTypes["default"].number.isRequired,
      label: _propTypes["default"].string
    },
    defaultProps: {
      label: 'Label'
    },
    contextType: TestContext,
    styles: {
      className: 'kind'
    },
    handlers: {
      onClick: function onClick() {}
    },
    computed: {
      value: function value(_ref) {
        var prop = _ref.prop;
        return prop + 1;
      }
    },
    render: function render(_ref2) {
      var label = _ref2.label,
          value = _ref2.value,
          rest = _objectWithoutProperties(_ref2, ["label", "value"]);

      delete rest.prop;
      return _react["default"].createElement("div", Object.assign({}, rest, {
        title: label
      }), value);
    }
  });
  test('should assign name to displayName', function () {
    var expected = 'Kind';
    var actual = Kind.displayName;
    expect(actual).toBe(expected);
  });
  test('should default {label} property', function () {
    var subject = _react["default"].createElement(Kind, {
      prop: 1
    });

    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should default {label} property when explicitly undefined', function () {
    // Explicitly testing for undefined
    // eslint-disable-next-line no-undefined
    var subject = _react["default"].createElement(Kind, {
      prop: 1,
      label: undefined
    });

    var expected = 'Label';
    var actual = subject.props.label;
    expect(actual).toBe(expected);
  });
  test('should add className defined in styles', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Kind, {
      prop: 1
    }));
    var expected = 'kind';
    var actual = subject.find('div').prop('className');
    expect(actual).toBe(expected);
  });
  test('should compute {value} property', function () {
    var subject = (0, _enzyme.mount)(_react["default"].createElement(Kind, {
      prop: 1
    }));
    var expected = 2;
    var actual = subject.find('div').prop('children');
    expect(actual).toBe(expected);
  });
  test('should assign contextType when handlers are specified', function () {
    var actual = Kind.contextType != null;
    var expected = true;
    expect(actual).toBe(expected);
  });
  describe('inline', function () {
    test('should support a minimal kind', function () {
      var Minimal = (0, _kind["default"])({
        name: 'Minimal',
        render: function render() {
          return _react["default"].createElement("div", null);
        }
      });
      var component = Minimal.inline();
      var expected = 'div';
      var actual = component.type;
      expect(actual).toBe(expected);
    });
    test('should set default props when prop is not passed', function () {
      var component = Kind.inline(); // since we're inlining the output, we have to reference where the label prop lands --
      // the title prop of the <div> -- rather than the label prop on the component (which
      // doesn't exist due to inlining).

      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should set default props when passed prop is undefined', function () {
      var component = Kind.inline({
        // explicitly testing settings undefined in this test case
        // eslint-disable-next-line no-undefined
        label: undefined
      });
      var expected = 'Label';
      var actual = component.props.title;
      expect(actual).toBe(expected);
    });
    test('should include handlers', function () {
      var component = Kind.inline();
      var expected = 'function';

      var actual = _typeof(component.props.onClick);

      expect(actual).toBe(expected);
    });
  });
});