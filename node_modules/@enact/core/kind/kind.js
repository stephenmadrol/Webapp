"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kind = exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _computed = _interopRequireDefault(require("./computed"));

var _styles = _interopRequireDefault(require("./styles"));

var _warning = _interopRequireDefault(require("warning"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * @callback RenderFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns React.Element|null
 */

/**
 * @callback ComputedPropFunction
 * @memberof core/kind
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 * @returns any
 */

/**
 * @callback HandlerFunction
 * @memberof core/kind
 * @param {any} event
 * @param {Object<string, any>} props
 * @param {Object<string, any>} context
 */

/**
 * Configuration for CSS class name mapping
 *
 * @typedef {Object} StylesBlock
 * @memberof core/kind
 * @property {Object.<string, string>} css
 * @property {String} [className]
 * @property {Boolean|String|String[]} [publicClassNames]
 */

/**
 * @typedef {Object} KindConfig
 * @memberof core/kind
 * @property {String} name
 * @property {Object.<string, Function>} [propTypes]
 * @property {Object.<string, any>} [defaultProps]
 * @property {Object} [contextType]
 * @property {StylesBlock} [styles]
 * @property {Object.<string, HandlerFunction>} [handlers]
 * @property {Object.<string, ComputedPropFunction>} [computed]
 * @property {RenderFunction} render
 */

/**
 * Creates a new component with some helpful declarative syntactic sugar.
 *
 * Example:
 * ```
 *	import css from './Button.module.less';
 *	const Button = kind({
 *		// expect color and onClick properties but neither required
 *		propTypes: {
 *			color: PropTypes.string
 *		},
 *		// if no color is provided, it'll be green
 *		defaultProps: {
 *			color: 'green'
 *		},
 *		// expect backgroundColor via context
 *		contextType: React.createContext({ backgroundColor }),
 *		// configure styles with the static className to merge with user className
 *		styles: {
 *			// include the CSS modules map so 'button' can be resolved to the local name
 *			css,
 *			className: 'button'
 *		},
 *		// add some computed properties
 *		computed: {
 *			// border color will be the color prepended by 'light'
 *			borderColor: ({color}) => 'light' + color,
 *			// background color will be the contextual background color if specified
 *			color: ({color}, context) => context.backgroundColor || color
 *		},
 *		// Render the thing, already!
 *		render: ({color, borderColor, children, ...rest}) => (
 *			<button
 *				{...rest}
 *				style={{backgroundColor: color, borderColor}}
 *			>
 *				{children}
 *			</button>
 *		)
 *	});
 * ```
 *
 * @function
 * @template Props
 * @param  {KindConfig}    config    Component configuration
 *
 * @returns {Component<Props>}           Component
 * @memberof core/kind
 * @public
 */
var kind = function kind(config) {
  var _class, _temp;

  var cfgComputed = config.computed,
      contextType = config.contextType,
      contextTypes = config.contextTypes,
      defaultProps = config.defaultProps,
      handlers = config.handlers,
      name = config.name,
      propTypes = config.propTypes,
      render = config.render,
      cfgStyles = config.styles;
  process.env.NODE_ENV !== "production" ? (0, _warning["default"])(!contextTypes, "\"contextTypes\" used by ".concat(name || 'a component', " but is deprecated. Please replace with \"contextType\" instead.")) : void 0;
  var renderStyles = cfgStyles ? (0, _styles["default"])(cfgStyles) : false;
  var renderComputed = cfgComputed ? (0, _computed["default"])(cfgComputed) : false;

  var renderKind = function renderKind(props, context) {
    if (renderStyles) props = renderStyles(props, context);
    if (renderComputed) props = renderComputed(props, context);
    return render(props, context);
  }; // addition prop decorations would be chained here (after config.render)


  var Component = (_temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(Component, _React$Component);

    function Component() {
      var _this;

      _classCallCheck(this, Component);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Component).call(this));
      _this.handlers = {}; // cache bound function for each handler

      if (handlers) {
        Object.keys(handlers).forEach(function (handler) {
          return _this.prepareHandler(handler, handlers[handler]);
        });
      }

      return _this;
    }
    /*
     * Caches an event handler on the local `handlers` member
     *
     * @param   {String}    name     Event name
     * @param   {Function}  handler  Event handler
     *
     * @returns {undefined}
     */


    _createClass(Component, [{
      key: "prepareHandler",
      value: function prepareHandler(prop, handler) {
        var _this2 = this;

        this.handlers[prop] = function (ev) {
          return handler(ev, _this2.props, _this2.context);
        };
      }
    }, {
      key: "render",
      value: function render() {
        return renderKind(_objectSpread({}, this.props, this.handlers), this.context);
      }
    }]);

    return Component;
  }(_react["default"].Component), _class.displayName = name || 'Component', _temp);
  if (propTypes) Component.propTypes = propTypes;
  if (contextTypes) Component.contextTypes = contextTypes;
  if (contextType) Component.contextType = contextType;
  if (defaultProps) Component.defaultProps = defaultProps; // Decorate the Component with the computed property object in DEV for easier testability

  if (process.env.NODE_ENV !== "production" && cfgComputed) Component.computed = cfgComputed;
  var defaultPropKeys = defaultProps ? Object.keys(defaultProps) : null;
  var handlerKeys = handlers ? Object.keys(handlers) : null;

  Component.inline = function (props, context) {
    var updated = _objectSpread({}, props);

    if (defaultPropKeys && defaultPropKeys.length > 0) {
      defaultPropKeys.forEach(function (key) {
        // eslint-disable-next-line no-undefined
        if (props == null || props[key] === undefined) {
          updated[key] = defaultProps[key];
        }
      });
    }

    if (handlerKeys && handlerKeys.length > 0) {
      // generate a handler with a clone of updated to ensure each handler receives the same
      // props without the kind.handlers injected.
      updated = handlerKeys.reduce(function (_props, key) {
        _props[key] = function (ev) {
          return handlers[key](ev, updated, context);
        };

        return _props;
      }, _objectSpread({}, updated));
    }

    return renderKind(updated, context);
  };

  return Component;
};

exports.kind = kind;
var _default = kind;
exports["default"] = _default;