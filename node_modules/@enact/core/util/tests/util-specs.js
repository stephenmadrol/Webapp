"use strict";

var _react = _interopRequireDefault(require("react"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('util', function () {
  describe('isRenderable', function () {
    test('should return {true} for function', function () {
      var expected = true;
      var actual = (0, _util.isRenderable)(function () {});
      expect(actual).toEqual(expected);
    });
    test('should return {true} for string', function () {
      var expected = true;
      var actual = (0, _util.isRenderable)('div');
      expect(actual).toEqual(expected);
    });
    test('should return {true} for React.forwardRef', function () {
      var expected = true;
      var actual = (0, _util.isRenderable)(_react["default"].forwardRef(function () {}));
      expect(actual).toEqual(expected);
    });
    test('should return {true} for React.memo', function () {
      var expected = true;
      var actual = (0, _util.isRenderable)(_react["default"].memo(function () {}));
      expect(actual).toEqual(expected);
    });
    test('should return {true} for React.lazy', function () {
      var expected = true;
      var actual = (0, _util.isRenderable)(_react["default"].lazy(function () {}));
      expect(actual).toEqual(expected);
    });
  });
  describe('memoize', function () {
    test('should memoize function', function () {
      var obj = {},
          testMethod = function testMethod(key) {
        obj[key] = (obj[key] || 0) + 1;
      },
          memoizedTest = (0, _util.memoize)(testMethod);

      expect(obj).not.toHaveProperty('a');
      memoizedTest('a');
      expect(obj).toHaveProperty('a', 1);
      memoizedTest('a');
      memoizedTest('a');
      expect(obj).toHaveProperty('a', 1);
    });
    test('should forward all args to memoized function', function () {
      var spy = jest.fn();
      var memoized = (0, _util.memoize)(spy);
      memoized(1, 2);
      var expected = [1, 2];
      var actual = spy.mock.calls[0];
      expect(expected).toEqual(actual);
    });
  });
});