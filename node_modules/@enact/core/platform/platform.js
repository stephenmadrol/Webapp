"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.platform = exports.detect = exports["default"] = void 0;

var _uniq = _interopRequireDefault(require("ramda/src/uniq"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var hasGesture = function hasGesture() {
  return Boolean('ongesturestart' in window || 'onmsgesturestart' in window && (window.navigator.msMaxTouchPoints > 1 || window.navigator.maxTouchPoints > 1));
};

var hasTouch = function hasTouch() {
  return Boolean('ontouchstart' in window || window.navigator.msMaxTouchPoints || window.navigator.msManipulationViewsEnabled && window.navigator.maxTouchPoints);
};

var platforms = [// Windows Phone 7 - 10
{
  platform: 'windowsPhone',
  regex: /Windows Phone (?:OS )?(\d+)[.\d]+/
}, // Android 4+ using Chrome
{
  platform: 'androidChrome',
  regex: /Android .* Chrome\/(\d+)[.\d]+/
}, // Android 2 - 4
{
  platform: 'android',
  regex: /Android(?:\s|\/)(\d+)/
}, // Kindle Fire
// Force version to 2, (desktop mode does not list android version)
{
  platform: 'android',
  regex: /Silk\/1./,
  forceVersion: 2,
  extra: {
    silk: 1
  }
}, // Kindle Fire HD (Silk versions 2 or 3)
// Force version to 4
{
  platform: 'android',
  regex: /Silk\/2./,
  forceVersion: 4,
  extra: {
    silk: 2
  }
}, {
  platform: 'android',
  regex: /Silk\/3./,
  forceVersion: 4,
  extra: {
    silk: 3
  }
}, // IE 8 - 10
{
  platform: 'ie',
  regex: /MSIE (\d+)/
}, // IE 11
{
  platform: 'ie',
  regex: /Trident\/.*; rv:(\d+)/
}, // Edge
{
  platform: 'edge',
  regex: /Edge\/(\d+)/
}, // iOS 3 - 5
// Apple likes to make this complicated
{
  platform: 'ios',
  regex: /iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/
}, // webOS 1 - 3
{
  platform: 'webos',
  regex: /(?:web|hpw)OS\/(\d+)/
}, // webOS 4 / OpenWebOS
{
  platform: 'webos',
  regex: /WebAppManager|Isis|webOS\./,
  forceVersion: 4
}, // Open webOS release LuneOS
{
  platform: 'webos',
  regex: /LuneOS/,
  forceVersion: 4,
  extra: {
    luneos: 1
  }
}, // desktop Safari
{
  platform: 'safari',
  regex: /Version\/(\d+)[.\d]+\s+Safari/
}, // desktop Chrome
{
  platform: 'chrome',
  regex: /Chrome\/(\d+)[.\d]+/
}, // Firefox on Android
{
  platform: 'androidFirefox',
  regex: /Android;.*Firefox\/(\d+)/
}, // FirefoxOS
{
  platform: 'firefoxOS',
  regex: /Mobile;.*Firefox\/(\d+)/
}, // desktop Firefox
{
  platform: 'firefox',
  regex: /Firefox\/(\d+)/
}, // Blackberry Playbook
{
  platform: 'blackberry',
  regex: /PlayBook/i,
  forceVersion: 2
}, // Blackberry 10+
{
  platform: 'blackberry',
  regex: /BB1\d;.*Version\/(\d+\.\d+)/
}, // Tizen
{
  platform: 'tizen',
  regex: /Tizen (\d+)/
}];

var ua = function ua() {
  return window.navigator ? window.navigator.userAgent : '';
};

var _platform;
/**
 * @typedef {Object} PlatformDescription
 * @property {Boolean} gesture - `true` if the platform has native double-finger events
 * @property {Boolean} node - `true` only if `window` is `undefined`
 * @property {String} platformName - The name of the platform
 * @property {Boolean} touch - `true` if the platform has native single-finger events
 * @property {Boolean} unknown - `true` for any unknown system
 *
 * @memberof core/platform
 * @public
 */

/**
 * Returns the {@link core/platform.platform} object.
 *
 * @function detect
 * @returns {PlatformDescription}     The {@link core/platform.platform} object
 * @memberof core/platform
 * @public
 */


var detect = function detect() {
  if (_platform) {
    // if we've already determined the platform, we'll use that determination
    return _platform;
  } else if (typeof window === 'undefined') {
    return {
      gesture: false,
      node: true,
      touch: false,
      unknown: true
    };
  }

  var userAgent = ua();
  _platform = {
    gesture: hasGesture(),
    node: false,
    touch: hasTouch(),
    unknown: true
  };

  for (var i = 0, p, m, v; p = platforms[i]; i++) {
    m = p.regex.exec(userAgent);

    if (m) {
      _platform.unknown = false;

      if (p.forceVersion) {
        v = p.forceVersion;
      } else {
        v = Number(m[1]);
      }

      _platform[p.platform] = v;

      if (p.extra) {
        _platform = _objectSpread({}, _platform, p.extra);
      }

      _platform.platformName = p.platform;
      break;
    }
  }

  return _platform;
};
/**
 * Provides basic information about the running platform.
 *
 * @type {PlatformDescription}
 * @memberof core/platform
 * @public
 */


exports.detect = detect;
var platform = {};
exports.platform = platform;
['gesture', 'node', 'platformName', 'touch', 'unknown'].concat(_toConsumableArray((0, _uniq["default"])(platforms.map(function (p) {
  return p.platform;
})))).forEach(function (name) {
  Object.defineProperty(platform, name, {
    enumerable: true,
    get: function get() {
      var p = detect();
      return p[name];
    }
  });
});
var _default = platform;
exports["default"] = _default;