// Type definitions for moonstone/TooltipDecorator

import * as React from "react";
import { UppercaseProps as i18n_Uppercase_UppercaseProps } from "@enact/i18n/Uppercase";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface TooltipBaseProps {
  /**
   * The node to be displayed as the main content of the tooltip.
   */
  children: React.ReactNode;
  /**
 * Position of tooltip arrow in relation to the activator.
 * *  Values:  `'left'` ,  `'center'` ,  `'right'` ,  `'top'` ,  `'middle'` ,  `'bottom'`
 * 
 * Note that  `'left'` ,  `'center'` ,  `'right'`  are applicable when direction is in vertical
orientation (i.e.  `'above'` ,  `'below'` ), and  `'top'` ,  `'middle'` , and  `'bottom'`  are
applicable when direction is in horizontal orientation (i.e.  `'left'` ,  `'right'` )
 */
  arrowAnchor?: string;
  /**
 * Position of the arrow anchor. Takes values between 0 and 1.
This will be the left position percentage relative to the tooltip.
 */
  arrowPosition?: number;
  /**
   * Direction of label in relation to the activator.
   * *  Values:  `'above'` ,  `'below'` ,  `'left'` , and  `'right'`
   */
  direction?: string;
  /**
   * Style object for tooltip position.
   */
  position?: object;
  /**
   * Called when the tooltip mounts/unmounts, giving a reference to the DOM.
   */
  tooltipRef?: Function;
  /**
 * The width of tooltip content in pixels (px).
 * 
 * If the content goes over the given width, then it will automatically wrap. When  `null` ,
content does not wrap.
 */
  width?: number | any;
}
/**
 * A stateless tooltip component with Moonstone styling applied.
 */

export class TooltipBase extends React.Component<
  TooltipBaseProps & React.HTMLProps<HTMLElement>
> {}

export interface TooltipDecoratorConfig extends Object {
  /**
 * The name of the property which will receive the tooltip node.
 * 
 * By default,  `TooltipDecorator`  will add a new child to the wrapped component, following any
other children passed in. If a component needs to, it can specify another property to receive
the tooltip and the  `children`  property will not be modified.
 */
  tooltipDestinationProp?: string;
}
export interface TooltipDecoratorProps {
  /**
   * Disables the component but does not affect tooltip operation.
   */
  disabled?: boolean;
  /**
   * The casing of  `tooltipText` .
   */
  tooltipCasing?: string;
  /**
   * Time to wait (in milliseconds) before showing tooltip on hover.
   */
  tooltipDelay?: number;
  /**
 * Position of the tooltip with respect to the wrapped component.
 * _Value_ _Tooltip Direction_ `'above'` Above component, flowing to the right `'above center'` Above component, centered `'above left'` Above component, flowing to the left `'above right'` Above component, flowing to the right `'below'` Below component, flowing to the right `'below center'` Below component, centered `'below left'` Below component, flowing to the right `'below right'` Below component, flowing to the right `'left bottom'` Left of the component, contents at the bottom `'left middle'` Left of the component, contents middle aligned `'left top'` Left of the component, contents at the top `'right bottom'` Right of the component, contents at the bottom `'right middle'` Right of the component, contents middle aligned `'right top'` Right of the component, contents at the top 
 * `TooltipDectorator`  attempts to choose the best direction to meet layout and language
requirements. Left and right directions will reverse for RTL languages. Additionally,
the tooltip will reverse direction if it will prevent overflowing off the viewport
 */
  tooltipPosition?: string;
  /**
   * Properties to be passed to tooltip component.
   */
  tooltipProps?: object;
  /**
   * Tooltip content.
   */
  tooltipText?: React.ReactNode;
  /**
 * The width of tooltip content in pixels (px).
 * 
 * If the content goes over the given width, it will automatically wrap. When  `null` ,
content does not wrap.
 */
  tooltipWidth?: number | any;
}
export function TooltipDecorator<P>(
  config: TooltipDecoratorConfig,
  Component: React.ComponentType<P> | string
): React.ComponentType<P & TooltipDecoratorProps>;

export function TooltipDecorator<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & TooltipDecoratorProps>;

export interface TooltipProps extends i18n_Uppercase_UppercaseProps {}
/**
 * A tooltip component with Moonstone styling applied. If the Tooltip's child component is text, it
will be uppercased unless  `casing`  is set.
 */

export class Tooltip extends React.Component<
  TooltipProps & React.HTMLProps<HTMLElement>
> {}

export default TooltipDecorator;
