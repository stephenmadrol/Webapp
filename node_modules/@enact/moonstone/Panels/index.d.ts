// Type definitions for moonstone/Panels

import * as React from "react";
import { Arranger as ui_ViewManager_Arranger } from "@enact/ui/ViewManager";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface RoutableConfig extends Object {
  /**
 * The event to listen to for path changes.
 * 
 * This defines the actual name of the  navigate  
property.
 */
  navigate: string;
}
export interface RoutableProps {
  /**
 * Path to the active panel.
 * 
 * May either be a URI-style path ( `'/app/home/settings'` ) or an array
of strings ( `['app', 'home', 'settings']` ).
 */
  path: string | string[];
  /**
   * Called when navigating.
   *
   * The event object is decorated to add  `path` .
   *
   * _NOTE_ : The actual name of this property is configured in the HOC config.
   */
  navigate?: Function;
}
export function Routable<P>(
  config: RoutableConfig,
  Component: React.ComponentType<P> | string
): React.ComponentType<P & RoutableProps>;

export function Routable<P>(
  Component: React.ComponentType<P> | string
): React.ComponentType<P & RoutableProps>;

export interface ActivityPanelsProps {}
/**
 * An instance of Panels in which the Panel uses the entire viewable screen with a single breadcrumb
for the previous panel when viewing any panel beyond the first.
 * 
 * Note  ActivityPanels requires that the  `data-index`  property that all panels variations add to
its children be applied to the root DOM node of each child in order to manage layout correctly.
It is recommended that you spread any extra props on the root node but you may also handle this
property explicitly if necessary.
 */

export class ActivityPanels extends React.Component<
  ActivityPanelsProps & React.HTMLProps<HTMLElement>
> {}

export interface PanelsProps {
  /**
 * Set of functions that control how the panels are transitioned into and out of the
viewport.
 */
  arranger?: ui_ViewManager_Arranger;
  /**
 * An object containing properties to be passed to each child.
 * 
 * `aria-owns`  will be added or updated to this object to add the close button to the
accessibility tree of each panel.
 */
  childProps?: object;
  /**
   * `Panels`   to be rendered
   */
  children?: React.ReactNode;
  /**
   * Sets the hint string read when focusing the application close button.
   */
  closeButtonAriaLabel?: string;
  /**
   * The background opacity of the application close button.
   * *  Values:  `'translucent'` ,  `'lightTranslucent'` ,  `'transparent'`
   */
  closeButtonBackgroundOpacity?: string;
  /**
   * Unique identifier for the Panels instance
   */
  id?: string;
  /**
   * Index of the active panel
   */
  index?: number;
  /**
   * Disables panel transitions.
   */
  noAnimation?: boolean;
  /**
   * Indicates the close button will not be rendered on the top right corner.
   */
  noCloseButton?: boolean;
  /**
   * Called when the app close button is clicked.
   */
  onApplicationClose?: Function;
  /**
   * Called with cancel/back key events.
   */
  onBack?: Function;
}
/**
 * Basic Panels component without breadcrumbs or default  arranger
 */

export class Panels extends React.Component<
  PanelsProps & React.HTMLProps<HTMLElement>
> {}

export interface PanelProps {
  /**
 * The "aria-label" for the Panel.
 * 
 * By default, the panel will be labeled by its  Header  .
When  `aria-label`  is set, it will be used instead to provide an accessibility label for
the panel.
 */
  "aria-label"?: string;
  /**
 * Sets the strategy used to automatically focus an element within the panel upon render.
 * *  "none" - Automatic focus is disabled
 * *  "last-focused" - The element last focused in the panel with be restored
 * *  "default-element" - The first spottable component within the body will be focused
 * *  Custom Selector - A custom CSS selector may also be provided which will be used to find
the target within the Panel
 * 
 * When used within  Panels  , this prop may be set by
 `Panels`  to "default-element" when navigating "forward" to a higher index. This behavior
may be overridden by setting  `autoFocus`  on the  `Panel`  instance as a child of  `Panels` 
or by wrapping  `Panel`  with a custom component and overriding the value passed by
 `Panels` .
 * ```
// Panel within CustomPanel will always receive "last-focused"
const CustomPanel = (props) => <Panel {...props} autoFocus="last-focused" />;

// The first panel will always receive "last-focused". The second panel will receive
// "default-element" when navigating from the first panel but `autoFocus` will be unset
// when navigating from the third panel and as a result will default to "last-focused".
const MyPanels = () => (
  <Panels>
    <Panel autoFocus="last-focused" />
    <Panel />
    <Panel />
  </Panels>
);
```
 */
  autoFocus?: string;
  /**
 * Header for the panel.
 * 
 * This is usually passed by the  Slottable   API by using a
 Header   component as a child of the Panel.
 */
  header?: Header;
  /**
 * Hides the body components.
 * 
 * When a Panel is used within  `Panels`  ,
 `ActivityPanels`  , or
 `AlwaysViewingPanels`  ,
this property will be set automatically to  `true`  on render and  `false`  after animating
into view.
 */
  hideChildren?: boolean;
}
/**
 * A Panel is the standard view container used inside a  Panels   view
manager instance.
 * 
 * Panels   will typically contain several instances of these and
transition between them.
 */

export class Panel extends React.Component<
  PanelProps & React.HTMLProps<HTMLElement>
> {}

export interface AlwaysViewingPanelsProps {}
/**
 * An instance of  `Panels`   which restricts the  `Panel`  to the right
half of the screen with the left half used for breadcrumbs that allow navigating to previous
panels. Typically used for overlaying panels over a screen.
 */

export class AlwaysViewingPanels extends React.Component<
  AlwaysViewingPanelsProps & React.HTMLProps<HTMLElement>
> {}

export interface BreadcrumbProps {
  /**
   * Index of the associated panel.
   */
  index: number;
  /**
   * Called when the breadcrumb is clicked.
   *
   * The index of the clicked breadcrumb is passed in the event data.
   */
  onSelect?: Function;
}
/**
 * Vertical, transparent bar used to navigate to a prior Panel.
 * 
 * `ActivityPanels`   has one breadcrumb, and
 `AlwaysViewingPanels`   can have multiple stacked
horizontally.
 */

export class Breadcrumb extends React.Component<
  BreadcrumbProps & React.HTMLProps<HTMLElement>
> {}

export interface HeaderProps {
  /**
   * Configures the mode of uppercasing for the  `title` .
   * *  Values:  `'upper'` ,  `'preserve'` ,  `'word'` ,  `'sentence'`
   */
  casing?: string;
  /**
   * Children provided are added to the header-components area.
   *
   * A space for controls which live in the header, apart from the body of the panel view.
   */
  children?: JSX.Element | JSX.Element[];
  /**
   * Indents then content and removes separator lines.
   */
  fullBleed?: boolean;
  /**
 * `Input`   element that will replace the  `title` .
 * 
 * This is also a  slot  , so it can be referred
to as if it were JSX.
 * 
 * Example
 * ```
 <Header>
 	<title>Example Header Title</title>
 	<headerInput>
 		<Input dismissOnEnter />
 	</headerInput>
 	<titleBelow>The Adventure Continues</titleBelow>
 	<subTitleBelow>The rebels face attack by imperial forces on the ice planet</subTitleBelow>
 </Header>
```
 */
  headerInput?: React.ReactNode;
  /**
   * Determines what triggers the header content to start its animation.
   * *  Values:  `'focus'` ,  `'hover'`  and  `'render'` .
   */
  marqueeOn?: string;
  /**
 * Sub-title displayed at the bottom of the panel.
 * 
 * This is a  `slot`  , so it can be used as a tag-name inside
this component.
 */
  subTitleBelow?: string;
  /**
 * Title of the header.
 * 
 * This is a  `slot`  , so it can be used as a tag-name inside
this component.
 * 
 * Example:
 * ```
 <Header>
 	<title>Example Header Title</title>
 	<titleBelow>The Adventure Continues</titleBelow>
 	<subTitleBelow>The rebels face attack by imperial forces on the ice planet</subTitleBelow>
 </Header>
```
 */
  title?: string;
  /**
 * Text displayed below the title.
 * 
 * This is a  `slot`  , so it can be used as a tag-name inside
this component.
 */
  titleBelow?: string;
  /**
   * Set the type of header to be used.
   * *  Values:  `'standard'`  or  `'compact'` .
   */
  type?: string;
}
/**
 * A header component for a Panel with a  `title` ,  `titleBelow` , and  `subTitleBelow`
 */

export class Header extends React.Component<
  HeaderProps & React.HTMLProps<HTMLElement>
> {}

export interface RouteProps {
  /**
 * The component to render when the  `path`  for this Route matches the path of the
   container.
 */
  component: string | React.ComponentType;
  /**
   * The name of the path segment.
   */
  path: string;
}
/**
 * Used with    to define the  `path`  segment and the
 `component`  to render.
 * 
 * `Route`  elements can be nested to build multiple level paths.
 * 
 * In the below example,  `Panels`  would render  `SettingsPanel`  with breadcrumbs to
navigate  `AppPanel`  and  `HomePanel` .
 * ```
<Panels path="/app/home/settings" onSelectBreadcrumb={this.handleNavigate}>
	<Route path="app" component={AppPanel}>
		<Route path="home" component={HomePanel}>
			<Route path="settings" component={SettingsPanel} />
		</Route>
	</Route>
	<Route path="admin" component={AdminPanel} />
	<Route path="help" component={HelpPanel} />
</Panels>
```
 */

export class Route extends React.Component<
  RouteProps & React.HTMLProps<HTMLElement>
> {}

export default Panels;
