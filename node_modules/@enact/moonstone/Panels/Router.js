"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toSegments = exports.RouterBase = exports.Router = exports.Route = exports.propTypes = exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("@enact/core/internal/prop-types"));

var _ForwardRef = _interopRequireDefault(require("@enact/ui/ForwardRef"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var toSegments = function toSegments(path) {
  return Array.isArray(path) ? path : path.split('/').slice(1);
};

exports.toSegments = toSegments;

var getPaths = function getPaths(routes, base) {
  var result = [];
  Object.keys(routes).filter(function (s) {
    return s[0] !== '$';
  }).forEach(function (p) {
    var path = base + '/' + p;
    result.push(path);
    result = result.concat(getPaths(routes[p], path));
  });
  return result;
};

var stringifyRoutes = function stringifyRoutes(routes) {
  var pad = '\n\t';
  var paths = getPaths(routes, '');
  return pad + paths.join(pad);
};

var propTypes = {
  path: _propTypes2["default"].oneOfType([_propTypes2["default"].arrayOf(_propTypes2["default"].string), // array of path segments
  _propTypes2["default"].string // URI-style path
  ])
};
/**
 * A Router component for use with [`Panels`]{@link moonstone/Panels.Panels}
 *
 * @class Router
 * @memberof moonstone/Panels
 * @mixes ui/ForwardRef.ForwardRef
 * @ui
 * @private
 */

exports.propTypes = propTypes;
var RouterBase = (_temp = _class =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RouterBase, _React$Component);

  function RouterBase(props) {
    _classCallCheck(this, RouterBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(RouterBase).call(this, props));
  }
  /**
   * Generates a set of routes from `children` and appends them to `routes`.
   *
   * @param  {React.element[]} children Array of children
   * @param  {Object}          routes   Route configuration object
   *
   * @returns {Object}                   Route configuration object
   */


  _createClass(RouterBase, [{
    key: "createRoutes",
    value: function createRoutes(children, routes) {
      var _this = this;

      _react["default"].Children.forEach(children, function (child) {
        var _child$props = child.props,
            path = _child$props.path,
            grandchildren = _child$props.children,
            component = _child$props.component,
            rest = _objectWithoutProperties(_child$props, ["path", "children", "component"]);

        if (path && component) {
          routes[path] = {
            $component: component,
            $props: rest
          };

          if (grandchildren) {
            _this.createRoutes(grandchildren, routes[path]);
          }
        }
      });

      return routes;
    }
    /**
     * Creates an array of React.elements for the current path.
     *
     * @returns {React.element[]} Children to render
     */

  }, {
    key: "createChildren",
    value: function createChildren() {
      var segments = toSegments(this.props.path);
      var _this$props = this.props,
          routes = _this$props.routes,
          children = _this$props.children;
      var computedRoutes = routes || this.createRoutes(children, {});
      var valid = true;
      var route = computedRoutes;
      var childrenElements = segments.map(function (segment, index) {
        var subPath = segments.slice(0, index + 1).join('/');
        route = route && route[segment];

        if (route && route.$component) {
          return _react["default"].createElement(route.$component, _objectSpread({}, route.$props, {
            key: 'view$/' + subPath,
            spotlightId: "panel-".concat(subPath.replace(/\//g, '-'))
          }));
        }

        valid = false;
        return null;
      });
      process.env.NODE_ENV !== "production" ? (0, _warning["default"])(valid, "".concat(this.props.path, " does not match the configured routes: ").concat(stringifyRoutes(computedRoutes))) : void 0;
      return valid ? childrenElements : [];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          Component = _this$props2.component,
          componentRef = _this$props2.componentRef,
          rest = _objectWithoutProperties(_this$props2, ["component", "componentRef"]);

      var children = this.createChildren();
      delete rest.path;
      delete rest.routes;
      return _react["default"].createElement(Component, Object.assign({
        ref: componentRef
      }, rest), children);
    }
  }]);

  return RouterBase;
}(_react["default"].Component), _class.displayName = 'Router', _class.propTypes =
/** @lends moonstone/Panels.Router.prototype */
{
  /**
   * List of views to render.
   *
   * Will be rendered as a flat array of views suitable for use in
   * Panels and not a hierarchy of views as the path implies.
   *
   * May either be a URI-style path (`'/app/home/settings'`) or an array
   * of strings (`['app', 'home', 'settings']`).
   *
   * @type {String|String[]}
   * @required
   * @public
   */
  path: propTypes.path.isRequired,

  /**
   * The component wrapping the rendered path.
   *
   * @type {String|Component}
   * @default 'div'
   * @public
   */
  component: _propTypes["default"].renderable,

  /**
   * Called with a reference to [component]{@link moonstone/Panels.Router#component}.
   *
   * @private
   */
  componentRef: _propTypes2["default"].func,

  /**
   * Routes defined as an object rather than via JSX.
   *
   * If specified, `routes` will take
   * precendence over a JSX definition.
   *
   * ```JavaScript
   * const routes = {
   *   'first': {
   *     '$props': {
   *       'title': 'About Routable Panels Pattern'
   *     },
   *     '$component': AboutPanel,
   *     'second': {
   *       '$props': {
   *         'next': 'fourth',
   *         'title': 'Second'
   *       },
   *       '$component': MainPanel
   *     },
   *     'third': {
   *       '$props': {
   *         'next': 'first',
   *         'title': 'Third'
   *       },
   *       '$component': MainPanel,
   *       'fourth': {
   *         '$props': {
   *           'next': 'third',
   *           'title': 'Fourth'
   *         },
   *         '$component': MainPanel
   *       }
   *     }
   *   }
   * };
   *
   *	<Panels path="/app/home/settings" routes={routes} />
   * ```
   *
   * @type {Object}
   * @public
   */
  routes: _propTypes2["default"].object
}, _class.defaultProps = {
  component: 'div'
}, _temp);
exports.RouterBase = RouterBase;
var Router = (0, _ForwardRef["default"])({
  prop: 'componentRef'
}, RouterBase);
/**
 * Used with {@link moonstone/Panels.Routable} to define the `path` segment and the
 * `component` to render.
 *
 *`Route` elements can be nested to build multiple level paths.
 *
 * In the below example, `Panels` would render `SettingsPanel` with breadcrumbs to
 * navigate `AppPanel` and `HomePanel`.
 *
 * ```
 *	<Panels path="/app/home/settings" onSelectBreadcrumb={this.handleNavigate}>
 *		<Route path="app" component={AppPanel}>
 *			<Route path="home" component={HomePanel}>
 *				<Route path="settings" component={SettingsPanel} />
 *			</Route>
 *		</Route>
 *		<Route path="admin" component={AdminPanel} />
 *		<Route path="help" component={HelpPanel} />
 *	</Panels>
 * ```
 *
 * @class Route
 * @ui
 * @memberof moonstone/Panels
 * @public
 */

exports.Router = Router;

var Route = function Route() {
  return null;
};

exports.Route = Route;
Route.propTypes = {
  /**
   * The component to render when the `path` for this Route matches the path of the
   * {@link moonstone/Panels.Routable} container.
   *
   * @type {String|Component}
   * @required
   * @public
   * @memberof moonstone/Panels.Route.prototype
   */
  component: _propTypes["default"].renderable.isRequired,

  /**
   * The name of the path segment.
   *
   * @type {String}
   * @required
   * @public
   * @memberof moonstone/Panels.Route.prototype
   */
  path: _propTypes2["default"].string.isRequired
};
var _default = Router;
exports["default"] = _default;