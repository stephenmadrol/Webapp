// Type definitions for moonstone/VirtualList

import * as React from "react";
import { gridListItemSizeShape as ui_VirtualList_gridListItemSizeShape } from "@enact/ui/VirtualList";
import { VirtualListBaseProps as ui_VirtualList_VirtualListBaseProps } from "@enact/ui/VirtualList";

type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
type Merge<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;

export interface VirtualListProps extends VirtualListBaseProps {
  /**
 * Size of an item for the VirtualList; valid value is a number.
If the direction for the list is vertical, itemSize means the height of an item.
For horizontal, it means the width of an item.
 * 
 * Usage:
 * ```
<VirtualList itemSize={ri.scale(72)} />
```
 */
  itemSize: number;
}
/**
 * A Moonstone-styled scrollable and spottable virtual list component.
 */

export class VirtualList extends React.Component<
  VirtualListProps & React.HTMLProps<HTMLElement>
> {}

export interface VirtualListCoreProps {
  /**
 * The  `render`  function called for each item in the list.
 * 
 * NOTE: The list does NOT always render a component whenever its render function is called
due to performance optimization.
 * 
 * Usage:
 * ```
renderItem = ({index, ...rest}) => {
	return (
		<MyComponent index={index} {...rest} />
	);
}
```
 */
  itemRenderer: Function;
  /**
   * Size of the data.
   */
  dataSize?: number;
  /**
 * The Function that returns  `true`  if the item at the index is disabled.
It is used to navigate a list properly with 5 way keys, page up key,
and page down key. If it is not supplied, it assumes that no items are disabled.
 * 
 * Usage:
 * ```
isItemDisabled = (index) => (this.items[index].disabled)
render = () => {
	return (
		<VirtualList
			dataSize={this.items.length}
			isItemDisabled={isItemDisabled}
			itemRenderer={this.renderItem}
			itemSize={this.itemSize}
		/>
	);
}
```
 */
  isItemDisabled?: Function;
  /**
   * Spacing between items.
   */
  spacing?: number;
  /**
 * When it's  `true`  and the spotlight focus cannot move to the given direction anymore by 5-way keys,
a list is scrolled with an animation to the other side and the spotlight focus moves in wraparound manner.
 * 
 * When it's  `'noAnimation'` , the spotlight focus moves in wraparound manner as same as when it's  `true` 
except that a list is scrolled without an animation.
 */
  wrap?: boolean | string;
}
/**
 * The base version of  VirtualListBase   and
 VirtualListBaseNative  .
 */

export class VirtualListCore extends React.Component<
  VirtualListCoreProps & React.HTMLProps<HTMLElement>
> {}

export interface VirtualGridListProps extends VirtualListBaseProps {
  /**
 * Size of an item for the VirtualGridList; valid value is an object that has  `minWidth` 
and  `minHeight`  as properties.
 * 
 * Usage:
 * ```
<VirtualGridList
	itemSize={{
		minWidth: ri.scale(180),
		minHeight: ri.scale(270)
	}}
/>
```
 */
  itemSize: ui_VirtualList_gridListItemSizeShape;
}
/**
 * A Moonstone-styled scrollable and spottable virtual grid list component.
 */

export class VirtualGridList extends React.Component<
  VirtualGridListProps & React.HTMLProps<HTMLElement>
> {}

export interface VirtualListBaseProps
  extends ui_VirtualList_VirtualListBaseProps {
  /**
   * Activates the component for voice control.
   */
  "data-webos-voice-focused"?: boolean;
  /**
   * The voice control group label.
   */
  "data-webos-voice-group-label"?: string;
  /**
   * Direction of the list.
   *
   * Valid values are:
   * *  `'horizontal'` , and
   * *  `'vertical'` .
   */
  direction?: string;
}
/**
 * A Moonstone-styled base component for  VirtualList   and
 VirtualGridList  .
 */

export class VirtualListBase extends React.Component<
  VirtualListBaseProps & React.HTMLProps<HTMLElement>
> {}

export default VirtualList;
