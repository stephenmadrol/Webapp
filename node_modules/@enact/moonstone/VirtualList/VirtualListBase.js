"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualListBaseNative = exports.VirtualListBase = exports.ScrollableVirtualListNative = exports.ScrollableVirtualList = exports["default"] = void 0;

var _clamp = _interopRequireDefault(require("ramda/src/clamp"));

var _keymap = require("@enact/core/keymap");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _spotlight = _interopRequireWildcard(require("@enact/spotlight"));

var _Pause = _interopRequireDefault(require("@enact/spotlight/Pause"));

var _Spottable = _interopRequireDefault(require("@enact/spotlight/Spottable"));

var _Accelerator = _interopRequireDefault(require("@enact/spotlight/Accelerator"));

var _VirtualList = require("@enact/ui/VirtualList");

var _Scrollable = require("../Scrollable");

var _ScrollableNative = _interopRequireDefault(require("../Scrollable/ScrollableNative"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SpotlightAccelerator = new _Accelerator["default"]();
var SpotlightPlaceholder = (0, _Spottable["default"])('div');

var dataContainerDisabledAttribute = 'data-spotlight-container-disabled',
    isDown = (0, _keymap.is)('down'),
    isEnter = (0, _keymap.is)('enter'),
    isLeft = (0, _keymap.is)('left'),
    isRight = (0, _keymap.is)('right'),
    isUp = (0, _keymap.is)('up'),
    JS = 'JS',
    Native = 'Native',
    isItemDisabledDefault = function isItemDisabledDefault() {
  return false;
},
    // using 'bitwise or' for string > number conversion based on performance: https://jsperf.com/convert-string-to-number-techniques/7
getNumberValue = function getNumberValue(index) {
  return index | 0;
};
/**
 * The base version of [VirtualListBase]{@link moonstone/VirtualList.VirtualListBase} and
 * [VirtualListBaseNative]{@link moonstone/VirtualList.VirtualListBaseNative}.
 *
 * @class VirtualListCore
 * @memberof moonstone/VirtualList
 * @ui
 * @public
 */


var VirtualListBaseFactory = function VirtualListBaseFactory(type) {
  var _class, _temp;

  var UiBase = type === JS ? _VirtualList.VirtualListBase : _VirtualList.VirtualListBaseNative;
  return _temp = _class =
  /*#__PURE__*/
  function (_Component) {
    _inherits(VirtualListCore, _Component);

    /* No displayName here. We set displayName to returned components of this factory function. */
    function VirtualListCore(props) {
      var _this;

      _classCallCheck(this, VirtualListCore);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualListCore).call(this, props));
      _this.isScrolledBy5way = false;
      _this.isScrolledByJump = false;
      _this.isWrappedBy5way = false;
      _this.lastFocusedIndex = null;
      _this.nodeIndexToBeFocused = null;
      _this.preservedIndex = null;
      _this.restoreLastFocused = false;
      _this.uiRefCurrent = null;

      _this.setContainerDisabled = function (bool) {
        var spotlightId = _this.props.spotlightId,
            containerNode = document.querySelector("[data-spotlight-id=\"".concat(spotlightId, "\"]"));

        if (containerNode) {
          containerNode.setAttribute(dataContainerDisabledAttribute, bool);

          if (bool) {
            document.addEventListener('keydown', _this.handleGlobalKeyDown, {
              capture: true
            });
          } else {
            document.removeEventListener('keydown', _this.handleGlobalKeyDown, {
              capture: true
            });
          }
        }
      };

      _this.configureSpotlight = function (spotlightId) {
        var spacing = _this.props.spacing;

        _spotlight["default"].set(spotlightId, {
          enterTo: 'last-focused',

          /*
           * Returns the data-index as the key for last focused
           */
          lastFocusedPersist: _this.lastFocusedPersist,

          /*
           * Restores the data-index into the placeholder if its the only element. Tries to find a
           * matching child otherwise.
           */
          lastFocusedRestore: _this.lastFocusedRestore,

          /*
           * Directs spotlight focus to favor straight elements that are within range of `spacing`
           * over oblique elements, like scroll buttons.
           */
          obliqueMultiplier: spacing > 0 ? spacing : 1
        });
      };

      _this.lastFocusedPersist = function () {
        if (_this.lastFocusedIndex != null) {
          return {
            container: false,
            element: true,
            key: _this.lastFocusedIndex
          };
        }
      };

      _this.lastFocusedRestore = function (_ref, all) {
        var key = _ref.key;

        if (all.length === 1 && 'vlPlaceholder' in all[0].dataset) {
          all[0].dataset.index = key;
          return all[0];
        }

        return all.reduce(function (focused, node) {
          return focused || Number(node.dataset.index) === key && node;
        }, null);
      };

      _this.getExtentIndex = function (index) {
        return Math.floor(index / _this.uiRefCurrent.dimensionToExtent);
      };

      _this.findSpottableItem = function (indexFrom, indexTo) {
        var _this$props = _this.props,
            dataSize = _this$props.dataSize,
            isItemDisabled = _this$props.isItemDisabled,
            safeIndexFrom = (0, _clamp["default"])(0, dataSize - 1, indexFrom),
            safeIndexTo = (0, _clamp["default"])(-1, dataSize, indexTo),
            delta = indexFrom < indexTo ? 1 : -1;

        if (indexFrom < 0 && indexTo < 0 || indexFrom >= dataSize && indexTo >= dataSize) {
          return -1;
        } else if (isItemDisabled === isItemDisabledDefault) {
          return safeIndexFrom;
        }

        if (safeIndexFrom !== safeIndexTo) {
          for (var i = safeIndexFrom; i !== safeIndexTo; i += delta) {
            if (!isItemDisabled(i)) {
              return i;
            }
          }
        }

        return -1;
      };

      _this.findSpottableItemWithPositionInExtent = function (indexFrom, indexTo, position) {
        var dataSize = _this.props.dataSize,
            dimensionToExtent = _this.uiRefCurrent.dimensionToExtent;

        if (0 <= indexFrom && indexFrom < dataSize && -1 <= indexTo && indexTo <= dataSize && 0 <= position && position < dimensionToExtent) {
          var isItemDisabled = _this.props.isItemDisabled,
              direction = indexFrom < indexTo ? 1 : -1,
              delta = direction * dimensionToExtent,
              diffPosition = indexFrom % dimensionToExtent - position,
              startIndex = indexFrom - diffPosition + (direction * diffPosition > 0 ? delta : 0);

          for (var i = startIndex; direction * (indexTo - i) > 0; i += delta) {
            if (!isItemDisabled(i)) {
              return i;
            }
          }
        }

        return -1;
      };

      _this.findSpottableExtent = function (indexFrom, isForward) {
        var dataSize = _this.props.dataSize,
            dimensionToExtent = _this.uiRefCurrent.dimensionToExtent,
            _assertThisInitialize = _assertThisInitialized(_this),
            findSpottableItem = _assertThisInitialize.findSpottableItem,
            getExtentIndex = _assertThisInitialize.getExtentIndex,
            firstIndexInExtent = getExtentIndex(indexFrom) * dimensionToExtent;

        var index;

        if (isForward) {
          index = findSpottableItem(firstIndexInExtent + dimensionToExtent, dataSize);
        } else {
          index = findSpottableItem(firstIndexInExtent - 1, -1);
        }

        return getExtentIndex(index);
      };

      _this.findNearestSpottableItemInExtent = function (index, extentIndex) {
        var _this$props2 = _this.props,
            dataSize = _this$props2.dataSize,
            isItemDisabled = _this$props2.isItemDisabled,
            dimensionToExtent = _this.uiRefCurrent.dimensionToExtent,
            currentPosInExtent = (0, _clamp["default"])(0, dataSize - 1, index) % dimensionToExtent,
            firstIndexInExtent = (0, _clamp["default"])(0, _this.getExtentIndex(dataSize - 1), extentIndex) * dimensionToExtent,
            lastIndexInExtent = (0, _clamp["default"])(firstIndexInExtent, dataSize, firstIndexInExtent + dimensionToExtent);
        var minDistance = dimensionToExtent,
            distance,
            nearestIndex = -1;

        for (var i = firstIndexInExtent; i < lastIndexInExtent; ++i) {
          if (!isItemDisabled(i)) {
            distance = Math.abs(currentPosInExtent - i % dimensionToExtent);

            if (distance < minDistance) {
              minDistance = distance;
              nearestIndex = i;
            }
          }
        }

        return nearestIndex;
      };

      _this.getIndexToScroll = function (direction, currentIndex) {
        var _this$props3 = _this.props,
            dataSize = _this$props3.dataSize,
            spacing = _this$props3.spacing,
            _this$uiRefCurrent = _this.uiRefCurrent,
            dimensionToExtent = _this$uiRefCurrent.dimensionToExtent,
            _this$uiRefCurrent$pr = _this$uiRefCurrent.primary,
            clientSize = _this$uiRefCurrent$pr.clientSize,
            gridSize = _this$uiRefCurrent$pr.gridSize,
            itemSize = _this$uiRefCurrent$pr.itemSize,
            scrollPosition = _this$uiRefCurrent.scrollPosition,
            _assertThisInitialize2 = _assertThisInitialized(_this),
            findSpottableItem = _assertThisInitialize2.findSpottableItem,
            numOfItemsInPage = Math.floor((clientSize + spacing) / gridSize) * dimensionToExtent,
            firstFullyVisibleIndex = Math.ceil(scrollPosition / gridSize) * dimensionToExtent,
            lastFullyVisibleIndex = Math.min(dataSize - 1, Math.floor((scrollPosition + clientSize - itemSize) / gridSize) * dimensionToExtent);

        var candidateIndex = -1;
        /* First, find a spottable item in this page */

        if (direction === 'down') {
          // Page Down
          if (lastFullyVisibleIndex - lastFullyVisibleIndex % dimensionToExtent > currentIndex) {
            // If a current focused item is in the last visible line.
            candidateIndex = findSpottableItem(lastFullyVisibleIndex, currentIndex - currentIndex % dimensionToExtent + dimensionToExtent - 1);
          }
        } else if (firstFullyVisibleIndex + dimensionToExtent <= currentIndex) {
          // Page Up,  if a current focused item is in the first visible line.
          candidateIndex = findSpottableItem(firstFullyVisibleIndex, currentIndex - currentIndex % dimensionToExtent);
        }
        /* Second, find a spottable item in the next page */


        if (candidateIndex === -1) {
          if (direction === 'down') {
            // Page Down
            candidateIndex = findSpottableItem(lastFullyVisibleIndex + numOfItemsInPage, lastFullyVisibleIndex);
          } else {
            // Page Up
            candidateIndex = findSpottableItem(firstFullyVisibleIndex - numOfItemsInPage, firstFullyVisibleIndex);
          }
        }
        /* Last, find a spottable item in a whole data */


        if (candidateIndex === -1) {
          if (direction === 'down') {
            // Page Down
            candidateIndex = findSpottableItem(lastFullyVisibleIndex + numOfItemsInPage + 1, dataSize);
          } else {
            // Page Up
            candidateIndex = findSpottableItem(firstFullyVisibleIndex - numOfItemsInPage - 1, -1);
          }
        }
        /* For grid lists, find the nearest item from the current item */


        if (candidateIndex !== -1) {
          return _this.findNearestSpottableItemInExtent(currentIndex, _this.getExtentIndex(candidateIndex));
        } else {
          return -1;
        }
      };

      _this.scrollToNextItem = function (_ref2) {
        var direction = _ref2.direction,
            focusedItem = _ref2.focusedItem;

        var cbScrollTo = _this.props.cbScrollTo,
            _this$uiRefCurrent$st = _this.uiRefCurrent.state,
            firstIndex = _this$uiRefCurrent$st.firstIndex,
            numOfItems = _this$uiRefCurrent$st.numOfItems,
            focusedIndex = getNumberValue(focusedItem.getAttribute(_Scrollable.dataIndexAttribute)),
            indexToScroll = _this.getIndexToScroll(direction, focusedIndex);

        if (indexToScroll !== -1 && focusedIndex !== indexToScroll) {
          if (firstIndex <= indexToScroll && indexToScroll < firstIndex + numOfItems) {
            var node = _this.uiRefCurrent.containerRef.current.querySelector("[data-index='".concat(indexToScroll, "'].spottable"));

            if (node) {
              _spotlight["default"].focus(node);
            }
          } else {
            // Scroll to the next spottable item without animation
            _this.pause.pause();

            focusedItem.blur();
            _this.nodeIndexToBeFocused = _this.lastFocusedIndex = indexToScroll;
          }

          cbScrollTo({
            index: indexToScroll,
            stickTo: direction === 'down' ? 'end' : 'start',
            animate: false
          });
        }
      };

      _this.getNextIndex = function (_ref3) {
        var index = _ref3.index,
            keyCode = _ref3.keyCode,
            repeat = _ref3.repeat;
        var _this$props4 = _this.props,
            dataSize = _this$props4.dataSize,
            isItemDisabled = _this$props4.isItemDisabled,
            rtl = _this$props4.rtl,
            wrap = _this$props4.wrap;
        var _this$uiRefCurrent2 = _this.uiRefCurrent,
            isPrimaryDirectionVertical = _this$uiRefCurrent2.isPrimaryDirectionVertical,
            dimensionToExtent = _this$uiRefCurrent2.dimensionToExtent;
        var column = index % dimensionToExtent;
        var row = (index - column) % dataSize / dimensionToExtent;
        var isDownKey = isDown(keyCode);
        var isLeftMovement = !rtl && isLeft(keyCode) || rtl && isRight(keyCode);
        var isRightMovement = !rtl && isRight(keyCode) || rtl && isLeft(keyCode);
        var isUpKey = isUp(keyCode);
        var isNextRow = index + dimensionToExtent < dataSize;
        var isNextAdjacent = column < dimensionToExtent - 1 && index < dataSize - 1;
        var isWrapped = false;
        var nextIndex = -1;
        var targetIndex = -1;

        if (isPrimaryDirectionVertical) {
          if (isUpKey && row) {
            targetIndex = index - dimensionToExtent;
          } else if (isDownKey && isNextRow) {
            targetIndex = index + dimensionToExtent;
          } else if (isLeftMovement && column) {
            targetIndex = index - 1;
          } else if (isRightMovement && isNextAdjacent) {
            targetIndex = index + 1;
          }
        } else if (isLeftMovement && row) {
          targetIndex = index - dimensionToExtent;
        } else if (isRightMovement && isNextRow) {
          targetIndex = index + dimensionToExtent;
        } else if (isUpKey && column) {
          targetIndex = index - 1;
        } else if (isDownKey && isNextAdjacent) {
          targetIndex = index + 1;
        }

        if (targetIndex >= 0 && !isItemDisabled(targetIndex)) {
          nextIndex = targetIndex;
        }

        if (!repeat && nextIndex === -1 && wrap) {
          var isForward = isPrimaryDirectionVertical && isDownKey || !isPrimaryDirectionVertical && isRightMovement || null;
          var isBackward = isPrimaryDirectionVertical && isUpKey || !isPrimaryDirectionVertical && isLeftMovement || null;

          if (isForward && _this.findSpottableItem((row + 1) * dimensionToExtent, dataSize) < 0) {
            nextIndex = _this.findSpottableItem(0, index);
            isWrapped = true;
          } else if (isBackward && _this.findSpottableItem(-1, row * dimensionToExtent - 1) < 0) {
            nextIndex = _this.findSpottableItem(dataSize, index);
            isWrapped = true;
          }
        }

        return {
          isWrapped: isWrapped,
          nextIndex: nextIndex
        };
      };

      _this.onAcceleratedKeyDown = function (_ref4) {
        var keyCode = _ref4.keyCode,
            repeat = _ref4.repeat,
            target = _ref4.target;
        var _this$props5 = _this.props,
            cbScrollTo = _this$props5.cbScrollTo,
            spacing = _this$props5.spacing,
            wrap = _this$props5.wrap;
        var _this$uiRefCurrent3 = _this.uiRefCurrent,
            dimensionToExtent = _this$uiRefCurrent3.dimensionToExtent,
            _this$uiRefCurrent3$p = _this$uiRefCurrent3.primary,
            clientSize = _this$uiRefCurrent3$p.clientSize,
            gridSize = _this$uiRefCurrent3$p.gridSize,
            scrollPosition = _this$uiRefCurrent3.scrollPosition;
        var index = getNumberValue(target.dataset.index);

        var _this$getNextIndex = _this.getNextIndex({
          index: index,
          keyCode: keyCode,
          repeat: repeat
        }),
            isWrapped = _this$getNextIndex.isWrapped,
            nextIndex = _this$getNextIndex.nextIndex;

        _this.isScrolledBy5way = false;
        _this.isScrolledByJump = false;

        if (nextIndex >= 0) {
          var numOfItemsInPage = Math.floor((clientSize + spacing) / gridSize) * dimensionToExtent;
          var firstFullyVisibleIndex = Math.ceil(scrollPosition / gridSize) * dimensionToExtent;
          var isNextItemInView = nextIndex >= firstFullyVisibleIndex && nextIndex < firstFullyVisibleIndex + numOfItemsInPage;
          _this.lastFocusedIndex = nextIndex;

          if (isNextItemInView) {
            _this.focusOnItem(nextIndex);
          } else {
            _this.isScrolledBy5way = true;
            _this.isWrappedBy5way = isWrapped;

            if (isWrapped && _this.uiRefCurrent.containerRef.current.querySelector("[data-index='".concat(nextIndex, "'].spottable")) == null) {
              if (wrap === true) {
                _this.pause.pause();

                target.blur();
              } else {
                _this.focusOnItem(nextIndex);
              }

              _this.nodeIndexToBeFocused = nextIndex;
            } else {
              _this.focusOnItem(nextIndex);
            }

            cbScrollTo({
              index: nextIndex,
              stickTo: index < nextIndex ? 'end' : 'start',
              animate: !(isWrapped && wrap === 'noAnimation')
            });
          }
        } else if (!repeat && _spotlight["default"].move((0, _spotlight.getDirection)(keyCode))) {
          SpotlightAccelerator.reset();
        }
      };

      _this.onKeyDown = function (ev) {
        if ((0, _spotlight.getDirection)(ev.keyCode)) {
          ev.preventDefault();
          ev.stopPropagation();

          _spotlight["default"].setPointerMode(false);

          SpotlightAccelerator.processKey(ev, _this.onAcceleratedKeyDown);
        }
      };

      _this.onKeyUp = function (_ref5) {
        var keyCode = _ref5.keyCode;

        if ((0, _spotlight.getDirection)(keyCode) || isEnter(keyCode)) {
          SpotlightAccelerator.reset();
        }
      };

      _this.handleGlobalKeyDown = function () {
        _this.setContainerDisabled(false);
      };

      _this.focusOnNode = function (node) {
        if (node) {
          _spotlight["default"].focus(node);
        }
      };

      _this.focusOnItem = function (index) {
        var item = _this.uiRefCurrent.containerRef.current.querySelector("[data-index='".concat(index, "'].spottable"));

        if (_this.isWrappedBy5way) {
          SpotlightAccelerator.reset();
          _this.isWrappedBy5way = false;
        }

        _this.pause.resume();

        _this.focusOnNode(item);

        _this.nodeIndexToBeFocused = null;
        _this.isScrolledByJump = false;
      };

      _this.initItemRef = function (ref, index) {
        if (ref) {
          if (type === JS) {
            _this.focusOnItem(index);
          } else {
            // If focusing the item of VirtuallistNative, `onFocus` in Scrollable will be called.
            // Then VirtualListNative tries to scroll again differently from VirtualList.
            // So we would like to skip `focus` handling when focusing the item as a workaround.
            _this.isScrolledByJump = true;

            _this.focusOnItem(index);
          }
        }
      };

      _this.focusByIndex = function (index) {
        // We have to focus node async for now since list items are not yet ready when it reaches componentDid* lifecycle methods
        setTimeout(function () {
          _this.focusOnItem(index);
        }, 0);
      };

      _this.isNeededScrollingPlaceholder = function () {
        return _this.nodeIndexToBeFocused != null && _spotlight["default"].isPaused();
      };

      _this.handlePlaceholderFocus = function (ev) {
        var placeholder = ev.currentTarget;

        if (placeholder) {
          var index = placeholder.dataset.index;

          if (index) {
            _this.preservedIndex = getNumberValue(index);
            _this.restoreLastFocused = true;
          }
        }
      };

      _this.isPlaceholderFocused = function () {
        var current = _spotlight["default"].getCurrent();

        if (current && current.dataset.vlPlaceholder && _this.uiRefCurrent.containerRef.current.contains(current)) {
          return true;
        }

        return false;
      };

      _this.restoreFocus = function () {
        if (_this.restoreLastFocused && !_this.isPlaceholderFocused()) {
          var spotlightId = _this.props.spotlightId,
              node = _this.uiRefCurrent.containerRef.current.querySelector("[data-spotlight-id=\"".concat(spotlightId, "\"] [data-index=\"").concat(_this.preservedIndex, "\"]"));

          if (node) {
            // if we're supposed to restore focus and virtual list has positioned a set of items
            // that includes lastFocusedIndex, clear the indicator
            _this.restoreLastFocused = false; // try to focus the last focused item

            var foundLastFocused = _spotlight["default"].focus(node); // but if that fails (because it isn't found or is disabled), focus the container so
            // spotlight isn't lost


            if (!foundLastFocused) {
              _this.restoreLastFocused = true;

              _spotlight["default"].focus(spotlightId);
            }
          }
        }
      };

      _this.calculatePositionOnFocus = function (_ref6) {
        var item = _ref6.item,
            _ref6$scrollPosition = _ref6.scrollPosition,
            scrollPosition = _ref6$scrollPosition === void 0 ? _this.uiRefCurrent.scrollPosition : _ref6$scrollPosition;
        var pageScroll = _this.props.pageScroll,
            numOfItems = _this.uiRefCurrent.state.numOfItems,
            primary = _this.uiRefCurrent.primary,
            offsetToClientEnd = primary.clientSize - primary.itemSize,
            focusedIndex = getNumberValue(item.getAttribute(_Scrollable.dataIndexAttribute));

        if (!isNaN(focusedIndex)) {
          var gridPosition = _this.uiRefCurrent.getGridPosition(focusedIndex);

          if (numOfItems > 0 && focusedIndex % numOfItems !== _this.lastFocusedIndex % numOfItems) {
            var node = _this.uiRefCurrent.getItemNode(_this.lastFocusedIndex);

            if (node) {
              node.blur();
            }
          }

          _this.nodeIndexToBeFocused = null;
          _this.lastFocusedIndex = focusedIndex;

          if (primary.clientSize >= primary.itemSize) {
            if (gridPosition.primaryPosition > scrollPosition + offsetToClientEnd) {
              // forward over
              gridPosition.primaryPosition -= pageScroll ? 0 : offsetToClientEnd;
            } else if (gridPosition.primaryPosition >= scrollPosition) {
              // inside of client
              if (type === JS) {
                gridPosition.primaryPosition = scrollPosition;
              } else {
                // This code uses the trick to change the target position slightly which will not affect the actual result
                // since a browser ignore `scrollTo` method if the target position is same as the current position.
                gridPosition.primaryPosition = scrollPosition + (_this.uiRefCurrent.scrollPosition === scrollPosition ? 0.1 : 0);
              }
            } else {
              // backward over
              gridPosition.primaryPosition -= pageScroll ? offsetToClientEnd : 0;
            }
          } // Since the result is used as a target position to be scrolled,
          // scrondaryPosition should be 0 here.


          gridPosition.secondaryPosition = 0;
          return _this.uiRefCurrent.gridPositionToItemPosition(gridPosition);
        }
      };

      _this.shouldPreventScrollByFocus = function () {
        return type === JS ? _this.isScrolledBy5way : _this.isScrolledBy5way || _this.isScrolledByJump;
      };

      _this.shouldPreventOverscrollEffect = function () {
        return _this.isWrappedBy5way;
      };

      _this.setLastFocusedNode = function (node) {
        _this.lastFocusedIndex = node.dataset && getNumberValue(node.dataset.index);
      };

      _this.updateStatesAndBounds = function (_ref7) {
        var cbScrollTo = _ref7.cbScrollTo,
            dataSize = _ref7.dataSize,
            moreInfo = _ref7.moreInfo,
            numOfItems = _ref7.numOfItems;

        var _assertThisInitialize3 = _assertThisInitialized(_this),
            preservedIndex = _assertThisInitialize3.preservedIndex;

        if (_this.restoreLastFocused && numOfItems > 0 && preservedIndex < dataSize && (preservedIndex < moreInfo.firstVisibleIndex || preservedIndex > moreInfo.lastVisibleIndex)) {
          // If we need to restore last focus and the index is beyond the screen,
          // we call `scrollTo` to create DOM for it.
          cbScrollTo({
            index: preservedIndex,
            animate: false,
            focus: true
          });
          _this.isScrolledByJump = true;
          return true;
        } else {
          return false;
        }
      };

      _this.getScrollBounds = function () {
        return _this.uiRefCurrent.getScrollBounds();
      };

      _this.getComponentProps = function (index) {
        return index === _this.nodeIndexToBeFocused ? {
          ref: function ref(_ref8) {
            return _this.initItemRef(_ref8, index);
          }
        } : {};
      };

      _this.initUiRef = function (ref) {
        if (ref) {
          _this.uiRefCurrent = ref;

          _this.props.initUiChildRef(ref);
        }
      };

      var _spotlightId = props.spotlightId;

      if (_spotlightId) {
        _this.configureSpotlight(_spotlightId);
      }

      _this.pause = new _Pause["default"]('VirtualListBase');
      return _this;
    }

    _createClass(VirtualListCore, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var containerNode = this.uiRefCurrent.containerRef.current;

        if (type === JS) {
          // prevent native scrolling by Spotlight
          this.preventScroll = function () {
            containerNode.scrollTop = 0;
            containerNode.scrollLeft = _this2.props.rtl ? containerNode.scrollWidth : 0;
          };

          if (containerNode && containerNode.addEventListener) {
            containerNode.addEventListener('scroll', this.preventScroll);
          }
        }

        if (containerNode && containerNode.addEventListener) {
          containerNode.addEventListener('keydown', this.onKeyDown);
          containerNode.addEventListener('keyup', this.onKeyUp);
        }

        setTimeout(function () {
          _this2.restoreFocus();
        }, 0);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.spotlightId !== this.props.spotlightId) {
          this.configureSpotlight(this.props.spotlightId);
        }

        this.restoreFocus();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var containerNode = this.uiRefCurrent.containerRef.current;

        if (type === JS) {
          // remove a function for preventing native scrolling by Spotlight
          if (containerNode && containerNode.removeEventListener) {
            containerNode.removeEventListener('scroll', this.preventScroll);
          }
        }

        if (containerNode && containerNode.removeEventListener) {
          containerNode.removeEventListener('keydown', this.onKeyDown);
          containerNode.removeEventListener('keyup', this.onKeyUp);
        }

        this.pause.resume();
        SpotlightAccelerator.reset();
        this.setContainerDisabled(false);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props6 = this.props,
            _itemRenderer = _this$props6.itemRenderer,
            _itemsRenderer = _this$props6.itemsRenderer,
            rest = _objectWithoutProperties(_this$props6, ["itemRenderer", "itemsRenderer"]),
            needsScrollingPlaceholder = this.isNeededScrollingPlaceholder();

        delete rest.initUiChildRef;
        delete rest.isItemDisabled;
        delete rest.spotlightId;
        delete rest.wrap;
        return _react["default"].createElement(UiBase, Object.assign({}, rest, {
          getComponentProps: this.getComponentProps,
          itemRenderer: function itemRenderer(_ref9) {
            var _objectSpread2;

            var index = _ref9.index,
                itemRest = _objectWithoutProperties(_ref9, ["index"]);

            return (// eslint-disable-line react/jsx-no-bind
              _itemRenderer(_objectSpread({}, itemRest, (_objectSpread2 = {}, _defineProperty(_objectSpread2, _Scrollable.dataIndexAttribute, index), _defineProperty(_objectSpread2, "index", index), _objectSpread2)))
            );
          },
          ref: this.initUiRef,
          updateStatesAndBounds: this.updateStatesAndBounds,
          itemsRenderer: function itemsRenderer(props) {
            // eslint-disable-line react/jsx-no-bind
            return _itemsRenderer(_objectSpread({}, props, {
              handlePlaceholderFocus: _this3.handlePlaceholderFocus,
              needsScrollingPlaceholder: needsScrollingPlaceholder
            }));
          }
        }));
      }
    }]);

    return VirtualListCore;
  }(_react.Component), _class.propTypes =
  /** @lends moonstone/VirtualList.VirtualListCore.prototype */
  {
    /**
     * The `render` function called for each item in the list.
     *
     * > NOTE: The list does NOT always render a component whenever its render function is called
     * due to performance optimization.
     *
     * Usage:
     * ```
     * renderItem = ({index, ...rest}) => {
     * 	return (
     * 		<MyComponent index={index} {...rest} />
     * 	);
     * }
     * ```
     *
     * @type {Function}
     * @param {Object} event
     * @param {Number} event.data-index It is required for Spotlight 5-way navigation. Pass to the root element in the component.
     * @param {Number} event.index The index number of the component to render
     * @param {Number} event.key It MUST be passed as a prop to the root element in the component for DOM recycling.
     *
     * @required
     * @public
     */
    itemRenderer: _propTypes["default"].func.isRequired,

    /**
     * The render function for the items.
     *
     * @type {Function}
     * @required
     * @private
     */
    itemsRenderer: _propTypes["default"].func.isRequired,

    /**
     * Callback method of scrollTo.
     * Normally, [Scrollable]{@link ui/Scrollable.Scrollable} should set this value.
     *
     * @type {Function}
     * @private
     */
    cbScrollTo: _propTypes["default"].func,

    /**
     * Size of the data.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    dataSize: _propTypes["default"].number,

    /**
     * Passes the instance of [VirtualList]{@link ui/VirtualList.VirtualList}.
     *
     * @type {Object}
     * @param {Object} ref
     * @private
     */
    initUiChildRef: _propTypes["default"].func,

    /**
     * The Function that returns `true` if the item at the index is disabled.
     * It is used to navigate a list properly with 5 way keys, page up key,
     * and page down key. If it is not supplied, it assumes that no items are disabled.
     *
     * Usage:
     * ```
     * isItemDisabled = (index) => (this.items[index].disabled)
     * render = () => {
     * 	return (
     * 		<VirtualList
     * 			dataSize={this.items.length}
     * 			isItemDisabled={isItemDisabled}
     * 			itemRenderer={this.renderItem}
     * 			itemSize={this.itemSize}
     * 		/>
     * 	);
     * }
     * ```
     *
     * @type {Function}
     * @param {Number} index
     * @public
     */
    isItemDisabled: _propTypes["default"].func,

    /*
     * It scrolls by page when `true`, by item when `false`.
     *
     * @type {Boolean}
     * @default false
     * @private
     */
    pageScroll: _propTypes["default"].bool,

    /**
     * `true` if rtl, `false` if ltr.
     * Normally, [Scrollable]{@link ui/Scrollable.Scrollable} should set this value.
     *
     * @type {Boolean}
     * @private
     */
    rtl: _propTypes["default"].bool,

    /**
     * Spacing between items.
     *
     * @type {Number}
     * @default 0
     * @public
     */
    spacing: _propTypes["default"].number,

    /**
     * Spotlight Id. It would be the same with [Scrollable]{@link ui/Scrollable.Scrollable}'s.
     *
     * @type {String}
     * @private
     */
    spotlightId: _propTypes["default"].string,

    /**
     * When it's `true` and the spotlight focus cannot move to the given direction anymore by 5-way keys,
     * a list is scrolled with an animation to the other side and the spotlight focus moves in wraparound manner.
     *
     * When it's `'noAnimation'`, the spotlight focus moves in wraparound manner as same as when it's `true`
     * except that a list is scrolled without an animation.
     *
     * @type {Boolean|String}
     * @default false
     * @public
     */
    wrap: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].oneOf(['noAnimation'])])
  }, _class.defaultProps = {
    dataSize: 0,
    isItemDisabled: isItemDisabledDefault,
    pageScroll: false,
    spacing: 0,
    wrap: false
  }, _temp;
};
/**
 * A Moonstone-styled base component for [VirtualList]{@link moonstone/VirtualList.VirtualList} and
 * [VirtualGridList]{@link moonstone/VirtualList.VirtualGridList}.
 *
 * @class VirtualListBase
 * @memberof moonstone/VirtualList
 * @extends ui/VirtualList.VirtualListBase
 * @ui
 * @public
 */


var VirtualListBase = VirtualListBaseFactory(JS);
exports.VirtualListBase = VirtualListBase;
VirtualListBase.displayName = 'VirtualListBase';
/**
 * Activates the component for voice control.
 *
 * @name data-webos-voice-focused
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {Boolean}
 * @public
 */

/**
 * The voice control group label.
 *
 * @name data-webos-voice-group-label
 * @memberof moonstone/VirtualList.VirtualListBase.prototype
 * @type {String}
 * @public
 */

/**
 * A Moonstone-styled base component for [VirtualListNative]{@link moonstone/VirtualList.VirtualListNative} and
 * [VirtualGridListNative]{@link moonstone/VirtualList.VirtualGridListNative}.
 *
 * @class VirtualListBaseNative
 * @memberof moonstone/VirtualList
 * @extends ui/VirtualList.VirtualListBaseNative
 * @ui
 * @private
 */

var VirtualListBaseNative = VirtualListBaseFactory(Native);
exports.VirtualListBaseNative = VirtualListBaseNative;
VirtualListBaseNative.displayName = 'VirtualListBaseNative';

var ScrollableVirtualList = function ScrollableVirtualList(props) {
  return (// eslint-disable-line react/jsx-no-bind
    _react["default"].createElement(_Scrollable.Scrollable, Object.assign({}, props, {
      childRenderer: function childRenderer(childProps) {
        return (// eslint-disable-line react/jsx-no-bind
          _react["default"].createElement(VirtualListBase, Object.assign({}, childProps, {
            itemsRenderer: function itemsRenderer(_ref10) {
              var cc = _ref10.cc,
                  handlePlaceholderFocus = _ref10.handlePlaceholderFocus,
                  initUiItemContainerRef = _ref10.initItemContainerRef,
                  needsScrollingPlaceholder = _ref10.needsScrollingPlaceholder,
                  primary = _ref10.primary;
              return (// eslint-disable-line react/jsx-no-bind
                [cc.length ? _react["default"].createElement("div", {
                  key: "0",
                  ref: initUiItemContainerRef,
                  role: "list"
                }, cc) : null, primary ? null : _react["default"].createElement(SpotlightPlaceholder, {
                  "data-index": 0,
                  "data-vl-placeholder": true,
                  key: "1",
                  onFocus: handlePlaceholderFocus
                }), needsScrollingPlaceholder ? _react["default"].createElement(SpotlightPlaceholder, {
                  key: "2"
                }) : null]
              );
            }
          }))
        );
      }
    }))
  );
};

exports.ScrollableVirtualList = ScrollableVirtualList;
ScrollableVirtualList.propTypes =
/** @lends moonstone/VirtualList.VirtualListBase.prototype */
{
  /**
   * Direction of the list.
   *
   * Valid values are:
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'vertical'
   * @public
   */
  direction: _propTypes["default"].oneOf(['horizontal', 'vertical'])
};
ScrollableVirtualList.defaultProps = {
  direction: 'vertical'
};

var ScrollableVirtualListNative = function ScrollableVirtualListNative(props) {
  return _react["default"].createElement(_ScrollableNative["default"], Object.assign({}, props, {
    childRenderer: function childRenderer(childProps) {
      return (// eslint-disable-line react/jsx-no-bind
        _react["default"].createElement(VirtualListBaseNative, Object.assign({}, childProps, {
          itemsRenderer: function itemsRenderer(_ref11) {
            var cc = _ref11.cc,
                handlePlaceholderFocus = _ref11.handlePlaceholderFocus,
                initUiItemContainerRef = _ref11.initItemContainerRef,
                needsScrollingPlaceholder = _ref11.needsScrollingPlaceholder,
                primary = _ref11.primary;
            return (// eslint-disable-line react/jsx-no-bind
              [cc.length ? _react["default"].createElement("div", {
                key: "0",
                ref: initUiItemContainerRef,
                role: "list"
              }, cc) : null, primary ? null : _react["default"].createElement(SpotlightPlaceholder, {
                "data-index": 0,
                "data-vl-placeholder": true,
                key: "1",
                onFocus: handlePlaceholderFocus
              }), needsScrollingPlaceholder ? _react["default"].createElement(SpotlightPlaceholder, {
                key: "2"
              }) : null]
            );
          }
        }))
      );
    }
  }));
};

exports.ScrollableVirtualListNative = ScrollableVirtualListNative;
ScrollableVirtualListNative.propTypes =
/** @lends moonstone/VirtualList.VirtualListBaseNative.prototype */
{
  /**
   * Direction of the list.
   *
   * Valid values are:
   * * `'horizontal'`, and
   * * `'vertical'`.
   *
   * @type {String}
   * @default 'vertical'
   * @public
   */
  direction: _propTypes["default"].oneOf(['horizontal', 'vertical'])
};
ScrollableVirtualListNative.defaultProps = {
  direction: 'vertical'
};
var _default = VirtualListBase;
exports["default"] = _default;