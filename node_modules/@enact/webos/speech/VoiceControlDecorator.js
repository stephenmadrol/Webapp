"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoiceControlDecorator = exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _hoc = _interopRequireDefault(require("@enact/core/hoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * VoiceControlDecorator is a higher-order component that adds a callback for voice event
 * to its wrapped component.
 *
 * By default, `onVoice` handler will be added to the node where `data-webos-voice-intent` attribute is declared.
 * In addition, if you need to specify a target node, `data-webos-voice-event-target` attribute can be used.
 *
 * Usage:
 * ```
 * import React from 'react';
 * import Item from '@enact/moonstone/Item';
 * import {VoiceControlDecorator} from '@enact/webos/speech';
 *
 * const VoiceDiv = VoiceControlDecorator('div');
 * const VoiceItem = VoiceControlDecorator(Item);
 *
 * class Sample extends React.Component {
 *   handlePlayListControl = (e) => {
 *     const {intent, control} = e.detail;
 *     // Change the app status refer to the `control` value.
 *   }
 *
 *   handlePlayContent = (e) => {
 *     const {intent, value} = e.detail;
 *     // Play content
 *   }
 *
 *   render () {
 *     return(
 *       <div>
 *         <VoiceDiv
 *           data-webos-voice-intent='PlayListControl'
 *           onVoice={this.handlePlayListControl}
 *         />
 *         <VoiceItem
 *           data-webos-voice-intent='Select PlayContent'
 *           onVoice={this.handlePlayContent}
 *         >
 *           The Dark Knight
 *         </VoiceItem>
 *       </div>
 *     );
 *   }
 * }
 * ```
 *
 * @class VoiceControlDecorator
 * @memberof webos/speech
 * @hoc
 * @public
 */
var VoiceControlDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class, _temp;

  // eslint-disable-line no-unused-vars
  return _temp = _class =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_class, _React$Component);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
    }

    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.node = (0, _reactDom.findDOMNode)(this); // eslint-disable-line

        if (this.node && !(this.node.hasAttribute('data-webos-voice-event-target') || this.node.hasAttribute('data-webos-voice-intent'))) {
          this.node = this.node.querySelector('[data-webos-voice-event-target]') || this.node.querySelector('[data-webos-voice-intent]');
        }

        if (this.node) this.node.addEventListener('webOSVoice', this.props.onVoice);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.node) this.node.removeEventListener('webOSVoice', this.props.onVoice);
      }
    }, {
      key: "render",
      value: function render() {
        var props = _objectSpread({}, this.props);

        delete props.onVoice;
        return _react["default"].createElement(Wrapped, props);
      }
    }]);

    return _class;
  }(_react["default"].Component), _class.displayName = 'VoiceControlDecorator', _class.propTypes =
  /** @lends webos/speech.VoiceControlDecorator.prototype */
  {
    /**
     * Callback to be executed when a wrapped element's `data-webos-voice-intent` is activated.
     *
     * @type {Function}
     * @required
     * @public
     */
    onVoice: _propTypes["default"].func.isRequired
  }, _temp;
});
exports.VoiceControlDecorator = VoiceControlDecorator;
var _default = VoiceControlDecorator;
exports["default"] = _default;